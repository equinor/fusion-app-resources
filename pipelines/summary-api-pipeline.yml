name: $(date:yyyyMMdd)$(rev:.r)

pr: none

trigger:
  branches:
    include:
    - master
  paths:
    include:
    - src/Fusion.Summary.Api/*

pool:
  vmImage: ubuntu-latest  

resources:
  repositories:
    - repository: infra
      name: equinor/fusion-infrastructure
      type: github
      endpoint: fusion-infrastructure

variables:
    imageTag: $(Build.BuildNumber)
    fusionAcr: 'crfsharedhostingall.azurecr.io'
    imageRepo: fra/fusion-summary-api
    imageName: $(imageRepo):$(imageTag)
    subscriptionServiceNonProd: 'FRA Automation Non-Prod'
    subscriptionServiceProd: 'FRA Automation Prod'
    deploymentManifestFolder: '$(Pipeline.Workspace)/k8s-deployment'
    fullImageName: $(fusionAcr)/$(imageName)
    dbTagPrefix: summary
  
stages:
  - stage: BuildDockerImage
    displayName: 'Build docker image'
    jobs:
    - job: BuildImage
      steps:
      - task: Docker@2
        displayName: 'Build docker image'
        inputs:
          containerRegistry: 'fusion-aks-cr'
          repository: $(imageRepo)
          command: 'buildAndPush'
          buildContext: ./src
          dockerfile: src/Fusion.Summary.Api/Dockerfile
          tags: $(imageTag)    

      - template: templates/docker-buildx.yml@infra
        parameters:
          initBuilderInstance: false
          repository: ''
          buildContext: ./src
          dockerfile: src/Fusion.Summary.Api/Dockerfile
          arguments: |
            --target=export
            --output=type=local,dest=$(Build.ArtifactStagingDirectory)
            --cache-from=type=registry,ref=crfsharedhostingall.azurecr.io/$(imageRepo):$(imageTag)

      - task: CopyFiles@2
        displayName: 'Copy Files to: $(Build.ArtifactStagingDirectory)'
        inputs:
          SourceFolder: 'src/Fusion.Summary.Api/Deployment/k8s'
          Contents: |
            deployment-*.yml
          TargetFolder: '$(Build.ArtifactStagingDirectory)'

      - publish: $(Build.ArtifactStagingDirectory)
        artifact: 'k8s-deployment'
  
  - stage: DeployCI
    displayName: 'Deploy to CI'
    dependsOn: BuildDockerImage
    condition: succeeded()
    variables: 
      envName: 'ci'
      fusionEnvironment: 'ci'
      clientId: '5a842df8-3238-415d-b168-9f16a6a6031b'
      aks-namespace: 'fusion-resource-allocation-ci'
  
    jobs:
    - deployment: DeployCI
      environment: fusion-ci
      strategy:
        runOnce:
          deploy:
            steps:
            - task: AzurePowerShell@5
              displayName: 'Get secrets'
              inputs:
                azureSubscription: $(subscriptionServiceNonProd)
                ScriptType: 'InlineScript'
                FailOnStandardError: true
                azurePowerShellVersion: 'LatestVersion'
                Inline: |
                    $secretText = Get-AzKeyVaultSecret -VaultName kv-fap-resources-ci -Name AzureAd--ClientSecret -AsPlainText
                    Write-Output "##vso[task.setvariable variable=clientSecret;issecret=true]$($secretText)"

            - template: templates/get-appinsights-key.yml
              parameters:
                environment: $(envName)
                azureSubscription: $(subscriptionServiceNonProd)


            # Load the key vault url into variable, so it can be used when replacing tokens.
            - template: templates/get-keyvault-url.yml
              parameters:
                environment: $(envName)
                variableName: envKeyVaultUrl
                azureSubscription: $(subscriptionServiceNonProd)
                

            - template: templates/replace-tokens.yml
              parameters:
                targetFiles: $(deploymentManifestFolder)/*.yml

            - template: templates/execute-sql-migration.yml
              parameters:
                artifact: 'k8s-deployment'
                environment: $(envName)
                azureSubscription: $(subscriptionServiceNonProd)
                dbTagPrefix: $(dbTagPrefix)
  
            - task: KubernetesManifest@1
              displayName: Deploy to Kubernetes cluster
              inputs:
                kubernetesServiceConnection: fra-k8s-ci
                namespace: $(aks-namespace)
                action: deploy
                manifests: |
                  $(deploymentManifestFolder)/deployment-service.yml
                  $(deploymentManifestFolder)/deployment-ingress-test.yml

  - stage: DeployFQA
    displayName: 'Deploy to FQA'
    dependsOn: DeployCI
    condition: succeeded()
    variables: 
      envName: 'fqa'
      fusionEnvironment: 'fqa'
      clientId: '5a842df8-3238-415d-b168-9f16a6a6031b'
      aks-namespace: 'fusion-resource-allocation-fqa'
              
    jobs:
      - deployment: DeployFQA
        environment: fusion-fqa.fusion-resources-app-fqa
        strategy:
          runOnce:
            deploy:
              steps:
              - task: AzurePowerShell@5
                displayName: 'Get secrets'
                inputs:
                  azureSubscription: $(subscriptionServiceNonProd)
                  ScriptType: 'InlineScript'
                  FailOnStandardError: true
                  azurePowerShellVersion: 'LatestVersion'
                  Inline: |
                    $secretText = Get-AzKeyVaultSecret -VaultName kv-fap-resources-fqa -Name AzureAd--ClientSecret -AsPlainText
                    Write-Output "##vso[task.setvariable variable=clientSecret;issecret=true]$($secretText)"
  
              - template: templates/get-appinsights-key.yml
                parameters:
                  environment: $(envName)
                  azureSubscription: $(subscriptionServiceNonProd)
  
              # Load the key vault url into variable, so it can be used when replacing tokens.
              - template: templates/get-keyvault-url.yml
                parameters:
                  environment: $(envName)
                  variableName: envKeyVaultUrl
                  azureSubscription: $(subscriptionServiceNonProd)
  
              - template: templates/replace-tokens.yml
                parameters:
                  targetFiles: $(deploymentManifestFolder)/*.yml
  
              - template: templates/execute-sql-migration.yml
                parameters:
                  artifact: 'k8s-deployment'
                  environment: $(envName)
                  azureSubscription: $(subscriptionServiceNonProd)
                  dbTagPrefix: $(dbTagPrefix)
    
              - task: KubernetesManifest@1
                displayName: Deploy to Kubernetes cluster
                inputs:
                  kubernetesServiceConnection: fra-k8s-fqa
                  namespace: $(aks-namespace)
                  action: deploy
                  manifests: |
                    $(deploymentManifestFolder)/deployment-service.yml
                    $(deploymentManifestFolder)/deployment-ingress-test.yml

  - stage: DeployFPRD
    displayName: 'Deploy to FPRD'
    dependsOn: DeployFQA
    condition: succeeded()
    variables: 
      envName: 'fprd'
      fusionEnvironment: 'fprd'
      clientId: '97978493-9777-4d48-b38a-67b0b9cd88d2'
      aks-namespace: 'fusion-resource-allocation-prod'
              
    jobs:
      - deployment: DeployFPRD
        environment: fusion-prod.fusion-resources-app-fprd
        strategy:
          runOnce:
            deploy:
              steps:
              - task: AzurePowerShell@5
                displayName: 'Get secrets'
                inputs:
                  azureSubscription: $(subscriptionServiceProd)
                  ScriptType: 'InlineScript'
                  FailOnStandardError: true
                  azurePowerShellVersion: 'LatestVersion'
                  Inline: |
                    $secretText = Get-AzKeyVaultSecret -VaultName kv-fap-resources-fprd -Name AzureAd--ClientSecret -AsPlainText
                    Write-Output "##vso[task.setvariable variable=clientSecret;issecret=true]$($secretText)"
  
              - template: templates/get-appinsights-key.yml
                parameters:
                  environment: $(envName)
                  azureSubscription: $(subscriptionServiceProd)
  
              # Load the key vault url into variable, so it can be used when replacing tokens.
              - template: templates/get-keyvault-url.yml
                parameters:
                  environment: $(envName)
                  variableName: envKeyVaultUrl
                  azureSubscription: $(subscriptionServiceProd)
  
              - template: templates/replace-tokens.yml
                parameters:
                  targetFiles: $(deploymentManifestFolder)/*.yml
  
              - template: templates/execute-sql-migration.yml
                parameters:
                  artifact: 'k8s-deployment'
                  environment: $(envName)
                  azureSubscription: $(subscriptionServiceProd)
                  dbTagPrefix: $(dbTagPrefix)
  
              - task: KubernetesManifest@1
                displayName: Deploy to Kubernetes cluster
                inputs:
                  kubernetesServiceConnection: fra-k8s-prod
                  namespace: $(aks-namespace)
                  action: deploy
                  manifests: |
                    $(deploymentManifestFolder)/deployment-service.yml
                    $(deploymentManifestFolder)/deployment-ingress-prod.yml

              ## Must check out code to get deployment file
              - checkout: self
              - task: AzurePowerShell@5
                displayName: 'Deploy ARM template'
                inputs:
                  azureSubscription: $(subscriptionServiceProd)
                  ScriptType: FilePath
                  FailOnStandardError: true
                  azurePowerShellVersion: 'LatestVersion'
                  ScriptPath: src/Fusion.Summary.Api/Deployment/deploy-webapp.ps1
                  ScriptArguments: >
                    -environment $(envName)
                    -clientId $(clientId)
                    -fusionEnvironment $(fusionEnvironment)
                    -imageName $(fullImageName)

  - stage: DeployTR
    displayName: 'Deploy to TR'
    dependsOn: DeployFPRD
    condition: succeeded()
    variables: 
      envName: 'tr'
      fusionEnvironment: 'tr'
      clientId: '5a842df8-3238-415d-b168-9f16a6a6031b'
      aks-namespace: 'fusion-resource-allocation-tr'
              
    jobs:
      - deployment: DeployTR
        environment: fusion-tr.fusion-resources-app-tr
        strategy:
          runOnce:
            deploy:
              steps:
              - task: AzurePowerShell@5
                displayName: 'Get secrets'
                inputs:
                  azureSubscription: $(subscriptionServiceNonProd)
                  ScriptType: 'InlineScript'
                  FailOnStandardError: true
                  azurePowerShellVersion: 'LatestVersion'
                  Inline: |
                    $secretText = Get-AzKeyVaultSecret -VaultName kv-fap-resources-tr -Name AzureAd--ClientSecret -AsPlainText
                    Write-Output "##vso[task.setvariable variable=clientSecret;issecret=true]$($secretText)"
  
              - template: templates/get-appinsights-key.yml
                parameters:
                  environment: $(envName)
                  azureSubscription: $(subscriptionServiceNonProd)
  
              # Load the key vault url into variable, so it can be used when replacing tokens.
              - template: templates/get-keyvault-url.yml
                parameters:
                  environment: $(envName)
                  variableName: envKeyVaultUrl
                  azureSubscription: $(subscriptionServiceNonProd)
  
              - template: templates/replace-tokens.yml
                parameters:
                  targetFiles: $(deploymentManifestFolder)/*.yml
  
              - template: templates/execute-sql-migration.yml
                parameters:
                  artifact: 'k8s-deployment'
                  environment: $(envName)
                  azureSubscription: $(subscriptionServiceNonProd)
                  dbTagPrefix: $(dbTagPrefix)
    
              - task: KubernetesManifest@1
                displayName: Deploy to Kubernetes cluster
                inputs:
                  kubernetesServiceConnection: fra-k8s-tr
                  namespace: $(aks-namespace)
                  action: deploy
                  manifests: |
                    $(deploymentManifestFolder)/deployment-service.yml
                    $(deploymentManifestFolder)/deployment-ingress-test.yml