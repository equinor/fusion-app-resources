parameters:
  azureSubscription: ''
  name: ''
  secretName: ''
  vaultName: ''

## Check if key is about expired
  ## If yes, set variable generateNew => true, else false.
  ## At the same time check all version of the key, to identify expired keys that can be deleted from the app registration.
  ## These are stored in a variable, as the env dev ops principal should not have access to the fusion core app registration.
  
steps:
  - template: check-for-expiration.yml
    parameters:
      azureSubscription: ${{ parameters.azureSubscription }}
      vaultName: ${{ parameters.vaultName }}
      name: ${{ parameters.name }}_Check
      secretName: ${{ parameters.secretName }}

  - template: generate-secret.yml
    parameters:
      condition: eq(variables['${{ parameters.name }}_Check.generateNew'], 'true')
      azureSubscription: $(subscriptionServiceCore)
      name: ${{ parameters.name }}_SecretGen
      clientId: $(aadApplicationId)
      secretDescription: 'FRA - $(vaultName) - ${{ parameters.secretName }}'

  - template: update-key-vault.yml
    parameters:
      condition: eq(variables['${{ parameters.name }}_Check.generateNew'], 'true')
      azureSubscription: ${{ parameters.azureSubscription }}
      vaultName: ${{ parameters.vaultName }}
      secretName: ${{ parameters.secretName }}
      secret: $(${{ parameters.name }}_SecretGen.secret)

  - template: cleanup-expired-secrets.yml
    parameters:
      azureSubscription: $(subscriptionServiceCore)
      clientId: $(aadApplicationId)
      keyIds: $(${{ parameters.name }}_Check.keysToDelete) 