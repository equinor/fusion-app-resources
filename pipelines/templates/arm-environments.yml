parameters:
  environment: ''
  clientId: ''
  clientIdDbOwner: ''
  sqlServer: ''
  clientSecretName: 'ClientSecret-Resources-Test'
  azureSubscription: 'FRA Automation Non-Prod'
  coreAzureSubscription: ''
  
steps:
  - checkout: self

  - task: AzurePowerShell@5
    displayName: 'Ensure environment resource group'
    inputs:
      azureSubscription: ${{ parameters.azureSubscription }}
      ScriptType: FilePath
      FailOnStandardError: true
      azurePowerShellVersion: 'LatestVersion'
      ScriptPath: infrastructure/scripts/ensure-resourcegroup.ps1
      ScriptArguments: -environment ${{ parameters.environment }}

 ## DATABASE SHOULD BE DEPLOYED BY API PIPELINE, NOT INFRA
 ## TODO - Move provisioning of db to api pipeline

  - task: AzurePowerShell@5
    displayName: 'Deploy sql database'
    inputs:
      azureSubscription: ${{ parameters.coreAzureSubscription }}
      ScriptType: FilePath
      FailOnStandardError: true
      azurePowerShellVersion: 'LatestVersion'
      ScriptPath: infrastructure/scripts/deploy-database.ps1
      ScriptArguments: -environment ${{ parameters.environment }} -sqlServerName ${{ parameters.sqlServer }}

  - task: AzurePowerShell@5
    displayName: 'Grant azure ad app sql database access (Resources-db)'
    inputs:
      azureSubscription: ${{ parameters.coreAzureSubscription }}
      ScriptType: FilePath
      FailOnStandardError: true
      azurePowerShellVersion: 'LatestVersion'
      ScriptPath: infrastructure/scripts/grant-adapp-sql-access.ps1
      ScriptArguments: -clientId ${{ parameters.clientId }} -sqlServerName ${{ parameters.sqlServer }} -sqlDatabaseName $(SqlDatabaseName)

  - task: AzurePowerShell@5
    displayName: 'Grant azure ad app sql database access (Resources-db)'
    inputs:
      azureSubscription: ${{ parameters.coreAzureSubscription }}
      ScriptType: FilePath
      FailOnStandardError: true
      azurePowerShellVersion: 'LatestVersion'
      ScriptPath: infrastructure/scripts/grant-adapp-sql-access.ps1
      ScriptArguments: -clientId ${{ parameters.clientIdDbOwner }} -sqlServerName ${{ parameters.sqlServer }} -sqlDatabaseName $(SqlDatabaseName)      

  - task: AzurePowerShell@5
    displayName: 'Grant azure ad app sql database access (Summary-db)'
    inputs:
      azureSubscription: ${{ parameters.coreAzureSubscription }}
      ScriptType: FilePath
      FailOnStandardError: true
      azurePowerShellVersion: 'LatestVersion'
      ScriptPath: infrastructure/scripts/grant-adapp-sql-access.ps1
      ScriptArguments: -clientId ${{ parameters.clientId }} -sqlServerName ${{ parameters.sqlServer }} -sqlDatabaseName $(SummarySqlDatabaseName)      

  - task: AzurePowerShell@5
    displayName: 'Grant azure ad app sql database access (Summary-db)'
    inputs:
      azureSubscription: ${{ parameters.coreAzureSubscription }}
      ScriptType: FilePath
      FailOnStandardError: true
      azurePowerShellVersion: 'LatestVersion'
      ScriptPath: infrastructure/scripts/grant-adapp-sql-access.ps1
      ScriptArguments: -clientId ${{ parameters.clientIdDbOwner }} -sqlServerName ${{ parameters.sqlServer }} -sqlDatabaseName $(SummarySqlDatabaseName)            

  - task: AzurePowerShell@5
    displayName: 'Deploy ARM template'
    inputs:
      azureSubscription: ${{ parameters.azureSubscription }}
      ScriptType: FilePath
      FailOnStandardError: true
      azurePowerShellVersion: 'LatestVersion'
      ScriptPath: infrastructure/scripts/deploy-resources.ps1
      ScriptArguments: -environment ${{ parameters.environment }}

  - task: AzurePowerShell@5
    displayName: 'Set default env keyvault permissions'
    inputs:
      azureSubscription: ${{ parameters.azureSubscription }}
      ScriptType: FilePath
      FailOnStandardError: true
      azurePowerShellVersion: 'LatestVersion'
      ScriptPath: infrastructure/scripts/set-default-keyvault-permissions.ps1
      ScriptArguments: -environment ${{ parameters.environment }} -apiAppRegistrationClientId ${{ parameters.clientId }}      
      
  