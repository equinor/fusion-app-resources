parameters:
  envName: ''
  clientId: ''
  appName: ''  
  fusionEnvironment: 'ci'
  fusionResource: '5a842df8-3238-415d-b168-9f16a6a6031b'
  templateFile: $(Build.SourcesDirectory)/src/backend/function/Fusion.Resources.Functions/Deployment/function.template.json
  disabledFunctionsFile: $(Build.SourcesDirectory)/src/backend/function/Fusion.Resources.Functions/Deployment/disabled-functions.json

steps:
- checkout: self
- task: AzurePowerShell@4
  displayName: 'Deploy Function ARM template'
  inputs:
    azureSubscription: 'PROJECT_PORTAL (63b791ae-b2bc-41a1-ac66-806c4e69bffe)'
    ScriptType: 'InlineScript'
    FailOnStandardError: true
    azurePowerShellVersion: 'LatestVersion'
    Inline: |
      $environment = "${{ parameters.envName }}"
      $fusionEnvironment = "${{ parameters.fusionEnvironment }}"
      $functionAppName = "${{ parameters.appName }}"
      $envVaultName = "kv-fap-resources-$environment"
      $envResourceGroup = Get-AzResourceGroup -Tag @{ "fusion-app-component" = "resources-rg-$environment" }
      $resourceEndpoint = "https://resources-api-$environment.fusion-dev.net"

      if ($envResourceGroup -eq $null) { throw "Cannot locate resource group for environment '$environment'" }

      $resourceGroup = $envResourceGroup.ResourceGroupName
      Write-Host "Using resource group $resourceGroup"

      function Get-SecretsId($secret) {
          $value = (Get-AzKeyVaultSecret -VaultName $envVaultName -Name $secret).Id
          if ($value -eq $null) { return "" } else { return $value }
      }

      #
      # Generate the app settings      
      #
      $settings = @{
          clientId = "${{ parameters.clientId }}"
          secretIds = @{
              clientSecret = Get-SecretsId -secret AzureAd--ClientSecret
              serviceBus = Get-SecretsId -secret Connectionstrings--ServiceBus
          }
          endpoints = @{
              org = "https://pro-s-org-$fusionEnvironment.azurewebsites.net"
              people = "https://pro-s-people-$fusionEnvironment.azurewebsites.net"
              resources = "https://resources-api.$environment.fusion-dev.net/"
              notifications = "https://pro-s-notification-$fusionEnvironment.azurewebsites.net"
              context = "https://pro-s-context-$fusionEnvironment.azurewebsites.net"
              portal = "https://pro-s-portal-$fusionEnvironment.azurewebsites.net"
          }
          resources = @{
              fusion = "${{ parameters.fusionResource }}"
          }
          queues = @{
              provisionPosition = "provision-position"
          }
      }

      if ($fusionEnvironment -eq "fprd") {
            $settings.endpoints.portal = "https://fusion.equinor.com"
      }
     
      New-AzResourceGroupDeployment -Mode Incremental -Name "resources-function" -ResourceGroupName $resourceGroup -TemplateFile  "${{ parameters.templateFile }}" `
          -env-name $environment `
          -appName $functionAppName `
          -settings $settings

      $functionApp = Get-AzWebApp -ResourceGroupName $resourceGroup -Name $functionAppName
      Set-AzKeyVaultAccessPolicy -VaultName $envVaultName -ResourceGroupName $resourceGroup -ObjectId $functionApp.Identity.PrincipalId -PermissionsToSecrets get
      
      ## Load disabled functions
      $disabledFunctionConfig = ConvertFrom-Json (Get-Content "${{ parameters.disabledFunctionsFile }}" -Raw)
      $disabledFunctions = $disabledFunctionConfig | where -Property environment -eq $environment | Select -expandproperty disabledFunctions

      Write-Host "Disabled functions"
      $disabledFunctions

      $settings = @{}
      ForEach ($kvp in $functionApp.SiteConfig.AppSettings) {
          $settings[$kvp.Name] = $kvp.Value
      }

      ## Mark functions as disabled
      $disabledFunctions | ForEach-Object { $settings["AzureWebJobs.$_.Disabled"] = "true" }
      
      ## Update web app settings for function app
      Set-AzWebApp -ResourceGroupName $resourceGroup -Name $functionAppName -AppSettings $settings

