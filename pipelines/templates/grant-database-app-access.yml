
parameters:    
  clientId: ''
  sqlEnvironment: 'test' ## || production
  sqlDatabaseName: ''
  azureSubscription: $(subscriptionService)

steps:
- task: AzurePowerShell@5
  displayName: 'Grant DB access to Azure ad application'
  inputs:
    azureSubscription: ${{ parameters.azureSubscription }}
    ScriptType: 'InlineScript'
    FailOnStandardError: true
    azurePowerShellVersion: 'LatestVersion'
    Inline: |
        $clientId = "${{ parameters.clientId }}"
        $sqlEnvironment = "${{ parameters.sqlEnvironment }}"
        $sqlDatabaseName = "${{ parameters.sqlDatabaseName }}"

        Import-Module SqlServer

        if ($sqlEnvironment -eq "production") 
        { 
            $sqlServerName = "fusion-prod-sqlserver"
            $sqlPasswordKeyVault = "fusion-env-prod-kv"
        }
        else 
        {
            $sqlServerName = "fusion-test-sqlserver"
            $sqlPasswordKeyVault = "fusion-env-test-kv"
        }

        function Get-SqlServer {
            $server = Get-AzResource -ResourceType "Microsoft.Sql/servers" -Name $sqlServerName
            if ($server.Length -gt 1) {
                Write-Host "Found multiple sql servers using name $serverName"
                $server | ForEach-Object { Write-Host $_.ResourceId }
                throw "Found multiple sql servers..."
            }
            $sqlServer = Get-AzSqlServer -ResourceGroupName $server.ResourceGroupName -ServerName $server.Name
            return $sqlServer
        }

        function ConvertTo-Sid {
            param (
                [string]$appId
            )
            [guid]$guid = [System.Guid]::Parse($appId)
            foreach ($byte in $guid.ToByteArray()) {
                $byteGuid += [System.String]::Format("{0:X2}", $byte)
            }
            return "0x" + $byteGuid
        }

        $sqlpasswordSecret = Get-AzKeyVaultSecret -VaultName $sqlPasswordKeyVault -Name fusion-sql-password -AsPlainText

        $sqlServer = Get-SqlServer 
        $sp = Get-AzADApplication -ApplicationId $clientId
        $SID = ConvertTo-Sid -appId $clientId
        $sql = "CREATE USER [$($sp.DisplayName)] WITH DEFAULT_SCHEMA=[dbo], SID = $SID, TYPE = E;ALTER ROLE db_owner ADD MEMBER [$($sp.DisplayName)];"


        Invoke-Sqlcmd -ServerInstance $sqlServer.FullyQualifiedDomainName `
                -Database $sqlDatabaseName `
                -Username $sqlServer.SqlAdministratorLogin `
                -Password $sqlpasswordSecret `
                -Query $sql `
                -ConnectionTimeout 120