parameters:
    azureSubscription: 'PROJECT_PORTAL (63b791ae-b2bc-41a1-ac66-806c4e69bffe)'
    sqlFile: ''
    artifact: 'drop'
  
steps:
#   - task: DownloadPipelineArtifact@2
#     displayName: 'Download sql artifact'
#     inputs:
#       buildType: 'current'
  
  - task: AzurePowerShell@4
    displayName: 'Execute sql migrations'
    inputs:
      azureSubscription: ${{ parameters.azureSubscription }}
      ScriptType: 'InlineScript'
      FailOnStandardError: true
      azurePowerShellVersion: 'LatestVersion'
      Inline: |
            $sqlFile = "$($env:PIPELINE_WORKSPACE)/${{ parameters.artifact }}/db-migration.sql"

            $overrideFileName = "${{ parameters.sqlFile }}"
            if (-not [string]::IsNullOrEmpty($overrideFileName)) {
                $sqlFile = $overrideFileName
            }
                        
            ## Use access token to access database - the service principal should be located in the sql server admin group.
            $context = [Microsoft.Azure.Commands.Common.Authentication.Abstractions.AzureRmProfileProvider]::Instance.Profile.DefaultContext
            $token = [Microsoft.Azure.Commands.Common.Authentication.AzureSession]::Instance.AuthenticationFactory.Authenticate($context.Account, $context.Environment, $context.Tenant.Id.ToString(), $null, [Microsoft.Azure.Commands.Common.Authentication.ShowDialog]::Never, $null, "https://database.windows.net/")
            
            $dbResource = Get-AzResource -TagName fusion-app-component-id -TagValue resources-api-db-ci | select -First 1 
            $db = Get-AzSqlDatabase -DatabaseName $dbResource.Name.Split("/")[1] -ResourceGroupName $dbResource.ResourceGroupName -ServerName $dbResource.Name.Split("/")[0]
            $sqlServer = Get-AzSqlServer -ServerName $db.ServerName -ResourceGroupName $db.ResourceGroupName

            $SqlConnection = new-object System.Data.SqlClient.SqlConnection
            $SqlConnection.ConnectionString = "Server=tcp:$($sqlServer.FullyQualifiedDomainName),1433;Initial Catalog=$($db.DatabaseName);Persist Security Info=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;" 
            $SqlConnection.AccessToken = $token.AccessToken
            
            $content = [IO.File]::ReadAllText($sqlFile)
            $batches = $content -split "GO"
            
            $SqlConnection.Open()
            foreach($batch in $batches)
            {
                if ($batch.Trim() -ne "") {
                    $SqlCmd = New-Object System.Data.SqlClient.SqlCommand
                    $SqlCmd.CommandText = $batch
                    $SqlCmd.Connection = $SqlConnection
                    $SqlCmd.ExecuteNonQuery()
                }
            }
            $SqlConnection.Close()
      
