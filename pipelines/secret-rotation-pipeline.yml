
trigger: none
pr: none

# schedules:
# - cron: 0 0 1,15 * *
#   displayName: Monthly key rotation
#   branches:
#     include:
#     - main
#   always: true


pool:
  vmImage: "ubuntu-latest"

variables:
  subscriptionService: 'PROJECT_PORTAL (63b791ae-b2bc-41a1-ac66-806c4e69bffe)'  

jobs:
  - job: EnsureSecretCI
    displayName: 'Generate secrets CI'
    variables:
      vaultName: 'kv-fap-resources-ci'
      aadApplicationId: '5a842df8-3238-415d-b168-9f16a6a6031b'
    steps:
    - task: AzurePowerShell@5    
      displayName: Update client secret CI
      
      inputs:
        azureSubscription: $(subscriptionService)
        ScriptType: FilePath
        FailOnStandardError: true
        azurePowerShellVersion: 'LatestVersion'
        ScriptPath: src/backend/infrastructure/generate-secret.ps1
        ScriptArguments: -applicationId $(aadApplicationId) -keyVaultName $(vaultName)

    - task: AzurePowerShell@5    
      displayName: Cleanup secrets
      
      inputs:
        azureSubscription: $(subscriptionService)
        ScriptType: FilePath
        FailOnStandardError: true
        azurePowerShellVersion: 'LatestVersion'
        ScriptPath: src/backend/infrastructure/cleanup-secret.ps1
        ScriptArguments: -applicationId $(aadApplicationId) -keyVaultName $(vaultName)        
        
  - job: EnsureSecretPR
    displayName: 'Generate secrets PR'
    variables:
      vaultName: 'kv-fap-resources-pr'
      aadApplicationId: '5a842df8-3238-415d-b168-9f16a6a6031b'
    steps:
    - task: AzurePowerShell@5    
      displayName: Update client secret
      
      inputs:
        azureSubscription: $(subscriptionService)
        ScriptType: FilePath
        FailOnStandardError: true
        azurePowerShellVersion: 'LatestVersion'
        ScriptPath: src/backend/infrastructure/generate-secret.ps1
        ScriptArguments: -applicationId $(aadApplicationId) -keyVaultName $(vaultName)

    - task: AzurePowerShell@5    
      displayName: Cleanup secrets
      
      inputs:
        azureSubscription: $(subscriptionService)
        ScriptType: FilePath
        FailOnStandardError: true
        azurePowerShellVersion: 'LatestVersion'
        ScriptPath: src/backend/infrastructure/cleanup-secrets.ps1
        ScriptArguments: -applicationId $(aadApplicationId) -keyVaultName $(vaultName)                


  - job: EnsureSecretQA
    dependsOn: EnsureSecretCI
    displayName: 'Generate secrets FQA'
    variables:
      vaultName: 'kv-fap-resources-fqa'
      aadApplicationId: '5a842df8-3238-415d-b168-9f16a6a6031b'
    steps:
    - task: AzurePowerShell@5    
      displayName: Update client secret
      
      inputs:
        azureSubscription: $(subscriptionService)
        ScriptType: FilePath
        FailOnStandardError: true
        azurePowerShellVersion: 'LatestVersion'
        ScriptPath: src/backend/infrastructure/generate-secrets.ps1
        ScriptArguments: -applicationId $(aadApplicationId) -keyVaultName $(vaultName)

    - task: AzurePowerShell@5    
      displayName: Cleanup secrets
      
      inputs:
        azureSubscription: $(subscriptionService)
        ScriptType: FilePath
        FailOnStandardError: true
        azurePowerShellVersion: 'LatestVersion'
        ScriptPath: src/backend/infrastructure/cleanup-secrets.ps1
        ScriptArguments: -applicationId $(aadApplicationId) -keyVaultName $(vaultName)       


  # - job: EnsureSecretFPRD
  #   dependsOn: EnsureSecretQA
  #   displayName: 'Generate secrets'
  #   variables:
  #     vaultName: 'kv-fap-resources-fprd'
  #     aadApplicationId: '97978493-9777-4d48-b38a-67b0b9cd88d2'
  #   steps:
  #   - task: AzurePowerShell@5    
  #     displayName: Update client secret
      
  #     inputs:
  #       azureSubscription: $(subscriptionService)
  #       ScriptType: FilePath
  #       FailOnStandardError: true
  #       azurePowerShellVersion: 'LatestVersion'
  #       ScriptPath: src/backend/infrastructure/generate-secret.ps1
  #       ScriptArguments: -applicationId $(aadApplicationId) -keyVaultName $(vaultName)

  #   - task: AzurePowerShell@5    
  #     displayName: Cleanup secrets
      
  #     inputs:
  #       azureSubscription: $(subscriptionService)
  #       ScriptType: FilePath
  #       FailOnStandardError: true
  #       azurePowerShellVersion: 'LatestVersion'
  #       ScriptPath: src/backend/infrastructure/cleanup-secrets.ps1
  #       ScriptArguments: -applicationId $(aadApplicationId) -keyVaultName $(vaultName)               
        
        