
trigger: none
pr: none

schedules:
- cron: 0 0 1,15 * *
  displayName: Monthly key rotation
  branches:
    include:
    - main
  always: true

##
# Pipeline is designed to be based on a secret in a key vault, one for each environment. 
# The pipeline will use the expiration attribute on the secret to hold the expiration date for the app credential.
# If the secret is within 60 days of expiration, a new will be created and added as a version (with 6 month expiration).
#
# The old key will still be valid until expiration, allowing apps to natually use the new key. 
# Over 60 days it is assumed that the app(s) will have rebooted at some point.
#
# The last step of the pipeline is a cleanup step, which will look through all versions of the key vault secret, and delete 
# the app credentials that are no longer valid, through the use of the keyId attribute, which is the id for the credential on the app reg.
#
# A restart step could be added to ensure apps are restarted.
#
# The pipeline will run twice a month to ensure it is running successfully.

pool:
  vmImage: "ubuntu-latest"

variables:
  subscriptionService: 'PROJECT_PORTAL (63b791ae-b2bc-41a1-ac66-806c4e69bffe)'  

stages:
  - stage: SecretsCI
    displayName: "Rotate keys CI"
    jobs: 
      - job: EnsureSecretCI
        displayName: 'Generate secrets CI'
        variables:
          vaultName: 'kv-fap-resources-ci'
          aadApplicationId: '5a842df8-3238-415d-b168-9f16a6a6031b'
        steps:
        - task: AzurePowerShell@5    
          displayName: Update client secret CI
          
          inputs:
            azureSubscription: $(subscriptionService)
            ScriptType: FilePath
            FailOnStandardError: true
            azurePowerShellVersion: 'LatestVersion'
            ScriptPath: src/backend/infrastructure/generate-secret.ps1
            ScriptArguments: -applicationId $(aadApplicationId) -keyVaultName $(vaultName)

        - task: AzurePowerShell@5    
          displayName: Cleanup secrets
          
          inputs:
            azureSubscription: $(subscriptionService)
            ScriptType: FilePath
            FailOnStandardError: true
            azurePowerShellVersion: 'LatestVersion'
            ScriptPath: src/backend/infrastructure/cleanup-secrets.ps1
            ScriptArguments: -applicationId $(aadApplicationId) -keyVaultName $(vaultName)        

  - stage: SecretsPR
    displayName: "Rotate keys PR"
    dependsOn: SecretsCI
    jobs:
      - job: EnsureSecretPR
        displayName: 'Generate secrets PR'
        variables:
          vaultName: 'kv-fap-resources-pr'
          aadApplicationId: '5a842df8-3238-415d-b168-9f16a6a6031b'
        steps:
        - task: AzurePowerShell@5    
          displayName: Update client secret
          
          inputs:
            azureSubscription: $(subscriptionService)
            ScriptType: FilePath
            FailOnStandardError: true
            azurePowerShellVersion: 'LatestVersion'
            ScriptPath: src/backend/infrastructure/generate-secret.ps1
            ScriptArguments: -applicationId $(aadApplicationId) -keyVaultName $(vaultName)

        - task: AzurePowerShell@5    
          displayName: Cleanup secrets
          
          inputs:
            azureSubscription: $(subscriptionService)
            ScriptType: FilePath
            FailOnStandardError: true
            azurePowerShellVersion: 'LatestVersion'
            ScriptPath: src/backend/infrastructure/cleanup-secrets.ps1
            ScriptArguments: -applicationId $(aadApplicationId) -keyVaultName $(vaultName)                

  - stage: SecretsQA
    displayName: "Rotate keys FQA"
    dependsOn: SecretsCI
    jobs:            
      - job: EnsureSecretQA
        displayName: 'Generate secrets FQA'
        variables:
          vaultName: 'kv-fap-resources-fqa'
          aadApplicationId: '5a842df8-3238-415d-b168-9f16a6a6031b'
        steps:
        - task: AzurePowerShell@5    
          displayName: Update client secret
          
          inputs:
            azureSubscription: $(subscriptionService)
            ScriptType: FilePath
            FailOnStandardError: true
            azurePowerShellVersion: 'LatestVersion'
            ScriptPath: src/backend/infrastructure/generate-secret.ps1
            ScriptArguments: -applicationId $(aadApplicationId) -keyVaultName $(vaultName)

        - task: AzurePowerShell@5    
          displayName: Cleanup secrets
          
          inputs:
            azureSubscription: $(subscriptionService)
            ScriptType: FilePath
            FailOnStandardError: true
            azurePowerShellVersion: 'LatestVersion'
            ScriptPath: src/backend/infrastructure/cleanup-secrets.ps1
            ScriptArguments: -applicationId $(aadApplicationId) -keyVaultName $(vaultName)       


  - stage: SecretsQA
    displayName: "Rotate keys FPRD"
    dependsOn: SecretsQA
    jobs:                
      - job: EnsureSecretFPRD
        displayName: 'Generate secrets FPRD'
        variables:
          vaultName: 'kv-fap-resources-fprd'
          aadApplicationId: '97978493-9777-4d48-b38a-67b0b9cd88d2'
        steps:
        - task: AzurePowerShell@5    
          displayName: Update client secret
          
          inputs:
            azureSubscription: $(subscriptionService)
            ScriptType: FilePath
            FailOnStandardError: true
            azurePowerShellVersion: 'LatestVersion'
            ScriptPath: src/backend/infrastructure/generate-secret.ps1
            ScriptArguments: -applicationId $(aadApplicationId) -keyVaultName $(vaultName)

        - task: AzurePowerShell@5    
          displayName: Cleanup secrets
          
          inputs:
            azureSubscription: $(subscriptionService)
            ScriptType: FilePath
            FailOnStandardError: true
            azurePowerShellVersion: 'LatestVersion'
            ScriptPath: src/backend/infrastructure/cleanup-secrets.ps1
            ScriptArguments: -applicationId $(aadApplicationId) -keyVaultName $(vaultName)
        
        