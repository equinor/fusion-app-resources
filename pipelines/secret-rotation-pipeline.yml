
trigger: none
pr: none

schedules:
- cron: 0 0 1,15 * *
  displayName: Monthly key rotation
  branches:
    include:
    - master
  always: true

##
# Pipeline is designed to be based on a secret in a key vault, one for each environment. 
# The pipeline will use the expiration attribute on the secret to hold the expiration date for the app credential.
# If the secret is within 60 days of expiration, a new will be created and added as a version (with 6 month expiration).
#
# The old key will still be valid until expiration, allowing apps to natually use the new key. 
# Over 60 days it is assumed that the app(s) will have rebooted at some point.
#
# The last step of the pipeline is a cleanup step, which will look through all versions of the key vault secret, and delete 
# the app credentials that are no longer valid, through the use of the keyId attribute, which is the id for the credential on the app reg.
#
# A restart step could be added to ensure apps are restarted.
#
# The pipeline will run twice a month to ensure it is running successfully.

pool:
  vmImage: "windows-latest"

variables:
  subscriptionServiceCore: 'PROJECT_PORTAL (63b791ae-b2bc-41a1-ac66-806c4e69bffe)'
  subscriptionServiceNonProd: 'FRA Automation Non-Prod'
  subscriptionServiceProd: 'FRA Automation Prod'

stages:
  - stage: SecretsCI
    displayName: "Rotate keys CI"
    jobs: 
      - job: EnsureSecretCI
        displayName: 'Generate secrets CI'
        variables:
          vaultName: 'kv-fap-resources-ci'
          aadApplicationId: '5a842df8-3238-415d-b168-9f16a6a6031b'
        steps:
        - template: templates/secret-rotation/check-for-expiration.yml
          parameters:
            azureSubscription: $(subscriptionServiceNonProd)
            vaultName: $(vaultName)
            name: checkResourcesClientSecret
            secretName: 'AzureAd--ClientSecret'

        - template: templates/secret-rotation/generate-secret.yml
          parameters:
            condition: eq(variables['checkResourcesClientSecret.generateNew'], 'true')
            azureSubscription: $(subscriptionServiceCore)
            name: resourceApi
            clientId: $(aadApplicationId)
            secretDescription: 'FRA - $(vaultName) - ClientSecret'

        - template: templates/secret-rotation/update-key-vault.yml
          parameters:
            condition: eq(variables['checkResourcesClientSecret.generateNew'], 'true')
            azureSubscription: $(subscriptionServiceNonProd)
            vaultName: $(vaultName)
            secretName: 'AzureAd--ClientSecret-Test'
            secret: $(resourceApi.secret)



        # - task: AzurePowerShell@5    
        #   displayName: Update client secret CI
          
        #   inputs:
        #     azureSubscription: $(subscriptionServiceNonProd)
        #     ScriptType: FilePath
        #     FailOnStandardError: true
        #     azurePowerShellVersion: 'OtherVersion'
        #     preferredAzurePowerShellVersion: '7.2.0'
        #     ScriptPath: src/backend/infrastructure/generate-secret.ps1
        #     ScriptArguments: -applicationId $(aadApplicationId) -keyVaultName $(vaultName)

        # - task: AzurePowerShell@5    
        #   displayName: Cleanup secrets
          
        #   inputs:
        #     azureSubscription: $(subscriptionServiceNonProd)
        #     ScriptType: FilePath
        #     FailOnStandardError: true
        #     azurePowerShellVersion: 'LatestVersion'
        #     ScriptPath: src/backend/infrastructure/cleanup-secrets.ps1
        #     ScriptArguments: -applicationId $(aadApplicationId) -keyVaultName $(vaultName)        

  # - stage: SecretsPR
  #   displayName: "Rotate keys PR"
  #   jobs:
  #     - job: EnsureSecretPR
  #       displayName: 'Generate secrets PR'
  #       variables:
  #         vaultName: 'kv-fap-resources-pr'
  #         aadApplicationId: '5a842df8-3238-415d-b168-9f16a6a6031b'
  #       steps:
  #       - task: AzurePowerShell@5
  #         displayName: Update client secret
          
  #         inputs:
  #           azureSubscription: $(subscriptionService)
  #           ScriptType: FilePath
  #           FailOnStandardError: true
  #           azurePowerShellVersion: 'OtherVersion'
  #           preferredAzurePowerShellVersion: '7.2.0'
  #           ScriptPath: src/backend/infrastructure/generate-secret.ps1
  #           ScriptArguments: -applicationId $(aadApplicationId) -keyVaultName $(vaultName)

  #       - task: AzurePowerShell@5    
  #         displayName: Cleanup secrets
          
  #         inputs:
  #           azureSubscription: $(subscriptionService)
  #           ScriptType: FilePath
  #           FailOnStandardError: true
  #           azurePowerShellVersion: 'LatestVersion'
  #           ScriptPath: src/backend/infrastructure/cleanup-secrets.ps1
  #           ScriptArguments: -applicationId $(aadApplicationId) -keyVaultName $(vaultName)                

  # - stage: SecretsQA
  #   displayName: "Rotate keys FQA"
  #   dependsOn: SecretsCI
  #   jobs:            
  #     - job: EnsureSecretQA
  #       displayName: 'Generate secrets FQA'
  #       variables:
  #         vaultName: 'kv-fap-resources-fqa'
  #         aadApplicationId: '5a842df8-3238-415d-b168-9f16a6a6031b'
  #       steps:
  #       - task: AzurePowerShell@5    
  #         displayName: Update client secret
          
  #         inputs:
  #           azureSubscription: $(subscriptionService)
  #           ScriptType: FilePath
  #           FailOnStandardError: true
  #           azurePowerShellVersion: 'OtherVersion'
  #           preferredAzurePowerShellVersion: '7.2.0'
  #           ScriptPath: src/backend/infrastructure/generate-secret.ps1
  #           ScriptArguments: -applicationId $(aadApplicationId) -keyVaultName $(vaultName)

  #       - task: AzurePowerShell@5    
  #         displayName: Cleanup secrets
          
  #         inputs:
  #           azureSubscription: $(subscriptionService)
  #           ScriptType: FilePath
  #           FailOnStandardError: true
  #           azurePowerShellVersion: 'LatestVersion'
  #           ScriptPath: src/backend/infrastructure/cleanup-secrets.ps1
  #           ScriptArguments: -applicationId $(aadApplicationId) -keyVaultName $(vaultName)       

  # - stage: SecretsTR
  #   displayName: "Rotate keys TR"
  #   dependsOn: SecretsCI
  #   jobs:            
  #     - job: EnsureSecretTR
  #       displayName: 'Generate secrets TR'
  #       variables:
  #         vaultName: 'kv-fap-resources-tr'
  #         aadApplicationId: '5a842df8-3238-415d-b168-9f16a6a6031b'
  #       steps:
  #       - task: AzurePowerShell@5    
  #         displayName: Update client secret
          
  #         inputs:
  #           azureSubscription: $(subscriptionService)
  #           ScriptType: FilePath
  #           FailOnStandardError: true
  #           azurePowerShellVersion: 'OtherVersion'
  #           preferredAzurePowerShellVersion: '7.2.0'
  #           ScriptPath: src/backend/infrastructure/generate-secret.ps1
  #           ScriptArguments: -applicationId $(aadApplicationId) -keyVaultName $(vaultName)

  #       - task: AzurePowerShell@5    
  #         displayName: Cleanup secrets
          
  #         inputs:
  #           azureSubscription: $(subscriptionService)
  #           ScriptType: FilePath
  #           FailOnStandardError: true
  #           azurePowerShellVersion: 'LatestVersion'
  #           ScriptPath: src/backend/infrastructure/cleanup-secrets.ps1
  #           ScriptArguments: -applicationId $(aadApplicationId) -keyVaultName $(vaultName)       

  # - stage: SecretsFPRD
  #   displayName: "Rotate keys FPRD"
  #   dependsOn: SecretsQA
  #   jobs:                
  #     - job: EnsureSecretFPRD
  #       displayName: 'Generate secrets FPRD'
  #       variables:
  #         vaultName: 'kv-fap-resources-fprd'
  #         aadApplicationId: '97978493-9777-4d48-b38a-67b0b9cd88d2'
  #       steps:
  #       - task: AzurePowerShell@5    
  #         displayName: Update client secret
          
  #         inputs:
  #           azureSubscription: $(subscriptionService)
  #           ScriptType: FilePath
  #           FailOnStandardError: true
  #           azurePowerShellVersion: 'OtherVersion'
  #           preferredAzurePowerShellVersion: '7.2.0'
  #           ScriptPath: src/backend/infrastructure/generate-secret.ps1
  #           ScriptArguments: -applicationId $(aadApplicationId) -keyVaultName $(vaultName)

  #       - task: AzurePowerShell@5    
  #         displayName: Cleanup secrets
          
  #         inputs:
  #           azureSubscription: $(subscriptionService)
  #           ScriptType: FilePath
  #           FailOnStandardError: true
  #           azurePowerShellVersion: 'LatestVersion'
  #           ScriptPath: src/backend/infrastructure/cleanup-secrets.ps1
  #           ScriptArguments: -applicationId $(aadApplicationId) -keyVaultName $(vaultName)
        
        
