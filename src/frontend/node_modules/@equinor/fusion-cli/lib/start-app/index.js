"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
const react_dom_1 = require("@hot-loader/react-dom");
const react_1 = require("react");
const react_router_dom_1 = require("react-router-dom");
const fusion_1 = require("@equinor/fusion");
const fusion_components_1 = require("@equinor/fusion-components");
const HotAppWrapper_1 = require("./HotAppWrapper");
const serviceResolver = {
    getContextBaseUrl: () => 'https://pro-s-context-ci.azurewebsites.net',
    getDataProxyBaseUrl: () => 'https://pro-s-dataproxy-ci.azurewebsites.net',
    getFusionBaseUrl: () => 'https://pro-s-portal-ci.azurewebsites.net',
    getMeetingsBaseUrl: () => 'https://pro-s-meeting-v2-ci.azurewebsites.net',
    getOrgBaseUrl: () => 'https://pro-s-org-ci.azurewebsites.net',
    getPowerBiBaseUrl: () => 'https://pro-s-powerbi-ci.azurewebsites.net',
    getProjectsBaseUrl: () => 'https://pro-s-projects-ci.azurewebsites.net',
    getTasksBaseUrl: () => 'https://pro-s-tasks-ci.azurewebsites.net',
    getPeopleBaseUrl: () => 'https://pro-s-people-ci.azurewebsites.net',
    getReportsBaseUrl: () => 'https://pro-s-reports-ci.azurewebsites.net',
    getPowerBiApiBaseUrl: () => 'https://api.powerbi.com/v1.0/myorg',
    getNotificationBaseUrl: () => 'https://pro-s-notification-ci.azurewebsites.net',
    getInfoUrl: () => 'https://pro-s-info-app-ci.azurewebsites.net',
    getFusionTasksBaseUrl: () => 'https://pro-s-tasks-ci.azurewebsites.net',
    getBookmarksBaseUrl: () => 'https://pro-s-bookmarks-ci.azurewebsites.net',
};
const start = async () => {
    const authContainer = new fusion_1.AuthContainer();
    await authContainer.handleWindowCallbackAsync();
    const coreAppClientId = '5a842df8-3238-415d-b168-9f16a6a6031b';
    const coreAppRegistered = await authContainer.registerAppAsync(coreAppClientId, [
        serviceResolver.getContextBaseUrl(),
        serviceResolver.getDataProxyBaseUrl(),
        serviceResolver.getFusionBaseUrl(),
        serviceResolver.getMeetingsBaseUrl(),
        serviceResolver.getOrgBaseUrl(),
        serviceResolver.getPowerBiBaseUrl(),
        serviceResolver.getProjectsBaseUrl(),
        serviceResolver.getTasksBaseUrl(),
        serviceResolver.getPeopleBaseUrl(),
        serviceResolver.getReportsBaseUrl(),
        serviceResolver.getPowerBiApiBaseUrl(),
        serviceResolver.getNotificationBaseUrl(),
        serviceResolver.getBookmarksBaseUrl(),
    ]);
    const HeaderContextSelector = ({ app }) => {
        var _a;
        return ((_a = app === null || app === void 0 ? void 0 : app.context) === null || _a === void 0 ? void 0 : _a.types.length) ? jsx_runtime_1.jsx(fusion_components_1.ContextSelector, {}, void 0) : null;
    };
    if (!coreAppRegistered) {
        await authContainer.loginAsync(coreAppClientId);
    }
    else {
        const Root = () => {
            const root = react_1.useRef(document.createElement('div'));
            const overlay = react_1.useRef(document.createElement('div'));
            const headerContent = react_1.useRef(null);
            const headerAppAside = react_1.useRef(null);
            const fusionContext = fusion_1.createFusionContext(authContainer, serviceResolver, {
                headerAppAside,
                headerContent,
                overlay,
                root,
            }, {
                environment: {
                    env: 'dev',
                },
                loadBundlesFromDisk: false,
            });
            return (jsx_runtime_1.jsx(react_router_dom_1.Router, Object.assign({ history: fusionContext.history }, { children: jsx_runtime_1.jsx(fusion_1.FusionContext.Provider, Object.assign({ value: fusionContext }, { children: jsx_runtime_1.jsxs(fusion_components_1.FusionRoot, Object.assign({ rootRef: root, overlayRef: overlay }, { children: [jsx_runtime_1.jsx(fusion_components_1.FusionHeader, { aside: null, content: HeaderContextSelector, start: null, settings: null }, void 0),
                            jsx_runtime_1.jsx(fusion_components_1.FusionContent, { children: jsx_runtime_1.jsx(HotAppWrapper_1.default, {}, void 0) }, void 0)] }), void 0) }), void 0) }), void 0));
        };
        react_dom_1.render(jsx_runtime_1.jsx(Root, {}, void 0), document.getElementById('fusion-app'));
    }
};
start()
    .then(() => console.log('App started'))
    .catch((e) => console.error('Unable to start app', e));
//# sourceMappingURL=index.js.map