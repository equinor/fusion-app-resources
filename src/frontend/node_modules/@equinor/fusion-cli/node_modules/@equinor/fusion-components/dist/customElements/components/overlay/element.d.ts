import { LitElement, PropertyValues, TemplateResult } from '../base';
/** required elements */
import './placeholder';
/** @TODO */
import { AnchorRect, OverlayAnchor, OverlayAnchorConnectEvent } from './anchor';
import { OverlayEventType, OverlayEventDetail, OverlayEvent } from './events';
export declare type OverLayScope = Record<string, string[]>;
export interface OverlayElementProps {
    scope?: OverLayScope;
    active?: boolean;
    fixed?: boolean;
    selected?: string;
}
export declare class OverlayElement extends LitElement implements OverlayElementProps {
    static styles: import("lit-element/lib/css-tag").CSSResult[];
    scope: OverLayScope;
    active?: boolean;
    fixed?: boolean;
    selected?: string;
    anchors: Record<string, OverlayAnchor>;
    get scopedAnchors(): OverlayAnchor[];
    get selectedAnchor(): OverlayAnchor;
    /**
     * Listen for anchor connect requests
     * Listen for resize for adjusting anchor bounds
     */
    connectedCallback(): void;
    disconnectedCallback(): void;
    render(): TemplateResult;
    renderPlaceholder(anchor: {
        id: string;
        rect: AnchorRect;
    }): TemplateResult;
    updated(props: PropertyValues): void;
    protected _dispatchEvent<T extends OverlayEventType>(type: T, init?: CustomEventInit<OverlayEventDetail>): OverlayEvent<T>;
    protected _updateAnchorBounds: () => void;
    protected _handleAnchorConnect({ detail }: OverlayAnchorConnectEvent): void;
    protected _handlePlaceholderClick(e: Event): void;
}
export default OverlayElement;
