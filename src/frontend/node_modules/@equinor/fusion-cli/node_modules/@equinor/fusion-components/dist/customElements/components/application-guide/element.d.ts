import { LitElement, PropertyValues } from '../base';
import { OverlayEvent, OverlayElement } from '../overlay';
import { QuickFactEvent, QuickFactEventType } from '../quick-fact';
import { ApplicationGuideEvent, ApplicationGuideEventType, ApplicationGuideEventDetail } from './events';
export interface ApplicationGuideElementProps {
    active?: boolean;
}
/**
 * Element that contains overlays and displays quick fact box
 */
export declare class ApplicationGuideElement extends LitElement implements ApplicationGuideElementProps {
    static styles: import("lit-element/lib/css-tag").CSSResult[];
    /**
     * if active the overlays are activated
     */
    active: boolean;
    /**
     * selected anchor from overlay
     */
    selected?: {
        scope: string;
        anchor: string;
    };
    /**
     * Placeholder for popover (info box)
     */
    popover: HTMLDivElement;
    /**
     * Collection of connected overlays
     */
    protected _overlays: OverlayElement[];
    /**
     * Drag start position
     * dY and dX = position of drag start (pointer position)
     * eY and eX = position of element on drag start
     */
    protected _dragStart: {
        dY: number;
        dX: number;
        eY: number;
        eX: number;
    };
    constructor();
    /**
     * When connected to DOM start observing window for overlay events (connect and disconnect)
     * Observe selection changed for registered overlays when connected
     */
    connectedCallback(): void;
    /**
     * Stop observing connection, disconnections and selection changes of overlays
     */
    disconnectedCallback(): void;
    /**
     * Toggle active status of element
     */
    toggle(): void;
    /**
     * Adds an overlay to the component.
     * Observes provided overlays changes to selection
     */
    addOverlay(el: OverlayElement): void;
    /**
     * Remove overlay from component
     */
    removeOverlay(overlay: OverlayElement): void;
    /**
     * Change selected item for component
     * Clear selection for all other connected overlays
     */
    setSelected(overlay: OverlayElement, item: {
        scope: string;
        anchor: string;
    }): void;
    handleOverlayEvent(evt: OverlayEvent<any>): void;
    render(): import("lit-html/lib/template-result").TemplateResult;
    renderQuickFact(): "" | import("lit-html/lib/template-result").TemplateResult;
    protected updated(props: PropertyValues): void;
    protected _dispatchEvent(type: ApplicationGuideEventType, init?: CustomEventInit<ApplicationGuideEventDetail>): ApplicationGuideEvent<ApplicationGuideEventType>;
    protected _handleQuickFactShow(e: QuickFactEvent<QuickFactEventType.show>): void;
    protected _handleDragStart(e: DragEvent): void;
    protected _handleDragEnd(e: DragEvent): void;
}
export default ApplicationGuideElement;
