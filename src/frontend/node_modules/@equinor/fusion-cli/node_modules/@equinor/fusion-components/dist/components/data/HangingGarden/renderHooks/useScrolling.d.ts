import { RefObject, MutableRefObject, UIEvent } from 'react';
import { HangingGardenColumn, HangingGardenColumnIndex } from '../models/HangingGarden';
export declare type Scroll<T extends HangingGardenColumnIndex> = {
    isScrolling: MutableRefObject<boolean>;
    scrollLeft: MutableRefObject<number>;
    scrollTop: MutableRefObject<number>;
    onScroll: (e: UIEvent<HTMLDivElement>, renderGarden: () => void) => void;
    scrollToHighlightedColumn: (columns: HangingGardenColumn<T>[], highlightedColumnKey: string, itemWidth: number) => boolean;
    scrollToHighlightedItem: (columns: HangingGardenColumn<T>[], highlightedItem: T, itemWidth: number) => boolean;
};
/**
 * Handles scrolling off the garden canvas. Also handles scroll to functionality.
 * Scrolling to highlighted Item and Header.
 *
 * This hook is used by the Garden and is not intended to be used or implemented
 * outside the Garden component.
 */
declare const useScrolling: <T extends HangingGardenColumnIndex>(canvas: RefObject<HTMLCanvasElement> | null, container: RefObject<HTMLDivElement> | null, itemKeyProp: keyof T) => Scroll<T>;
export default useScrolling;
