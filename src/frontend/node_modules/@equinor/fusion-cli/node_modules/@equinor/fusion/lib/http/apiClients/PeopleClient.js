import BaseApiClient from './BaseApiClient';
import { voidResponseParser } from '../HttpClient';
export default class PeopleClient extends BaseApiClient {
    async apiSignInAsync() {
        await this.httpClient.postAsync(this.resourceCollections.people.apiSignin(), { credentials: 'include' }, undefined, voidResponseParser);
    }
    getBaseUrl() {
        return this.serviceResolver.getPeopleBaseUrl();
    }
    async getPersonDetailsAsync(id, oDataExpand) {
        const url = this.resourceCollections.people.getPersonDetails(id, oDataExpand);
        return await this.httpClient.getAsync(url, {
            headers: { 'api-version': '3.0' },
        });
    }
    async getRoleDefinitionsAsync() {
        const url = this.resourceCollections.people.roleDefinitions();
        return await this.httpClient.getAsync(url);
    }
    async getGroupRoleMappingsAsync() {
        const url = this.resourceCollections.people.groupRoleMappings();
        return await this.httpClient.getAsync(url);
    }
    async searchPersons(query) {
        const url = this.resourceCollections.people.searchPersons(query);
        return await this.httpClient.getAsync(url, {
            headers: { 'api-version': '2.0' },
        });
    }
    async setRoleStatusForCurrentUser(roleName, active) {
        const url = this.resourceCollections.people.roleStatusCurrentUser(roleName);
        return await this.httpClient.patchAsync(url, {
            isActive: active,
        });
    }
    async setRoleStatusForUser(userId, roleName, active) {
        const url = this.resourceCollections.people.roleStatus(userId, roleName);
        return await this.httpClient.patchAsync(url, {
            isActive: active,
        });
    }
    async getPresenceAsync(userId) {
        const url = this.resourceCollections.people.personPresence(userId);
        return await this.httpClient.getAsync(url, {
            headers: { 'api-version': '1.0' },
        });
    }
}
