import BaseResourceCollection from './BaseResourceCollection';
import { combineUrls } from '../../utils/url';
export default class OrgResourceCollection extends BaseResourceCollection {
    getBaseUrl() {
        return combineUrls(this.serviceResolver.getOrgBaseUrl());
    }
    projects() {
        return combineUrls(this.getBaseUrl(), 'projects');
    }
    project(projectId) {
        return combineUrls(this.getBaseUrl(), 'projects', projectId);
    }
    projectQuery(query) {
        return combineUrls(this.getBaseUrl(), `projects?$search=${query}`);
    }
    positions(projectId, expandProperties) {
        const url = combineUrls(this.getBaseUrl(), 'projects', projectId, 'positions');
        if (!expandProperties || !expandProperties.length) {
            return url;
        }
        const query = `?$expand=${expandProperties.join(',')}`;
        return `${url}${query}`;
    }
    position(projectId, positionId, expand = true) {
        const url = combineUrls(this.positions(projectId), positionId);
        if (!expand) {
            return url;
        }
        const query = `?$expand=taskOwners.instances, reportsTo.instances, parentPosition, project, contract`;
        return `${url}${query}`;
    }
    instances(projectId, positionId, expandProperties) {
        const url = combineUrls(this.position(projectId, positionId, false), 'instances');
        if (!expandProperties || !expandProperties.length) {
            return url;
        }
        const query = `?$expand=${expandProperties.join(',')}`;
        return `${url}${query}`;
    }
    instance(projectId, positionId, instanceId) {
        return combineUrls(this.instances(projectId, positionId), instanceId);
    }
    positionsDraft(projectId, draftId) {
        return combineUrls(this.project(projectId), 'drafts', draftId, 'positions');
    }
    positionDraft(projectId, positionId, draftId) {
        return combineUrls(this.positionsDraft(projectId, draftId), positionId);
    }
    publish(projectId, draftId) {
        return combineUrls(this.project(projectId), 'drafts', draftId, 'publish');
    }
    publishStatus(draftId) {
        return combineUrls(this.getBaseUrl(), 'drafts', draftId, 'publish');
    }
    deleteDraft(projectId, draftId) {
        return combineUrls(this.project(projectId), 'drafts', draftId);
    }
    roleDescriptionV2(projectId, positionId) {
        return combineUrls(this.position(projectId, positionId, false), 'role-description');
    }
    personalTaskDescription(projectId, azureUniqueId) {
        return combineUrls(this.getBaseUrl(), 'persons', azureUniqueId, 'role-descriptions', 'projects', projectId, 'content');
    }
    roleDescription(projectId, positionId) {
        return combineUrls(this.position(projectId, positionId, false), 'roleDescription', 'content');
    }
    basePositions() {
        return combineUrls(this.getBaseUrl(), 'positions', 'basepositions');
    }
    basePositionRoleDescription(basePositionId) {
        return combineUrls(this.getBaseUrl(), 'positions', 'basepositions', basePositionId, 'roleDescription', 'content');
    }
    reportsTo(projectId, positionId, instanceId) {
        return combineUrls(this.position(projectId, positionId, false), 'instances', instanceId, 'reports-to');
    }
    disciplineNetwork(projectId, discipline) {
        const url = combineUrls(this.project(projectId), 'positions', 'networks');
        const query = `?discipline=${discipline}`;
        return `${url}${query}`;
    }
    getContractsUrl(projectId) {
        return combineUrls(this.getBaseUrl(), 'projects', projectId, 'contracts');
    }
    getContractPositionsUrl(projectId, contractId) {
        return combineUrls(this.getContractsUrl(projectId), contractId, 'positions');
    }
    contractPosition(projectId, contractId, positionId) {
        return combineUrls(this.getContractPositionsUrl(projectId, contractId), positionId);
    }
    projectImage(projectId) {
        return combineUrls(this.project(projectId), 'image');
    }
    snapshots(projectId) {
        return combineUrls(this.project(projectId), 'snapshots');
    }
    transientSnapshots(projectId) {
        return combineUrls(this.snapshots(projectId), 'transient');
    }
    snapshot(projectId, snapshotId) {
        return combineUrls(this.snapshots(projectId), snapshotId);
    }
    approveSnapshot(projectId, snapshotId) {
        return combineUrls(this.snapshot(projectId, snapshotId), 'approve');
    }
    snapshotBase(snapshotId) {
        return combineUrls(this.getBaseUrl(), 'snapshots', snapshotId);
    }
    snapshotProject(snapshotId) {
        return combineUrls(this.snapshotBase(snapshotId), 'project');
    }
    snapshotPositions(snapshotId, expandProperties) {
        const url = combineUrls(this.snapshotBase(snapshotId), 'positions');
        if (!expandProperties || !expandProperties.length) {
            return url;
        }
        const expand = `?$expand=${expandProperties.join(',')}`;
        return `${url}${expand}`;
    }
    snapshotPosition(snapshotId, positionId) {
        return combineUrls(this.snapshotPositions(snapshotId), positionId);
    }
    snapshotRoleDescription(snapshotId, positionId) {
        return combineUrls(this.snapshotPosition(snapshotId, positionId), 'role-description');
    }
    snapshotReportsTo(snapshotId, positionId, instanceId) {
        return combineUrls(this.snapshotPosition(snapshotId, positionId), 'instances', instanceId, 'reports-to');
    }
}
