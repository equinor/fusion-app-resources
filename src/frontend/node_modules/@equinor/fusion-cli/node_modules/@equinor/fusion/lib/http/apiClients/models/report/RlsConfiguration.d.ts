declare type BasePositionCondition = {
    id: string;
    name: string | null;
};
declare type UserTypes = 'Unknown' | 'PermanentEmployee' | 'ExtHire' | 'Consultant' | 'External';
declare type ConditionsMatch = 'Unknown' | 'All' | 'Any';
declare type RoleMemberShipType = 'Unknown' | 'Department' | 'AdGroup' | 'DomainMembership' | 'Account';
declare type AccessITRole = {
    id: string;
    name: string | null;
    url: string | null;
};
declare type WorkspaceRole = {
    requireMembership: boolean;
    level: string | null;
};
declare type Conditions = {
    role: string | null;
    obs: string | null;
    pmt: boolean | null;
    basePositions: BasePositionCondition[] | null;
    disciplines: string[] | null;
    userTypes: UserTypes[] | null;
};
declare type ProjectMembershipConfig = {
    match: ConditionsMatch;
    conditions: Conditions[];
};
declare type RlsAdGroupMapping = {
    groupId: string;
    groupName: string | null;
    identityName: string | null;
};
declare type RlsIdentityConfiguration = {
    mappingType: string;
    notFoundMode: string | null;
    delimiter: string | null;
    nameSelector: string | null;
    adGroupMapping?: RlsAdGroupMapping | null;
    projectMembershipConfig?: ProjectMembershipConfig | null;
};
declare type RlsGlobalAccessRequirement = {
    accessIT: AccessITRole | null;
    workspace: WorkspaceRole | null;
};
declare type RlsAdGroup = {
    id: string;
    name: string | null;
};
declare type RlsRoleDomainMembershipConfig = {
    requiredPositionObs: string[] | null;
};
declare type RlsRoleMembershipRequirement = {
    type: RoleMemberShipType;
    identifiers: string[] | null;
    userTypes: UserTypes[] | null;
    allowExternals: boolean;
    adGroups?: RlsAdGroup[] | null;
    domaingConfig?: RlsRoleDomainMembershipConfig | null;
};
declare type RlsRoles = {
    name: string | null;
    descriptions: string | null;
    pbiName: string | null;
    isAdminRole: boolean;
    membership: RlsRoleMembershipRequirement[];
};
declare type RlsConfiguration = {
    version: number;
    globalAccessRequirement: RlsGlobalAccessRequirement;
    identity: RlsIdentityConfiguration;
    roles: RlsRoles[];
};
export default RlsConfiguration;
