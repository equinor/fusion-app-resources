import EventEmitter from './EventEmitter';
class DistributedState extends EventEmitter {
    constructor(key, state, eventHub) {
        super();
        this.handleUpdatedState = (state) => {
            this._state = state;
            this.emit('change', this._state);
        };
        this.handleNewInstance = () => {
            this._eventHub.publish(this._key, this._state);
        };
        this._key = key;
        this._state = state;
        this._eventHub = eventHub;
        eventHub.registerListener(key, this.handleUpdatedState);
        eventHub.publish(key + 'InitialState', void null);
        eventHub.registerListener(key + 'InitialState', this.handleNewInstance);
    }
    get state() {
        return this._state;
    }
    set state(state) {
        this._state = state;
        this._eventHub.publish(this._key, state);
    }
}
export default DistributedState;
