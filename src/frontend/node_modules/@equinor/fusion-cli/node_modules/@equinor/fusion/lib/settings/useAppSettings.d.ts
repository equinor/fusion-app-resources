declare type SetAppSetting = <T>(key: string, value: T) => void;
declare type AppSettingsHook<T> = [T, SetAppSetting];
export declare const useSettingSelector: <T extends Readonly<import("./SettingsContainer").Settings>, K extends unknown>(selector: (state: T) => K | null, state: T) => K | null;
/**
 * The useAppSettings will create and store app setting for different apps. The settings
 * will also be stored backend for redundancy
 * @param defaultSettings Provide default settings
 * @returns A state and a state setter, use these to get and update app settings.
 * @example
 * type ExampleSetting = { isExample: boolean };
 *
 * const defaultExampleSetting: ExampleSetting = { isExample: false };
 *
 * const [appSettings, setAppSettings] = useAppSettings<ExampleSetting>(defaultExampleSetting);
 *
 * const setOrgFilterSettings = (exampleSettings: ExampleSetting) => {
 *   setAppSettings('isExample', exampleSettings);
 * };
 */
declare const useAppSettings: <T extends Readonly<import("./SettingsContainer").Settings>>(defaultSettings?: T | undefined) => AppSettingsHook<Readonly<T>>;
/**
 * The useContextSettingsSelector will create app settings for every context.
 * @param context Use a custom context string, otherwise the fusion context id will be used
 * @param defaultSettings Provide default settings
 * @returns A state and a state setter, use these to get app settings for the context and update app settings.
 * @example type ExampleSetting = { isExample: boolean }
 *
 *  const defaultExampleSetting: ExampleSetting = { isExample: false};
 *
 *  const contextId = useAppContextId();
 *
 *  const [exampleSettings, setExampleSettings] = useAppContextSettings<ExampleSetting>(contextId, defaultExampleSetting);
 *
 *  const updateExampleSettings = () => setExampleSettings({ isExample: true })
 *
 *  updateExampleSettings();
 */
export declare const useAppContextSettings: <T extends Readonly<import("./SettingsContainer").Settings>>(context?: string | undefined, defaultSettings?: T | undefined) => [T | null, (settings: T) => void];
export default useAppSettings;
