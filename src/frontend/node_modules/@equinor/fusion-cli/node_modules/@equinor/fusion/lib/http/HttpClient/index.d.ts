import { IAuthContainer } from '../../auth/AuthContainer';
import AbortControllerManager from '../../utils/AbortControllerManager';
import IHttpClient, { ResponseParser } from './IHttpClient';
import { HttpResponse } from './HttpResponse';
import ResourceCache from '../ResourceCache';
import { HttpClientError, HttpClientParseError, HttpClientRequestFailedError } from './HttpClientError';
import RequestBody from '../models/RequestBody';
import BlobContainer from '../models/BlobContainer';
import { TelemetryLogger } from '../../utils/telemetry';
import { IEventHub } from '../../utils/EventHub';
export { IHttpClient, HttpResponse, HttpClientError, HttpClientParseError, HttpClientRequestFailedError, };
export declare const voidResponseParser: () => Promise<void>;
export default class HttpClient implements IHttpClient {
    private authContainer;
    private resourceCache;
    private abortControllerManager;
    private telemetryLogger;
    private requestsInProgress;
    private sessionId;
    constructor(authContainer: IAuthContainer, resourceCache: ResourceCache, abortControllerManager: AbortControllerManager, telemetryLogger: TelemetryLogger, eventHub: IEventHub);
    getAsync<TResponse, TExpectedErrorResponse>(url: string, init?: RequestInit | null, responseParser?: ResponseParser<TResponse>): Promise<HttpResponse<TResponse>>;
    postAsync<TBody extends RequestBody, TResponse, TExpectedErrorResponse>(url: string, body: TBody, init?: RequestInit | null, responseParser?: ResponseParser<TResponse>): Promise<HttpResponse<TResponse>>;
    putAsync<TBody extends RequestBody, TResponse, TExpectedErrorResponse>(url: string, body: TBody, init?: RequestInit | null, responseParser?: ResponseParser<TResponse>): Promise<HttpResponse<TResponse>>;
    patchAsync<TBody extends RequestBody, TResponse, TExpectedErrorResponse>(url: string, body: TBody, init?: RequestInit | null, responseParser?: ResponseParser<TResponse>): Promise<HttpResponse<TResponse>>;
    deleteAsync<TResponse, TExpectedErrorResponse>(url: string, init?: RequestInit | null, responseParser?: ResponseParser<TResponse>): Promise<HttpResponse<TResponse>>;
    optionsAsync<TResponse, TExpectedErrorResponse>(url: string, init?: RequestInit | null, responseParser?: ResponseParser<TResponse>): Promise<HttpResponse<TResponse>>;
    headAsync<TResponse, TExpectedErrorResponse>(url: string, init?: RequestInit | null, responseParser?: ResponseParser<TResponse>): Promise<HttpResponse<TResponse>>;
    postFormAsync<TResponse, TExpectedErrorResponse>(url: string, form: FormData, onProgress?: (percentage: number, event: ProgressEvent<XMLHttpRequestEventTarget>) => void, responseParser?: (response: string) => TResponse): Promise<HttpResponse<TResponse>>;
    getBlobAsync<TExpectedErrorResponse>(url: string, init?: RequestInit | null): Promise<BlobContainer>;
    getFileAsync<TExpectedErrorResponse>(url: string, init?: RequestInit | null): Promise<File>;
    uploadFileAsync<TExpectedErrorResponse>(url: string, file: File, method: 'PUT' | 'PATCH' | 'POST', init?: RequestInit | null): Promise<Response>;
    protected responseIsRetriable(response: Response, retryTimeout: number): boolean;
    protected retryRequestAsync<TExpectedErrorResponse>(url: string, init: RequestInit, retryTimeout: number): Promise<Response>;
    private performFetchAsync;
    private performReusableRequest;
    private parseResponseJSONAsync;
    private parseResponseAsync;
    private createHttpResponse;
    private responseIsRefreshable;
    private transformRequestAsync;
    private addSessionIdHeader;
    private addAcceptJsonHeader;
    private addRefreshHeader;
    private addAuthHeaderAsync;
    private addAbortSignal;
    private transformHeaders;
    private getRequestInProgress;
    private createRequestBody;
    private resolveFileNameFromHeader;
}
export declare const useHttpClient: () => IHttpClient;
