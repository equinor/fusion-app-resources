import { IEventHub } from './EventHub';
import EventEmitter from './EventEmitter';
declare type AbortDispatcher = () => void;
declare type AbortControllerEvents = {
    update: (abortController: AbortController | null) => void;
};
export default class AbortControllerManager extends EventEmitter<AbortControllerEvents> {
    private currentAbortController;
    constructor(eventHub: IEventHub);
    withAbortController(abortableAction: (signal: AbortSignal) => Promise<void>): AbortDispatcher;
    getCurrentSignal(): AbortSignal | null;
}
declare const useAbortControllerManager: () => AbortControllerManager;
declare type AbortableAction = (signal: AbortSignal) => Promise<void>;
/**
 * Returns a function to be called if the request(s) performed within the passed function should be aborted
 */
declare const withAbortController: () => (abortableAction: AbortableAction) => AbortDispatcher;
declare type AsyncOperation<T> = (abortSignal?: AbortSignal) => T;
/**
 * Enqueue an operation to be run after the next repaint
 * @param operation
 * @param abortSignal
 */
declare const enqueueAsyncOperation: <T = void>(operation: AsyncOperation<T>, abortSignal?: AbortSignal | undefined) => Promise<T>;
export { useAbortControllerManager, withAbortController, enqueueAsyncOperation, AbortableAction, AsyncOperation, };
