import { useState, useEffect, useMemo, useCallback } from 'react';
import { HubConnectionBuilder } from '@microsoft/signalr';
import { useFusionContext } from '../core/FusionContext';
export default (hubName) => {
    const [hubConnection, setHubConnection] = useState(null);
    const [hubConnectionError, setHubConnectionError] = useState(null);
    const [isEstablishingHubConnection, setIsEstablishingHubConnection] = useState(false);
    const { http: { resourceCollections: { fusion }, }, auth, } = useFusionContext();
    const signalRHubUrl = useMemo(() => fusion.signalRHub(hubName), [hubName, fusion]);
    const createHubConnectionAsync = useCallback(async () => {
        setHubConnectionError(null);
        const hubConnect = new HubConnectionBuilder()
            .withAutomaticReconnect()
            .withUrl(signalRHubUrl, {
            accessTokenFactory: async () => {
                const token = await auth.container.acquireTokenAsync(signalRHubUrl);
                return token || '';
            },
        })
            .build();
        try {
            await hubConnect.start();
            setHubConnection(hubConnect);
        }
        catch (e) {
            setHubConnectionError(e);
        }
        finally {
            setIsEstablishingHubConnection(false);
        }
    }, [signalRHubUrl, auth]);
    useEffect(() => {
        createHubConnectionAsync();
        return () => {
            hubConnection === null || hubConnection === void 0 ? void 0 : hubConnection.stop();
        };
    }, [createHubConnectionAsync]);
    return { hubConnection, hubConnectionError, isEstablishingHubConnection };
};
