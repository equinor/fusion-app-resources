import { formatDay, formatWeekDay } from '../intl/DateTime';
export const isSameDate = (a, b) => {
    return (a.getFullYear() === b.getFullYear() &&
        a.getMonth() === b.getMonth() &&
        a.getDate() === b.getDate());
};
const createCalendarDate = (date, month) => {
    const today = new Date();
    return {
        index: date.getDate() - 1,
        value: formatDay(date),
        weekDay: formatWeekDay(date),
        day: date.getDay(),
        isToday: isSameDate(date, today),
        month: date.getMonth(),
        year: date.getFullYear(),
        isSelectedMonth: date.getMonth() === month,
        date: new Date(date),
    };
};
export const createCalendar = (year, month) => {
    const today = new Date();
    const isCurrentMonth = today.getMonth() === month && today.getFullYear() === year;
    const dateInSelectedMonth = new Date(year, month, 1);
    const dates = [];
    while (dateInSelectedMonth.getMonth() === month) {
        dates.push(createCalendarDate(dateInSelectedMonth, month));
        dateInSelectedMonth.setDate(dateInSelectedMonth.getDate() + 1);
    }
    // First day in month is not monday
    if (dates[0].day !== 1) {
        const dateInPreviousMonth = new Date(year, month, 0);
        while (dateInPreviousMonth.getDay() >= 1) {
            dates.unshift(createCalendarDate(dateInPreviousMonth, month));
            dateInPreviousMonth.setDate(dateInPreviousMonth.getDate() - 1);
        }
    }
    // Last day in month is not sunday
    const dateInNextMonth = new Date(year, month, dates[dates.length - 1].index + 1);
    while (dates[dates.length - 1].day !== 0) {
        dateInNextMonth.setDate(dateInNextMonth.getDate() + 1);
        dates.push(createCalendarDate(dateInNextMonth, month));
    }
    return {
        year,
        month,
        isCurrentMonth,
        dates,
    };
};
