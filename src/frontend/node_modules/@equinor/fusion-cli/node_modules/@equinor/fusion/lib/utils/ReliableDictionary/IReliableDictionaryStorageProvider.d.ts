import { IEventEmitter } from '../EventEmitter';
export declare type Dictionary = {
    [key: string]: any;
};
export declare type ReadonlyDictionary = Readonly<Dictionary>;
export declare type ReliableDictionaryStorageProviderEvents = {
    change: (dictionary: ReadonlyDictionary) => void;
};
export default interface IReliableDictionaryStorageProvider extends IEventEmitter<ReliableDictionaryStorageProviderEvents> {
    getItemAsync<T>(key: string): Promise<T | null>;
    setItemAsync<T>(key: string, value: T): Promise<void>;
    removeItemAsync(key: string): Promise<void>;
    clearAsync(): Promise<void>;
    toObjectAsync(): Promise<ReadonlyDictionary>;
    toObject(): ReadonlyDictionary | null;
}
