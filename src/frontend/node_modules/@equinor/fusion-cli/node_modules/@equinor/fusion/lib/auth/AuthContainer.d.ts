import AuthApp from './AuthApp';
import AuthNonce from './AuthNonce';
import AuthCache from './AuthCache';
import AuthUser from './AuthUser';
import { TelemetryLogger } from '../utils/telemetry';
export declare class FusionAuthAppNotFoundError extends Error {
    constructor(clientId: string);
}
export declare class FusionAuthLoginError extends Error {
}
export interface IAuthContainer {
    /**
     * Handle redirect back from login. Should not be called by apps or tiles
     */
    handleWindowCallbackAsync(): Promise<void>;
    /**
     * Acquire token for specified resource
     * @param resource Either clientId or a resource url used to resolve a registered app and token
     * @throws {FusionAuthAppNotFoundError} When unable to match specified resource to a registered app
     */
    acquireTokenAsync(resource: string): Promise<string | null>;
    /**
     * Register an AAD app for authentication.
     * Returns false if login is required. (use AuthContainer.login(clientId);)
     * @param clientId The AAD app client id
     * @param resources An array of resources that uses the specified client id
     */
    registerAppAsync(clientId: string, resources: string[]): Promise<boolean>;
    /**
     * Initiates the login process
     * @param clientId The AAD app client id
     * @throws {FusionAuthAppNotFoundError} When unable to match specified resource to a registered app
     */
    loginAsync(clientId: string): Promise<void>;
    /**
     * Log out
     * @param clientId Optional client id to log out of. If blank it will log out of all apps
     */
    logoutAsync(clientId?: string): Promise<void>;
    /**
     * Get the current cached user
     */
    getCachedUserAsync(): Promise<AuthUser | null>;
    /**
     * Get the current cached user sync
     */
    getCachedUser(): AuthUser | null;
    /**
     * Set the telemetry logger
     * @param telemetryLogger
     */
    setTelemetryLogger(telemetryLogger: TelemetryLogger): void;
}
export default class AuthContainer implements IAuthContainer {
    protected apps: AuthApp[];
    protected cache: AuthCache;
    protected cachedUser: AuthUser | null;
    protected telemetryLogger?: TelemetryLogger;
    private _tokenQueue;
    constructor();
    handleWindowCallbackAsync(): Promise<void>;
    private _acquireTokenAsync;
    acquireTokenAsync(resource: string): Promise<string | null>;
    protected refreshTokenAsync(resource: string): Promise<string | null>;
    registerAppAsync(clientId: string, resources: string[]): Promise<boolean>;
    loginAsync(clientId: string): Promise<void>;
    logoutAsync(clientId?: string): Promise<void>;
    getCachedUserAsync(): Promise<AuthUser | null>;
    getCachedUser(): AuthUser | null;
    setTelemetryLogger(telemetryLogger: TelemetryLogger): void;
    protected logError(error: Error): void;
    protected updateTokenForAppAsync(app: AuthApp, token: string): Promise<void>;
    protected cacheUserAsync(user: AuthUser): Promise<void>;
    protected static getResourceOrigin(resource: string): string;
    protected static getTokenFromHash(hash: string): string | null;
    protected static getErrorFromHash(hash: string): string | null;
    protected static getPartFromHash(hash: string, key: string): string | null;
    protected buildLoginUrlAsync(app: AuthApp, nonce: AuthNonce, customParams?: {}): Promise<string>;
    protected resolveApp(resource: string): AuthApp | null;
}
