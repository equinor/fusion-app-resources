/// <reference types="react" />
import EventEmitter from '../utils/EventEmitter';
import { IEventHub } from '../utils/EventHub';
import { PersonDetails } from '../http/apiClients/PeopleClient';
export declare type UserMenuComponentProps = {
    personDetails?: PersonDetails;
};
export declare type UserMenuSectionItem = {
    key: string;
    title: string | React.ReactNode;
    aside?: string | React.ReactNode;
    isSelected?: boolean;
    isDisabled?: boolean;
    onClick?: (item: UserMenuSectionItem, personDetails?: PersonDetails) => void;
    component?: React.FC<UserMenuComponentProps>;
};
export declare type UserMenuSection = {
    key: string;
    title?: string;
    items: UserMenuSectionItem[];
};
declare type SectionEvents = {
    change: (sections: UserMenuSection[]) => void;
};
export default class UserMenuContainer extends EventEmitter<SectionEvents> {
    private readonly _sections;
    constructor(eventHub: IEventHub);
    get sections(): UserMenuSection[];
    registerSection(section: UserMenuSection): () => void;
    private unregisterSection;
}
export declare const useCustomUserMenuSection: (section: UserMenuSection) => void;
export {};
