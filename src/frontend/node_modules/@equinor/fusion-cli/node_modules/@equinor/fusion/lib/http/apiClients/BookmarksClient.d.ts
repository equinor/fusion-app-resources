import BaseApiClient from './BaseApiClient';
import BookmarkResponse from './models/bookmarks/BookmarkResponse';
import BookmarkRequest from './models/bookmarks/BookmarkRequest';
import { BookmarkFavouriteRequest, BookmarkPatchRequest } from './models/bookmarks';
export declare class BookmarksClient extends BaseApiClient {
    protected getBaseUrl(): string;
    protected createUrl(href: string, params?: Record<string, string>): string;
    getBookmark(bookmarkId: string): Promise<import("../HttpClient").HttpResponse<BookmarkResponse>>;
    getBookmarks(appkey: string): Promise<import("../HttpClient").HttpResponse<Pick<BookmarkResponse, "created" | "description" | "id" | "name" | "isShared" | "appKey" | "context" | "createdBy" | "updated">[]>>;
    addBookmark(bookmark: BookmarkRequest): Promise<import("../HttpClient").HttpResponse<BookmarkResponse>>;
    updateBookmark(bookmarkId: string, bookmark: BookmarkPatchRequest): Promise<import("../HttpClient").HttpResponse<BookmarkResponse>>;
    deleteBookmark(bookmarkId: string): Promise<import("../HttpClient").HttpResponse<void>>;
    applyBookmark(bookmarkId: string): Promise<import("../HttpClient").HttpResponse<Pick<BookmarkResponse, "payload" | "id" | "context">>>;
    addToFavourites(bookmark: BookmarkFavouriteRequest): Promise<import("../HttpClient").HttpResponse<void>>;
    deleteFavouriteBookmark(bookmarkId: string): Promise<import("../HttpClient").HttpResponse<void>>;
    headBookmark(bookmarkId: string): Promise<import("../HttpClient").HttpResponse<void>>;
}
export default BookmarksClient;
