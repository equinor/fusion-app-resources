import { Subject } from 'rxjs';
import { withLatestFrom } from 'rxjs/operators';
import { createAction, getType } from 'typesafe-actions';
import { Performance } from './Performance';
export const TelemetryActions = {
    metric: createAction('@TELEMETRY/METRIC')(),
    error: createAction('@TELEMETRY/ERROR')(),
    event: createAction('@TELEMETRY/EVENT')(),
};
export class TelemetryObserver extends Subject {
    constructor(name, context$, telemetry) {
        super();
        this.name = name;
        this.context$ = context$;
        this.telemetry = telemetry;
        this.performance = new Performance();
        this._subscription = this.pipe(withLatestFrom(context$)).subscribe(([action, properties]) => this.processAction(action, properties));
    }
    unsubscribe() {
        super.unsubscribe();
        this._subscription.unsubscribe();
    }
    processAction(action, context) {
        const { payload, payload: { mark }, } = action;
        const name = `${this.name}/${payload.name}`;
        const properties = Object.assign(Object.assign({}, context), payload.properties);
        switch (action.type) {
            case getType(TelemetryActions.metric): {
                const { measure } = action.payload;
                const average = this.performance.measure(...(measure || [])) / 1000;
                this.telemetry.trackMetric({ name, properties, average });
                mark && performance.mark(mark);
                break;
            }
            case getType(TelemetryActions.error): {
                this.telemetry.trackException({
                    exception: Error(name),
                    properties,
                });
                break;
            }
            case getType(TelemetryActions.event): {
                this.telemetry.trackEvent({
                    name,
                    properties,
                });
                mark && performance.mark(mark);
                break;
            }
        }
    }
    measure(args) {
        this.next(TelemetryActions.metric(args));
    }
    error(args) {
        this.next(TelemetryActions.error(args));
    }
    event(args) {
        this.next(TelemetryActions.error(args));
    }
}
export default TelemetryObserver;
