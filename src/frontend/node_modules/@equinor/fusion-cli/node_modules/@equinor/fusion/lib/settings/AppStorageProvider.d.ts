import { IEventHub } from '../utils/EventHub';
import UserSettingsClient from '../http/apiClients/UserSettingsClient';
import EventEmitter from '../utils/EventEmitter';
import IReliableDictionaryStorageProvider, { ReliableDictionaryStorageProviderEvents } from '../utils/ReliableDictionary/IReliableDictionaryStorageProvider';
import { Settings } from './SettingsContainer';
export default class AppStorageProvider<T extends Settings = any> extends EventEmitter<ReliableDictionaryStorageProviderEvents> implements IReliableDictionaryStorageProvider {
    private appKey;
    private baseKey;
    private userSettingsClient;
    isInitialized: boolean;
    private initializing;
    private localCache;
    constructor(baseKey: string, eventHub: IEventHub, userSettingsClient: UserSettingsClient, appKey: string, defaultSettings?: T);
    private initialize;
    private updateAppUserSettingsAsync;
    getItemAsync<T>(key: string): Promise<T | null>;
    setItemAsync<T>(key: string, value: T): Promise<void>;
    removeItemAsync(key: string): Promise<void>;
    clearAsync(): Promise<void>;
    toObjectAsync(): Promise<T>;
    toObject(): T | null;
    private persistAsync;
}
