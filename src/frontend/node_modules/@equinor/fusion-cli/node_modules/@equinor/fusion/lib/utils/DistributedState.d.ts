import { IEventHub } from './EventHub';
import EventEmitter, { IEventEmitter } from './EventEmitter';
export interface IDistributedState<T> extends IEventEmitter<DistributedStateEvents<T>> {
    state: T;
}
export declare type DistributedStateEvents<T> = {
    change: (state: T) => void;
};
declare class DistributedState<T> extends EventEmitter<DistributedStateEvents<T>> implements IDistributedState<T> {
    private _state;
    private readonly _key;
    private readonly _eventHub;
    constructor(key: string, state: T, eventHub: IEventHub);
    get state(): T;
    set state(state: T);
    private handleUpdatedState;
    private handleNewInstance;
}
export default DistributedState;
