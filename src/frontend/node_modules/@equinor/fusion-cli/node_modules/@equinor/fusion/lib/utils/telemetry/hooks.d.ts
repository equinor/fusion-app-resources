import { Observable } from 'rxjs';
import { TelemetryInitializer } from './TelemetryLogger';
import { TelemetryObserver } from './TelemetryObserver';
export declare const useTelemetryLogger: () => import("./TelemetryLogger").TelemetryLogger;
export declare const useTelemetryInitializer: (initializer: TelemetryInitializer) => void;
export declare const useTelemetryObserver: <C>(name: string, context$: Observable<C>) => TelemetryObserver;
declare const _default: {
    useTelemetryLogger: () => import("./TelemetryLogger").TelemetryLogger;
    useTelemetryInitializer: (initializer: TelemetryInitializer) => void;
    useTelemetryObserver: <C>(name: string, context$: Observable<C>) => TelemetryObserver<any, import("typesafe-actions").PayloadAction<"@TELEMETRY/ERROR", {
        name: string;
        mark?: string | undefined;
        properties?: any;
    }> | import("typesafe-actions").PayloadAction<"@TELEMETRY/METRIC", {
        name: string;
        mark?: string | undefined;
        properties?: any;
    } & {
        measure?: [string, string] | undefined;
    }> | import("typesafe-actions").PayloadAction<"@TELEMETRY/EVENT", {
        name: string;
        mark?: string | undefined;
        properties?: any;
    }>>;
};
export default _default;
