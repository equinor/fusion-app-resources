import BaseApiClient from './BaseApiClient';
import { voidResponseParser } from '../HttpClient';
export default class DataProxyClient extends BaseApiClient {
    getBaseUrl() {
        return this.serviceResolver.getDataProxyBaseUrl();
    }
    async apiSignInAsync() {
        await this.httpClient.postAsync(this.resourceCollections.dataProxy.apiSignin(), { credentials: 'include' }, undefined, voidResponseParser);
    }
    async getOperationAsync(context, invalidateCache) {
        const url = this.resourceCollections.dataProxy.operation(context);
        const options = invalidateCache ? { headers: { 'x-pp-cache-policy': 'no-cache' } } : {};
        return await this.httpClient.getAsync(url, options);
    }
    async getHandoverAsync(context, invalidateCache) {
        const url = this.resourceCollections.dataProxy.handover(context);
        const options = invalidateCache ? { headers: { 'x-pp-cache-policy': 'no-cache' } } : {};
        return await this.httpClient.getAsync(url, options);
    }
    async getHandoverChildrenAsync(context, commpkgId, action) {
        const url = this.resourceCollections.dataProxy.handoverChildren(context, commpkgId, action);
        return await this.httpClient.getAsync(url);
    }
    async getAccumulatedItemAsync(siteCode, projectIdentifier, action) {
        const url = this.resourceCollections.dataProxy.accumulatedItem(siteCode, projectIdentifier, action);
        return await this.httpClient.getAsync(url);
    }
    async getMilestonesAsync(contextId) {
        const url = this.resourceCollections.dataProxy.milestones(contextId);
        return await this.httpClient.getAsync(url);
    }
    async getWorkOrdersAsync(contextId, invalidateCache) {
        const url = this.resourceCollections.dataProxy.workOrders(contextId);
        const options = invalidateCache ? { headers: { 'x-pp-cache-policy': 'no-cache' } } : {};
        return await this.httpClient.getAsync(url, options);
    }
    async getWorkOrderMaterialsAsync(contextId, workOrderId) {
        const url = this.resourceCollections.dataProxy.workOrdersMaterials(contextId, workOrderId);
        return await this.httpClient.getAsync(url);
    }
    async getWorkOrderMccrAsync(contextId, workOrderId) {
        const url = this.resourceCollections.dataProxy.workOrdersMccr(contextId, workOrderId);
        return await this.httpClient.getAsync(url);
    }
    async getMcPackageAsync(context, invalidateCache) {
        const url = this.resourceCollections.dataProxy.mcPackages(context);
        const options = invalidateCache ? { headers: { 'x-pp-cache-policy': 'no-cache' } } : {};
        return await this.httpClient.getAsync(url, options);
    }
    async getMcPunchAsync(contextId, workOrderId) {
        const url = this.resourceCollections.dataProxy.mcPunch(contextId, workOrderId);
        return await this.httpClient.getAsync(url);
    }
    async getMcWorkOrderAsync(contextId, workOrderId) {
        const url = this.resourceCollections.dataProxy.mcWorkOrders(contextId, workOrderId);
        return await this.httpClient.getAsync(url);
    }
    async getMcNcrAsync(contextId, workOrderId) {
        const url = this.resourceCollections.dataProxy.mcNcr(contextId, workOrderId);
        return await this.httpClient.getAsync(url);
    }
    async getSwcrAsync(context, invalidateCache) {
        const url = this.resourceCollections.dataProxy.swcrPackages(context);
        const options = invalidateCache ? { headers: { 'x-pp-cache-policy': 'no-cache' } } : {};
        return await this.httpClient.getAsync(url, options);
    }
    async getSwcrSignaturesAsync(context, swcrId) {
        const url = this.resourceCollections.dataProxy.swcrSignatures(context, swcrId);
        return await this.httpClient.getAsync(url);
    }
}
