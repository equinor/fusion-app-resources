import AuthApp from './AuthApp';
import AuthToken from './AuthToken';
import AuthUser from './AuthUser';
import ReliableDictionary from '../utils/ReliableDictionary';
export default class AuthCache extends ReliableDictionary {
    constructor();
    private static createAppCacheKey;
    storeTokenAsync(app: AuthApp, token: AuthToken): Promise<void>;
    getTokenAsync(app: AuthApp): Promise<AuthToken | null>;
    clearTokenAsync(app: AuthApp): Promise<void>;
    storeUserAsync(user: AuthUser): Promise<void>;
    getUserAsync(): Promise<AuthUser | null>;
    storeRedirectUrl(redirectUrl: string): Promise<void>;
    getRedirectUrl(): Promise<string | null>;
    setAppLoginLock(clientId: string): Promise<void>;
    /**
     * Clears app lock from auth cache
     *
     * @TODO remove parameter since never been used
     *
     * @param _clientId [string] @deprecated
     */
    clearAppLoginLock(_clientId?: string): Promise<void>;
    getAppLoginLock(): Promise<{
        clientId?: string;
        created?: string;
    }>;
    /**
     *  Check if an app has set a lock for authentication.
     *  If lock exceeds the provided lifetime, lock is removed
     *
     * @param lifetime [number] max lifetime of a lock in seconds
     */
    isAppLoginLocked(lifetime?: number): Promise<boolean>;
}
