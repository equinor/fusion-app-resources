import BaseApiClient from './BaseApiClient';
export class BookmarksClient extends BaseApiClient {
    getBaseUrl() {
        return this.serviceResolver.getFusionBaseUrl();
    }
    createUrl(href, params) {
        params = Object.assign({ ['api-version']: '1.0' }, params);
        const url = new URL(href);
        Object.keys(params).forEach((p) => url.searchParams.append(p, params[p]));
        return url.toString();
    }
    getBookmark(bookmarkId) {
        const baseUrl = this.resourceCollections.bookmarks.bookmark(bookmarkId);
        const url = this.createUrl(baseUrl);
        return this.httpClient.getAsync(url);
    }
    async getBookmarks(appkey) {
        const baseUrl = this.resourceCollections.bookmarks.queryBookmarks({ appkey });
        const url = this.createUrl(baseUrl);
        return this.httpClient.getAsync(url);
    }
    addBookmark(bookmark) {
        const baseUrl = this.resourceCollections.bookmarks.addBookmark();
        const url = this.createUrl(baseUrl);
        return this.httpClient.postAsync(url, bookmark);
    }
    updateBookmark(bookmarkId, bookmark) {
        const baseUrl = this.resourceCollections.bookmarks.updateBookmark(bookmarkId);
        const url = this.createUrl(baseUrl);
        return this.httpClient.patchAsync(url, bookmark);
    }
    deleteBookmark(bookmarkId) {
        const baseUrl = this.resourceCollections.bookmarks.deleteBookmark(bookmarkId);
        const url = this.createUrl(baseUrl);
        return this.httpClient.deleteAsync(url);
    }
    applyBookmark(bookmarkId) {
        const baseUrl = this.resourceCollections.bookmarks.applyBookmark(bookmarkId);
        const url = this.createUrl(baseUrl);
        return this.httpClient.getAsync(url);
    }
    addToFavourites(bookmark) {
        const baseUrl = this.resourceCollections.bookmarks.addFavouriteBookmark();
        const url = this.createUrl(baseUrl);
        return this.httpClient.postAsync(url, bookmark);
    }
    deleteFavouriteBookmark(bookmarkId) {
        const baseUrl = this.resourceCollections.bookmarks.deleteFavoriteBookmark(bookmarkId);
        const url = this.createUrl(baseUrl);
        return this.httpClient.deleteAsync(url);
    }
    headBookmark(bookmarkId) {
        const baseUrl = this.resourceCollections.bookmarks.headBookmark(bookmarkId);
        const url = this.createUrl(baseUrl);
        return this.httpClient.headAsync(url);
    }
}
export default BookmarksClient;
