import { Observable, Subject, Subscription } from 'rxjs';
import { ActionType, PayloadActionCreator } from 'typesafe-actions';
import { Performance } from './Performance';
import { TelemetryLogger } from './TelemetryLogger';
declare type ActionPayload<T> = T extends PayloadActionCreator<string, infer R> ? R : T;
declare type Actions = ActionType<typeof TelemetryActions>;
declare type TelemetryPayload = {
    name: string;
    mark?: string;
    properties?: any;
};
export declare const TelemetryActions: {
    metric: PayloadActionCreator<"@TELEMETRY/METRIC", TelemetryPayload & {
        measure?: [string, string] | undefined;
    }>;
    error: PayloadActionCreator<"@TELEMETRY/ERROR", TelemetryPayload>;
    event: PayloadActionCreator<"@TELEMETRY/EVENT", TelemetryPayload>;
};
export declare class TelemetryObserver<C = any, A extends Actions = Actions> extends Subject<A> {
    readonly name: string;
    readonly context$: Observable<C>;
    readonly telemetry: TelemetryLogger;
    readonly performance: Performance<any>;
    protected _subscription: Subscription;
    constructor(name: string, context$: Observable<C>, telemetry: TelemetryLogger);
    unsubscribe(): void;
    processAction(action: Actions, context?: C): void;
    measure(args: ActionPayload<typeof TelemetryActions.metric>): void;
    error(args: ActionPayload<typeof TelemetryActions.error>): void;
    event(args: ActionPayload<typeof TelemetryActions.event>): void;
}
export default TelemetryObserver;
