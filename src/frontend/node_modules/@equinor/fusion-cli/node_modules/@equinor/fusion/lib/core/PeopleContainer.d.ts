import { PersonDetails, PersonRole } from '../http/apiClients/PeopleClient';
import ApiClients from '../http/apiClients';
import ResourceCollections from '../http/resourceCollections';
import EventEmitter from '../utils/EventEmitter';
import { IEventHub } from '../utils/EventHub';
declare type PersonContainerEvents = {
    updated: (updatedPerson: PersonDetails) => void;
};
export default class PeopleContainer extends EventEmitter<PersonContainerEvents> {
    private peopleClient;
    private resourceCollection;
    private persons;
    private images;
    private eventHub;
    constructor(apiClients: ApiClients, resourceCollections: ResourceCollections, eventHub: IEventHub);
    getPersonDetails(personId: string): PersonDetails | null;
    getPersonDetailsAsync(personId: string): Promise<PersonDetails>;
    setRoleStatusForUser(personId: string, roleName: string, isActive: boolean): Promise<PersonRole>;
    getPersonImage(personId: string): HTMLImageElement | null;
    getPersonImageAsync(personId: string): Promise<HTMLImageElement>;
}
declare const usePeopleContainer: () => PeopleContainer;
declare const usePersonDetails: (personId: string) => {
    isFetching: boolean;
    error: null;
    personDetails: PersonDetails | null;
};
declare const usePersonImageUrl: (personId: string) => {
    isFetching: boolean;
    error: null;
    imageUrl: string;
};
declare const useCurrentPersonDetails: () => {
    isFetching: boolean;
    error: null;
    personDetails: PersonDetails | null;
};
export { usePeopleContainer, usePersonDetails, usePersonImageUrl, useCurrentPersonDetails };
