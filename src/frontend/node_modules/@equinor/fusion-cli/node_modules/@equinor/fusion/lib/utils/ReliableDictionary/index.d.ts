import IReliableDictionaryStorageProvider, { ReadonlyDictionary } from './IReliableDictionaryStorageProvider';
import { IReadonlyReliableDictionary } from './ReadonlyReliableDictionary';
import EventEmitter, { Events } from '../EventEmitter';
export { default as LocalStorageProvider } from './LocalStorageProvider';
export { default as ReadOnlyReliableDictionary } from './ReadonlyReliableDictionary';
export { IReadonlyReliableDictionary };
export interface IReliableDictionary<TCacheType> extends IReadonlyReliableDictionary<TCacheType> {
    setAsync<TKey extends keyof TCacheType>(key: TKey, value: TCacheType[TKey]): Promise<void>;
    removeAsync<TKey extends keyof TCacheType>(key: TKey): Promise<void>;
    clearAsync(): Promise<void>;
}
declare type ReliableDictionaryEvents<TCacheType> = {
    change: (dictionary: TCacheType) => void;
};
declare type AdditionalEvents = Record<string, any>;
export default abstract class ReliableDictionary<TCacheType = ReadonlyDictionary, TAdditionalEvents extends Events = AdditionalEvents, TEvents extends Events = ReliableDictionaryEvents<TCacheType> & TAdditionalEvents> extends EventEmitter<TEvents> implements IReliableDictionary<TCacheType> {
    protected provider: IReliableDictionaryStorageProvider;
    constructor(provider: IReliableDictionaryStorageProvider);
    getAsync<TKey extends keyof TCacheType, T = TCacheType[TKey]>(key: TKey): Promise<T | null>;
    setAsync<TKey extends keyof TCacheType, T = TCacheType[TKey]>(key: TKey, value: T): Promise<void>;
    removeAsync<TKey extends keyof TCacheType>(key: TKey): Promise<void>;
    clearAsync(): Promise<void>;
    toObjectAsync(): Promise<TCacheType>;
    toObject(): TCacheType | null;
    protected emitChangesAsync(): Promise<void>;
}
