import { Subscription, PartialObserver, Unsubscribable, Observable, Subscribable } from 'rxjs';
import { Epic, Action } from './epic';
export declare type Reducer<S, A> = (prevState: S, action: A) => S;
export declare type ReducerState<R extends Reducer<any, any>> = R extends Reducer<infer S, any> ? S : never;
export declare type ReducerAction<R extends Reducer<any, any>> = R extends Reducer<any, infer A> ? A : never;
/**
 * State machine
 */
export declare class EpicReducer<S, A extends Action = any, R extends Reducer<S, A> = Reducer<S, A>, D = any> implements Subscribable<S>, Unsubscribable {
    readonly reducer: (s: S) => R;
    readonly epic: Epic<A, A, S>;
    readonly initial: S;
    readonly dependencies: D;
    private readonly _state$;
    private readonly _action$;
    private readonly _subscription;
    /** current state */
    get value(): S;
    /** observable state */
    get state$(): Observable<S>;
    /** observable actions */
    get action$(): Observable<A>;
    /** transaction of state changes */
    get transaction$(): Observable<[S, S]>;
    constructor(reducer: (s: S) => R, epic: Epic<A, A, S>, initial: S, dependencies: D);
    /**
     * internal subscription
     */
    protected _subscribe(): Subscription;
    /**
     * Subscribe to state changes of the epic
     * @example
     * ```ts
     * epic.subscribe(x => console.log(x));
     * epic.subscribe({
     *  next: x => console.log(x),
     *  error: x => console.error(x),
     *  complete: () => console.log('closed')
     * });
     * ```
     * @param observerOrNext
     * @param error
     * @param complete
     */
    subscribe(observerOrNext?: PartialObserver<S> | ((value: S) => void) | null, error?: ((value: S) => void) | null, complete?: VoidFunction | null): Subscription;
    /**
     * close epic
     */
    unsubscribe(): void;
    /**
     * dispatch action to process
     * @param action
     */
    dispatch(action: A): void;
}
export default EpicReducer;
