import React, { ReactNode } from 'react';
import ReliableDictionary from '../utils/ReliableDictionary';
import { IEventHub } from '../utils/EventHub';
import ApiClients from '../http/apiClients';
import NotificationCard from '../http/apiClients/models/NotificationCard/NotificationCard';
export declare type NotificationLevel = 'low' | 'medium' | 'high';
export declare type NotificationPriority = 'low' | 'medium' | 'high';
/**
 * Used when sending a request to send a notification
 */
export declare type NotificationRequest = {
    id?: string;
    /** The level of the notification */
    level: NotificationLevel;
    /**
     * Optional priority of the notification.
     * Used to sort or override other notifications with the same level
     * */
    priority?: NotificationPriority;
    title: string;
    body?: ReactNode;
    cancelLabel?: string;
    confirmLabel?: string;
    hideCancelAction?: boolean;
    /**
     * How long should the notification be visible to the user?
     * Only applicable for notifications with level == 'low'.
     * Min-max: 4000-10000 ms
     */
    timeout?: number;
};
export declare type NotificationResponse = {
    dismissed: boolean;
    confirmed: boolean;
    cancelled: boolean;
};
export declare type Notification = {
    id: string;
    request: NotificationRequest;
    response: NotificationResponse | null;
    presented: Date;
    responded: Date | null;
    timeout: number | null;
};
export declare type RegisterNotificationPresenter = (level: NotificationLevel, present: NotificationPresenter) => () => void;
export interface INotificationContext {
    presenters: NotificationPresenterRegistration[];
    registerPresenter: RegisterNotificationPresenter;
    cardPresenter: NotificationCardPresenterRegistration;
    registerCardPresenter: RegisterNotificationCardPresenter;
}
declare type NotificationCache = {
    notifications: Notification[];
};
declare type NotificationEvents = {
    presented: (notification: NotificationRequest) => void;
    dismissed: (notification: NotificationRequest) => void;
    confirmed: (notification: NotificationRequest) => void;
    cancelled: (notification: NotificationRequest) => void;
    finished: (notification: NotificationRequest) => void;
    'notification-cards-updated': (notificationCards: NotificationCard[]) => void;
};
export declare type NotificationResolver = (response: NotificationResponse) => void;
export declare type NotificationPresenter = (notification: NotificationRequest, resolve: (response: NotificationResponse) => void, signal: AbortSignal) => void;
export declare type NotificationPresenterRegistration = {
    level: NotificationLevel;
    present: NotificationPresenter;
};
declare type NotificationCardPresenter = (notificationCard: NotificationCard) => void;
declare type NotificationCardPresenterRegistration = {
    present: NotificationCardPresenter;
} | null;
export declare type RegisterNotificationCardPresenter = (present: NotificationCardPresenter) => () => void;
export default class NotificationCenter extends ReliableDictionary<NotificationCache, NotificationEvents> {
    private presenters;
    private cardPresenter;
    private notificationCards;
    private notificationClient;
    constructor(eventHub: IEventHub, apiClients: ApiClients);
    sendAsync(notificationRequest: NotificationRequest, notificationContext?: INotificationContext): Promise<NotificationResponse>;
    sendCard(notificationCard: NotificationCard, notificationContext?: INotificationContext, silent?: boolean): void;
    presentCardAsync(notification: NotificationCard, notificationContext?: INotificationContext): void;
    getNotificationCardsAsync(filter?: string): Promise<NotificationCard[]>;
    private mergeNotificationCards;
    private deleteNotificationCards;
    getNotificationCards(): NotificationCard[];
    registerCardPresenter(present: NotificationCardPresenter): () => void;
    markNotificationCardAsSeenAsync(notificationCard: NotificationCard): Promise<NotificationCard>;
    deleteNotificationCardAsync(notificationCard: NotificationCard): Promise<void>;
    registerPresenter(level: NotificationLevel, present: NotificationPresenter): () => void;
    getAllNotificationsAsync(): Promise<Notification[]>;
    private shouldPresentNotificationAsync;
    private createNotification;
    private getTimeoutForLevel;
    private persistAsync;
    private presentAsync;
    private getCardPresenter;
    private getPresenter;
}
export declare const NotificationContextProvider: React.FC;
export declare const useNotificationContext: () => INotificationContext;
export declare const useNotificationCenter: () => (notificationRequest: NotificationRequest) => Promise<NotificationResponse>;
export declare const useNotificationCards: () => {
    notificationCards: NotificationCard[] | null;
    isFetchingRead: boolean;
    isFetchingUnRead: boolean;
    error: null;
    getReadNotificationCardsAsync: () => Promise<void>;
};
export declare const useGlobalNotificationCardsActions: () => {
    markNotificationsAsSeenAsync: (notificationCards: NotificationCard[]) => Promise<void>;
    isMarkingNotifications: boolean;
    markError: Error | null;
};
export declare const useNotificationCardActions: (notificationCard: NotificationCard) => {
    markNotificationsAsSeenAsync: () => Promise<void>;
    isMarkingNotification: boolean;
    markError: Error | null;
    deleteNotificationCard: () => Promise<void>;
    isDeletingNotification: boolean;
    deleteError: Error | null;
};
export {};
