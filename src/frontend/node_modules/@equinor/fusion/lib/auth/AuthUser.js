import JSON from '../utils/JSON';
class UserTokenMissmatchError extends Error {
}
export default class AuthUser {
    constructor(id, json) {
        this._fullName = '';
        this._givenName = '';
        this._familyName = '';
        this._upn = '';
        this._roles = [];
        this._id = id;
        if (json !== null) {
            this._fullName = json.fullName;
            this._givenName = json.givenName;
            this._familyName = json.familyName;
            this._upn = json.upn;
            this._roles = json.roles;
        }
    }
    static createFromToken(token) {
        const user = new AuthUser(token.id, null);
        user.mergeWithToken(token);
        return user;
    }
    static fromJSON(json) {
        return new AuthUser(json.id, json);
    }
    get id() {
        return this._id;
    }
    get fullName() {
        return this._fullName;
    }
    get givenName() {
        return this._givenName;
    }
    get familyName() {
        return this._familyName;
    }
    get roles() {
        return this._roles.map((role) => role);
    }
    get upn() {
        return this._upn;
    }
    mergeWithToken(token) {
        if (token.id !== this.id) {
            throw new UserTokenMissmatchError();
        }
        this._fullName = token.fullName;
        this._givenName = token.givenName;
        this._familyName = token.familyName;
        this._upn = token.upn;
        if (token.roles) {
            token.roles.forEach((role) => {
                if (this._roles.indexOf(role) === -1) {
                    this._roles.push(role);
                }
            });
        }
    }
    toObject() {
        return {
            id: this.id,
            familyName: this.familyName,
            fullName: this.fullName,
            givenName: this.givenName,
            roles: this.roles,
            upn: this.upn,
        };
    }
    toString() {
        return JSON.stringify(this.toObject());
    }
}
