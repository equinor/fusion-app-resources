import ReliableDictionary, { IReadonlyReliableDictionary, IReliableDictionary } from '../utils/ReliableDictionary';
import AuthUser from '../auth/AuthUser';
import { IEventHub } from '../utils/EventHub';
import UserSettingsClient from '../http/apiClients/UserSettingsClient';
export declare type Settings = {
    [key: string]: any;
};
export declare type ReadonlySettings = Readonly<Settings>;
export interface IReadonlySettingsContainer<T> extends IReadonlyReliableDictionary<T> {
    toObjectAsync(): Promise<T>;
}
export interface ISettingsContainer<T = ReadonlySettings> extends IReadonlySettingsContainer<T>, IReliableDictionary<T> {
}
export default class SettingsContainer<T = ReadonlySettings> extends ReliableDictionary<T> implements ISettingsContainer<T> {
    constructor(baseKey: string, user: AuthUser | null, eventHub: IEventHub, defaultSettings?: Settings);
}
export declare class AppSettingsContainer<T = ReadonlySettings> extends ReliableDictionary<T> implements ISettingsContainer<T> {
    constructor(appKey: string, eventHub: IEventHub, userSettingsClient: UserSettingsClient, defaultSettings?: Settings);
}
