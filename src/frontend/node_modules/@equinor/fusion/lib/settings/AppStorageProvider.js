import EventEmitter from '../utils/EventEmitter';
import JSON from '../utils/JSON';
import DistributedState from '../utils/DistributedState';
export default class AppStorageProvider extends EventEmitter {
    constructor(baseKey, eventHub, userSettingsClient, appKey, defaultSettings) {
        super();
        this.isInitialized = false;
        this.appKey = appKey;
        this.baseKey = baseKey;
        const cachedJson = localStorage.getItem(this.baseKey);
        const cachedValue = cachedJson ? JSON.parse(cachedJson) : null;
        this.localCache = new DistributedState(`LocalStorageProvider.${baseKey}`, cachedValue, eventHub);
        if (!cachedValue && defaultSettings) {
            this.localCache.state = defaultSettings;
        }
        this.localCache.on('change', (value) => {
            this.emit('change', value);
        });
        this.userSettingsClient = userSettingsClient;
        this.initializing = new Promise((resolve, reject) => this.initialize()
            .then(() => resolve())
            .catch((e) => reject(e)));
    }
    async initialize() {
        if (this.appKey === '') {
            this.isInitialized = true;
            return;
        }
        try {
            const response = await this.userSettingsClient.getAppUserSettings(this.appKey);
            this.localCache.state = response.data;
            await this.persistAsync();
            this.isInitialized = true;
        }
        catch (e) {
            this.isInitialized = false;
        }
    }
    async updateAppUserSettingsAsync() {
        try {
            await this.userSettingsClient.updateAppUserSettings(this.appKey, this.localCache.state);
        }
        catch (e) {
            return;
        }
    }
    async getItemAsync(key) {
        if (!this.isInitialized) {
            try {
                await this.initializing;
            }
            catch (e) {
                return null;
            }
        }
        const localCache = await this.toObjectAsync();
        const value = localCache[key];
        if (!value) {
            return null;
        }
        return value;
    }
    async setItemAsync(key, value) {
        const localCache = await this.toObjectAsync();
        this.localCache.state = Object.assign(Object.assign({}, localCache), { [key]: value });
        this.updateAppUserSettingsAsync();
        await this.persistAsync();
    }
    async removeItemAsync(key) {
        const localCache = await this.toObjectAsync();
        delete localCache[key];
        this.localCache.state = Object.assign({}, localCache);
        this.updateAppUserSettingsAsync();
        await this.persistAsync();
    }
    async clearAsync() {
        localStorage.removeItem(this.baseKey);
        this.localCache.state = {};
        this.updateAppUserSettingsAsync();
    }
    async toObjectAsync() {
        if (this.localCache.state === null) {
            const cachedJson = localStorage.getItem(this.baseKey);
            const cachedValue = cachedJson ? JSON.parse(cachedJson) : {};
            this.localCache.state = cachedValue;
        }
        return this.localCache.state;
    }
    toObject() {
        return this.localCache.state;
    }
    async persistAsync() {
        const json = JSON.stringify(await this.toObjectAsync());
        localStorage.setItem(this.baseKey, json);
    }
}
