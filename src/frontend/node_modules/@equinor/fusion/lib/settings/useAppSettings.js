import { useState, useEffect, useLayoutEffect, useCallback, useMemo } from 'react';
import { useFusionContext } from '../core/FusionContext';
import { useCurrentApp } from '../app/AppContainer';
import { AppSettingsContainer } from './SettingsContainer';
import EventHub from '../utils/EventHub';
import useApiClients from '../http/hooks/useApiClients';
import { useCurrentContext } from '../core/ContextManager';
export const useSettingSelector = (selector, state) => {
    const [userSettings, setUserSettings] = useState(null);
    useLayoutEffect(() => {
        const nextValue = selector(state);
        if (nextValue !== userSettings) {
            setUserSettings(nextValue);
        }
    }, [selector]);
    return userSettings;
};
const ensureAppSettings = (settings, appKey, userSettingsClient, defaultSettings) => {
    if (typeof settings.apps[appKey] === 'undefined') {
        const appSettings = new AppSettingsContainer(appKey, new EventHub(), userSettingsClient, defaultSettings);
        settings.apps[appKey] = appSettings;
        return appSettings;
    }
    return settings.apps[appKey];
};
/**
 * The useAppSettings will create and store app setting for different apps. The settings
 * will also be stored backend for redundancy
 * @param defaultSettings Provide default settings
 * @returns A state and a state setter, use these to get and update app settings.
 * @example
 * type ExampleSetting = { isExample: boolean };
 *
 * const defaultExampleSetting: ExampleSetting = { isExample: false };
 *
 * const [appSettings, setAppSettings] = useAppSettings<ExampleSetting>(defaultExampleSetting);
 *
 * const setOrgFilterSettings = (exampleSettings: ExampleSetting) => {
 *   setAppSettings('isExample', exampleSettings);
 * };
 */
const useAppSettings = (defaultSettings) => {
    const { settings } = useFusionContext();
    const currentApp = useCurrentApp();
    const { userSettings } = useApiClients();
    const appSettings = ensureAppSettings(settings, currentApp ? currentApp.key : '', userSettings, defaultSettings);
    const [localAppSettings, setLocalAppSettings] = useState(appSettings.toObject() || {});
    useEffect(() => {
        appSettings.toObjectAsync().then(setLocalAppSettings);
        return appSettings.on('change', setLocalAppSettings);
    }, []);
    const setAppSettingAsync = async (key, value) => {
        await appSettings.setAsync(key, value);
        const obj = await appSettings.toObjectAsync();
        setLocalAppSettings(obj);
    };
    return [localAppSettings, setAppSettingAsync];
};
/**
 * The useContextSettingsSelector will create app settings for every context.
 * @param context Use a custom context string, otherwise the fusion context id will be used
 * @param defaultSettings Provide default settings
 * @returns A state and a state setter, use these to get app settings for the context and update app settings.
 * @example type ExampleSetting = { isExample: boolean }
 *
 *  const defaultExampleSetting: ExampleSetting = { isExample: false};
 *
 *  const contextId = useAppContextId();
 *
 *  const [exampleSettings, setExampleSettings] = useAppContextSettings<ExampleSetting>(contextId, defaultExampleSetting);
 *
 *  const updateExampleSettings = () => setExampleSettings({ isExample: true })
 *
 *  updateExampleSettings();
 */
export const useAppContextSettings = (context, defaultSettings) => {
    const currentContext = useCurrentContext();
    const contextId = useMemo(() => context || (currentContext === null || currentContext === void 0 ? void 0 : currentContext.id) || 'global', [
        currentContext,
        context,
    ]);
    const [appSettings, setAppSettings] = useAppSettings({
        context: {
            [contextId]: defaultSettings,
        },
    });
    const selector = (state) => { var _a; return ((_a = state === null || state === void 0 ? void 0 : state.context) === null || _a === void 0 ? void 0 : _a[contextId]) || null; };
    const contextSettings = useSettingSelector(selector, appSettings);
    const setContextSetting = useCallback((value) => {
        setAppSettings('context', Object.assign(Object.assign({}, appSettings.context), { [contextId]: value }));
    }, [contextId, appSettings]);
    return [contextSettings, setContextSetting];
};
export default useAppSettings;
