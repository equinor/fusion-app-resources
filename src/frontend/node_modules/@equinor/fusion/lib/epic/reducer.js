import { Subject, Subscription, BehaviorSubject, asyncScheduler, } from 'rxjs';
import { map, distinctUntilChanged, observeOn, catchError, pairwise } from 'rxjs/operators';
import { StatefulObserver } from './StatefulObserver';
/**
 * State machine
 */
export class EpicReducer {
    constructor(reducer, epic, initial, dependencies) {
        this.reducer = reducer;
        this.epic = epic;
        this.initial = initial;
        this.dependencies = dependencies;
        this._state$ = new BehaviorSubject(initial);
        this._action$ = new Subject();
        this._subscription = this._subscribe();
    }
    /** current state */
    get value() {
        return this._state$.value;
    }
    /** observable state */
    get state$() {
        return this._state$.asObservable();
    }
    /** observable actions */
    get action$() {
        return this._action$.asObservable();
    }
    /** transaction of state changes */
    get transaction$() {
        return this._state$.pipe(pairwise());
    }
    /**
     * internal subscription
     */
    _subscribe() {
        const reducer = this.reducer(this.initial);
        const reduce$ = this._action$.pipe(map((action) => reducer(this._state$.value, action)), distinctUntilChanged());
        const state$ = new StatefulObserver(this._state$, this.initial);
        const epic$ = this.epic(this._action$, state$, this.dependencies).pipe(catchError((err, caught) => {
            console.error('Unhandled Exception!', err);
            return caught;
        }), observeOn(asyncScheduler));
        const subscription = new Subscription();
        subscription.add(reduce$.subscribe(this._state$));
        subscription.add(epic$.subscribe(this._action$));
        return subscription;
    }
    /**
     * Subscribe to state changes of the epic
     * @example
     * ```ts
     * epic.subscribe(x => console.log(x));
     * epic.subscribe({
     *  next: x => console.log(x),
     *  error: x => console.error(x),
     *  complete: () => console.log('closed')
     * });
     * ```
     * @param observerOrNext
     * @param error
     * @param complete
     */
    subscribe(observerOrNext, error, complete) {
        return typeof observerOrNext === 'object'
            ? this._state$.subscribe(observerOrNext)
            : this._state$.subscribe(observerOrNext, error, complete);
    }
    /**
     * close epic
     */
    unsubscribe() {
        this._subscription.unsubscribe();
    }
    /**
     * dispatch action to process
     * @param action
     */
    dispatch(action) {
        if (!this._action$.closed) {
            this._action$.next(action);
        }
    }
}
export default EpicReducer;
