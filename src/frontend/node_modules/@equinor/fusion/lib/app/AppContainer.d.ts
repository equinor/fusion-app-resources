/// <reference types="react" />
import AppManifest from './AppManifest';
import EventEmitter from '../utils/EventEmitter';
import ApiClients from '../http/apiClients';
import TelemetryLogger from '../utils/TelemetryLogger';
import FeatureLogger from '../utils/FeatureLogger';
import { IDistributedState } from '../utils/DistributedState';
import { IEventHub } from '../utils/EventHub';
import { ContextManifest } from '../http/apiClients/models/context/ContextManifest';
import { AppAuth } from '../http/apiClients/models/fusion/apps/AppManifest';
declare type AppRegistration = {
    AppComponent: React.ComponentType;
    name?: string;
    shortName?: string;
    description?: string;
    context?: ContextManifest;
    auth?: AppAuth[];
    icon?: string;
};
declare type AppContainerEvents = {
    update: (app: Record<string, AppManifest>) => void;
    change: (app: AppManifest | null) => void;
    fetch: (status: boolean) => void;
};
export default class AppContainer extends EventEmitter<AppContainerEvents> {
    private readonly featureLogger;
    private _currentApp;
    private apps;
    previousApps: IDistributedState<Record<string, AppManifest>>;
    private _isUpdating?;
    get isUpdating(): boolean;
    private _lastUpdated?;
    get lastUpdated(): number | undefined;
    get requireUpdate(): boolean;
    private _updatePromise;
    get updateComplete(): Promise<void>;
    get currentApp(): AppManifest | null;
    get allApps(): Record<string, AppManifest>;
    private readonly fusionClient;
    private readonly telemetryLogger;
    constructor(apiClients: ApiClients, telemetryLogger: TelemetryLogger, featureLogger: FeatureLogger, eventHub: IEventHub);
    updateManifest(manifest: AppManifest): void;
    get(appKey: string | null): "" | AppManifest | null;
    getAll(): AppManifest[];
    setCurrentAppAsync(appKey: string | null): Promise<void>;
    getAllAsync(): Promise<Record<string, AppManifest>>;
    requestUpdate(): Promise<void>;
    private update;
    private addOrUpdate;
}
declare const appContainerFactory: (appContainer: AppContainer) => void;
declare const registerApp: (key: string, manifest: AppRegistration) => void;
declare const useCurrentApp: () => AppManifest | null;
declare const useApps: (buffer?: number) => {
    error: Error | null;
    initialized: boolean;
    isFetching: boolean;
    apps: Record<string, AppManifest>;
};
export { registerApp, appContainerFactory, AppManifest, useCurrentApp, useApps };
