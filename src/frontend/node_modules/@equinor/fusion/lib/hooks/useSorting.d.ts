export declare type PropertyAccessorFunction<T> = (item: T) => string | null;
export declare type PropertyAccessor<T> = keyof T | PropertyAccessorFunction<T>;
export declare type SortDirection = 'asc' | 'desc';
/**
 * Apply sort to a data set
 * @param data The data to sort
 * @param sortBy The property to sort by or an accessor function
 * @param direction Sort direction
 */
export declare const applySorting: <T>(data: T[], sortBy?: PropertyAccessorFunction<T> | keyof T | null, direction?: SortDirection | null) => T[];
/**
 * Sorting hook that takes care of sorting and storing the sort by and direction
 * If the default sort by of direction is null, no initial sorting will be applied
 * @param data The data to sort
 * @param defaultSortBy The default sort property
 * @param defaultDirection The default direction
 */
export declare const useSorting: <T>(data: T[], defaultSortBy?: PropertyAccessorFunction<T> | keyof T | null, defaultDirection?: SortDirection | null) => {
    sortedData: T[];
    sortBy: PropertyAccessorFunction<T> | keyof T | null;
    direction: "desc" | "asc" | null;
    setSortBy: (newSortBy: PropertyAccessorFunction<T> | keyof T | null, newDirection: SortDirection | null) => void;
    resetSorting: () => void;
};
