import { MutableRefObject } from 'react';
import { History } from 'history';
import { IAuthContainer } from '../auth/AuthContainer';
import ResourceCollections from '../http/resourceCollections';
import ApiClients from '../http/apiClients';
import { IHttpClient } from '../http/HttpClient';
import ResourceCache from '../http/ResourceCache';
import ServiceResolver from '../http/resourceCollections/ServiceResolver';
import SettingsContainer, { AppSettingsContainer } from '../settings/SettingsContainer';
import AppContainer from '../app/AppContainer';
import { ComponentDisplayType } from '../core/ComponentDisplayType';
import ContextManager from './ContextManager';
import AbortControllerManager from '../utils/AbortControllerManager';
import TasksContainer from './TasksContainer';
import NotificationCenter from './NotificationCenter';
import PeopleContainer from './PeopleContainer';
import UserMenuContainer from './UserMenuContainer';
import TelemetryLogger from '../utils/TelemetryLogger';
import FeatureLogger from '../utils/FeatureLogger';
export declare type Auth = {
    container: IAuthContainer;
};
export declare type Http = {
    client: IHttpClient;
    resourceCollections: ResourceCollections;
    apiClients: ApiClients;
    resourceCache: ResourceCache;
    serviceResolver: ServiceResolver;
};
export declare type ExternalRefs = {
    root: MutableRefObject<HTMLElement | null>;
    overlay: MutableRefObject<HTMLElement | null>;
};
export declare type Refs = ExternalRefs & {
    headerContent: MutableRefObject<HTMLElement | null>;
    headerAppAside?: MutableRefObject<HTMLElement | null>;
};
export declare type AppSettings = {
    [key: string]: AppSettingsContainer;
};
export declare type Settings = {
    core: SettingsContainer<CoreSettings>;
    /**
     * App settings will be populated on demand when using useAppSettings()
     */
    apps: AppSettings;
};
export declare type App = {
    container: AppContainer;
};
export declare type Logging = {
    telemetry: TelemetryLogger;
    feature: FeatureLogger;
};
export interface IFusionContext {
    auth: Auth;
    http: Http;
    refs: Refs;
    history: History;
    settings: Settings;
    app: App;
    contextManager: ContextManager;
    tasksContainer: TasksContainer;
    abortControllerManager: AbortControllerManager;
    notificationCenter: NotificationCenter;
    peopleContainer: PeopleContainer;
    userMenuSectionsContainer: UserMenuContainer;
    environment: FusionEnvironment;
    logging: Logging;
    options?: FusionContextOptions;
}
export declare type CoreSettings = {
    readonly componentDisplayType: ComponentDisplayType;
};
export declare const defaultSettings: CoreSettings;
export declare type FusionEnvironment = {
    env: string;
    pullRequest?: string;
};
export declare type TelemetryOptions = {
    instrumentationKey: string;
};
export declare type FusionContextOptions = {
    loadBundlesFromDisk: boolean;
    environment?: FusionEnvironment;
    telemetry?: TelemetryOptions;
};
export declare const createFusionContext: (authContainer: IAuthContainer, serviceResolver: ServiceResolver, refs: Refs, options?: FusionContextOptions | undefined, browserHistory?: History<unknown> | undefined) => IFusionContext;
declare const FusionContext: import("react").Context<IFusionContext>;
export declare const useFusionContext: () => IFusionContext;
export default FusionContext;
