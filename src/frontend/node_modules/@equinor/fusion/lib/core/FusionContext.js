import { createContext, useContext } from 'react';
import { createBrowserHistory } from 'history';
import { createResourceCollections } from '../http/resourceCollections';
import { createApiClients } from '../http/apiClients';
import HttpClient from '../http/HttpClient';
import ResourceCache from '../http/ResourceCache';
import SettingsContainer from '../settings/SettingsContainer';
import AppContainer, { appContainerFactory } from '../app/AppContainer';
import { ComponentDisplayType } from '../core/ComponentDisplayType';
import ContextManager from './ContextManager';
import AbortControllerManager from '../utils/AbortControllerManager';
import TasksContainer from './TasksContainer';
import NotificationCenter from './NotificationCenter';
import PeopleContainer from './PeopleContainer';
import UserMenuContainer from './UserMenuContainer';
import TelemetryLogger from '../utils/TelemetryLogger';
import EventHub from '../utils/EventHub';
import FeatureLogger from '../utils/FeatureLogger';
export const defaultSettings = {
    componentDisplayType: ComponentDisplayType.Comfortable,
};
const globalEquinorFusionContextKey = '74b1613f-f22a-451b-a5c3-1c9391e91e68';
const win = window;
const ensureFusionEnvironment = (options) => {
    if (options && options.environment) {
        return options.environment;
    }
    return {
        env: 'ci',
    };
};
export const createFusionContext = (authContainer, serviceResolver, refs, options, browserHistory) => {
    const telemetryLogger = new TelemetryLogger(options && options.telemetry ? options.telemetry.instrumentationKey : '', authContainer);
    const abortControllerManager = new AbortControllerManager(new EventHub());
    const resourceCollections = createResourceCollections(serviceResolver, options);
    const resourceCache = new ResourceCache(new EventHub());
    authContainer.setTelemetryLogger(telemetryLogger);
    const httpClient = new HttpClient(authContainer, resourceCache, abortControllerManager, telemetryLogger, new EventHub());
    const apiClients = createApiClients(httpClient, resourceCollections, serviceResolver);
    const featureLogger = new FeatureLogger(apiClients, new EventHub());
    const history = browserHistory || createBrowserHistory();
    const coreSettings = new SettingsContainer('core', authContainer.getCachedUser(), new EventHub(), defaultSettings);
    const appContainer = new AppContainer(apiClients, telemetryLogger, featureLogger, new EventHub());
    appContainerFactory(appContainer);
    const contextManager = new ContextManager(apiClients, appContainer, featureLogger, telemetryLogger, history);
    const tasksContainer = new TasksContainer(apiClients, new EventHub());
    const notificationCenter = new NotificationCenter(new EventHub(), apiClients);
    const peopleContainer = new PeopleContainer(apiClients, resourceCollections, new EventHub());
    const userMenuSectionsContainer = new UserMenuContainer(new EventHub());
    const environment = ensureFusionEnvironment(options);
    const fusionContext = {
        auth: { container: authContainer },
        http: {
            client: httpClient,
            resourceCollections,
            apiClients,
            resourceCache,
            serviceResolver,
        },
        refs,
        history,
        settings: {
            core: coreSettings,
            apps: {},
        },
        app: {
            container: appContainer,
        },
        contextManager,
        tasksContainer,
        abortControllerManager,
        notificationCenter,
        peopleContainer,
        userMenuSectionsContainer,
        environment,
        logging: {
            telemetry: telemetryLogger,
            feature: featureLogger,
        },
        options,
    };
    if (!win[globalEquinorFusionContextKey]) {
        win[globalEquinorFusionContextKey] = fusionContext;
    }
    return fusionContext;
};
const ensureGlobalFusionContextType = () => {
    if (!win[globalEquinorFusionContextKey]) {
        return createContext({});
    }
    const existingFusionContext = win[globalEquinorFusionContextKey];
    return createContext(createFusionContext(existingFusionContext.auth.container, existingFusionContext.http.serviceResolver, existingFusionContext.refs, existingFusionContext.options, existingFusionContext.history));
};
const FusionContext = ensureGlobalFusionContextType();
export const useFusionContext = () => useContext(FusionContext);
export default FusionContext;
