import ApiClients from '../http/apiClients';
import EventEmitter from '../utils/EventEmitter';
import Task, { TaskType, TaskSourceSystem, TaskTypes } from '../http/apiClients/models/tasks/Task';
import { IEventHub } from '../utils/EventHub';
declare type TasksEvents = {
    'tasks-updated': (tasks: Task[]) => void;
    'task-types-updated': (taskTypes: TaskType[]) => void;
    'source-systems-updated': (sourceSystems: TaskSourceSystem[]) => void;
};
export default class TasksContainer extends EventEmitter<TasksEvents> {
    private tasksClient;
    private tasks;
    private taskTypes;
    private sourceSystems;
    constructor(apiClients: ApiClients, eventHub: IEventHub);
    getAllTasksAsync(): Promise<Task[]>;
    getTasksAsync(taskType: TaskTypes): Promise<Task[]>;
    getTaskTypesAsync(): Promise<TaskType[]>;
    getSourceSystemsAsync(): Promise<TaskSourceSystem[]>;
    setTaskPriorityAsync(id: string, priority: number): Promise<void>;
    getTasks(taskType?: TaskTypes): Task[];
    getTaskTypes(): TaskType[];
    getSourceSystems(): TaskSourceSystem[];
    private refreshTasksAsync;
    private mergeTasks;
    private setTaskTypes;
    private setSourceSystems;
}
declare const useTasksContainer: () => TasksContainer;
declare const useTaskSourceSystems: () => [Error | null, boolean, TaskSourceSystem[]];
declare const useTaskTypes: () => [Error | null, boolean, TaskType[]];
declare const useTaskPrioritySetter: () => (id: string, priority: number) => Promise<void>;
declare const useTasks: () => {
    error: Error | null;
    isFetching: boolean;
    tasks: Task[];
    isFetchingTaskTypes: boolean;
    taskTypes: TaskType[];
    isFetchingSourceSystems: boolean;
    sourceSystems: TaskSourceSystem[];
};
export { useTasksContainer, useTasks, useTaskSourceSystems, useTaskTypes, useTaskPrioritySetter };
