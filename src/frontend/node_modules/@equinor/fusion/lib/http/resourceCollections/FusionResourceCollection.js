import BaseResourceCollection from './BaseResourceCollection';
import { combineUrls } from '../../utils/url';
export default class FusionResourceCollection extends BaseResourceCollection {
    constructor(serviceResolver, options) {
        super(serviceResolver);
        this.options = options;
    }
    apps() {
        return combineUrls(this.getBaseUrl(), 'api', 'apps');
    }
    app(appKey) {
        return combineUrls(this.apps(), appKey);
    }
    appManifest(appKey) {
        return this.app(appKey);
    }
    token(resource) {
        return combineUrls(this.getBaseUrl(), 'api', 'auth', 'token?resource=') + resource;
    }
    appScript(appKey) {
        var _a;
        if ((_a = this.options) === null || _a === void 0 ? void 0 : _a.loadBundlesFromDisk) {
            return `/js/apps/${appKey}/app-bundle.js?v=${+new Date()}`;
        }
        return combineUrls(this.getBaseUrl(), `/bundles/apps/${appKey}.js`);
    }
    appIcon(appKey) {
        return combineUrls(this.app(appKey), this.getResourcesPath(), 'app-icon.svg');
    }
    featureLog() {
        return combineUrls(this.getBaseUrl(), 'log', 'features');
    }
    signalRHub(hubName) {
        return combineUrls(this.getBaseUrl(), 'signalr', 'hubs', hubName);
    }
    getBundlesPath() {
        return this.options && this.options.loadBundlesFromDisk ? 'js' : 'bundles';
    }
    getAppManifestFileName() {
        return this.options && this.options.loadBundlesFromDisk
            ? `app-manifest.json?v=${+new Date()}`
            : '';
    }
    getBaseUrl() {
        return this.serviceResolver.getFusionBaseUrl();
    }
    getResourcesPath() {
        return this.options && this.options.loadBundlesFromDisk ? '' : 'resources';
    }
}
