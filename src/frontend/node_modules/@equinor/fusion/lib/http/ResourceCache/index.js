import EventEmitter from '../../utils/EventEmitter';
import DistributedState from '../../utils/DistributedState';
export default class ResourceCache extends EventEmitter {
    constructor(eventHub) {
        super();
        this.cachedResources = new DistributedState('ResourceCache.CachedResources', {}, eventHub);
        this.cachedResources.on('change', (cachedResources) => {
            this.emit('update', cachedResources);
        });
    }
    async setIsFetchingAsync(resource) {
        const cachedResource = await this.getAsync(resource);
        await this.setResourceAsync(resource, Object.assign(Object.assign({}, cachedResource), { isFetching: true }));
    }
    async updateAsync(resource, response) {
        const cachedResource = await this.getAsync(resource);
        const cacheAgeHeader = response.headers.get('x-pp-cache-age');
        const age = cacheAgeHeader !== null ? new Date(cacheAgeHeader) : null;
        const cacheDurationHeader = response.headers.get('x-pp-cache-duration-minutes');
        const duration = cacheDurationHeader !== null ? parseInt(cacheDurationHeader, 10) : -1;
        const source = response.headers.get('x-pp-cache-source');
        const updatedResource = Object.assign(Object.assign({}, cachedResource), { data: response.data, isFetching: false, cacheStatus: Object.assign(Object.assign({}, cachedResource.cacheStatus), { age,
                duration,
                source }) });
        await this.setResourceAsync(resource, updatedResource);
    }
    async getAsync(resource) {
        if (typeof this.cachedResources.state[resource] === 'undefined') {
            await this.setResourceAsync(resource, {
                resource,
                data: null,
                isFetching: false,
                cacheStatus: {
                    age: null,
                    duration: null,
                    source: null,
                },
            });
        }
        return this.cachedResources.state[resource];
    }
    async setResourceAsync(resource, updatedResource) {
        this.cachedResources.state[resource] = updatedResource;
        this.emit('update', updatedResource);
    }
}
