import BaseApiClient from './BaseApiClient';
export default class ReportClient extends BaseApiClient {
    getBaseUrl() {
        return this.serviceResolver.getReportsBaseUrl();
    }
    async getReportsAsync() {
        const url = this.resourceCollections.report.reports();
        return await this.httpClient.getAsync(url);
    }
    async getReportAsync(id) {
        const url = this.resourceCollections.report.report(id);
        return await this.httpClient.getAsync(url);
    }
    async getEmbedInfo(reportId) {
        const url = this.resourceCollections.report.embedInfo(reportId);
        return await this.httpClient.getAsync(url);
    }
    async getAccessToken(reportId) {
        const url = this.resourceCollections.report.accessToken(reportId);
        return await this.httpClient.getAsync(url);
    }
    async getDescription(reportId) {
        const url = this.resourceCollections.report.description(reportId);
        return await this.httpClient.getAsync(url, null, (response) => response.text());
    }
    async updateDescription(reportId, description) {
        const url = this.resourceCollections.report.description(reportId);
        return await this.httpClient.putAsync(url, { content: description }, null, (response) => response.text());
    }
    async getAccessDescription(reportId) {
        const url = this.resourceCollections.report.accessDescription(reportId);
        return await this.httpClient.getAsync(url, null, (response) => response.text());
    }
    async updateAccessDescription(reportId, description) {
        const url = this.resourceCollections.report.accessDescription(reportId);
        return await this.httpClient.putAsync(url, { content: description }, null, (response) => response.text());
    }
    async getTechnicalDocument(reportId) {
        const url = this.resourceCollections.report.technicalDocument(reportId);
        return await this.httpClient.getAsync(url, null, (response) => response.text());
    }
    async getRlsRequirements(reportId) {
        const url = this.resourceCollections.report.rlsRequirements(reportId);
        return await this.httpClient.getAsync(url, null, (response) => response.text());
    }
    async addReport(report) {
        const url = this.resourceCollections.report.reports();
        return await this.httpClient.postAsync(url, report);
    }
    async updateReport(report) {
        const url = this.resourceCollections.report.report(report.id);
        return await this.httpClient.putAsync(url, report);
    }
    async updateConfig(reportId, embedConfig) {
        const url = this.resourceCollections.report.updateConfig(reportId);
        return await this.httpClient.putAsync(url, embedConfig);
    }
    async validateConfig(embedConfig) {
        const url = this.resourceCollections.report.validateConfig();
        return await this.httpClient.postAsync(url, embedConfig);
    }
    async publishReport(reportId) {
        const url = this.resourceCollections.report.publishReport(reportId);
        return await this.httpClient.putAsync(url, '');
    }
    async unPublishReport(reportId) {
        const url = this.resourceCollections.report.unPublishReport(reportId);
        return await this.httpClient.putAsync(url, '');
    }
    async deleteReport(reportId) {
        const url = this.resourceCollections.report.report(reportId);
        return await this.httpClient.deleteAsync(url, null, () => Promise.resolve());
    }
    async checkContextAccess(reportId, contextExternalId, contextType) {
        const url = this.resourceCollections.report.checkAccess(reportId, contextExternalId, contextType);
        return await this.httpClient.optionsAsync(url, null, () => Promise.resolve());
    }
}
