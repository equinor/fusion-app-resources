import BaseApiClient from './BaseApiClient';
export default class OrgClient extends BaseApiClient {
    async getProjectsAsync() {
        const url = this.resourceCollections.org.projects();
        return this.httpClient.getAsync(url);
    }
    async getProjectAsync(projectId, snapshotId) {
        const orgResources = this.resourceCollections.org;
        const url = snapshotId
            ? orgResources.snapshotProject(snapshotId)
            : orgResources.project(projectId);
        return this.httpClient.getAsync(url, {
            headers: {
                'api-version': '2.0',
            },
        });
    }
    async searchProjectsAsync(query, apiVersion) {
        const requestHeader = {
            headers: {
                'api-version': apiVersion ? apiVersion : '1.0',
            },
        };
        const url = this.resourceCollections.org.projectQuery(query);
        return this.httpClient.getAsync(url, requestHeader);
    }
    async newProjectAsync(newProject) {
        const baseUrl = this.resourceCollections.org.projects();
        const url = `${baseUrl}?api-version=2.0`;
        return this.httpClient.postAsync(url, newProject);
    }
    async getPositionsAsync(projectId, expandProperties, snapshotId) {
        const orgResources = this.resourceCollections.org;
        const url = snapshotId
            ? orgResources.snapshotPositions(snapshotId, expandProperties)
            : orgResources.positions(projectId, expandProperties);
        return this.httpClient.getAsync(url, {
            headers: {
                'api-version': '2.0',
            },
        });
    }
    async getPositionAsync(projectId, positionId, snapshotId) {
        const orgResources = this.resourceCollections.org;
        const url = snapshotId
            ? orgResources.snapshotPosition(snapshotId, positionId)
            : orgResources.position(projectId, positionId);
        return this.httpClient.getAsync(url, {
            headers: {
                'api-version': '2.0',
            },
        });
    }
    async updatePositionAsync(projectId, position, edit) {
        const url = this.resourceCollections.org.position(projectId, position.id, false);
        return this.httpClient.putAsync(url, position, {
            headers: {
                'api-version': '2.0',
                'Content-Type': 'application/json',
                'x-pro-edit-mode': edit ? 'true' : 'false',
            },
        });
    }
    async updatePositionPropertyAsync(projectId, positionId, positionProperties, edit) {
        const url = this.resourceCollections.org.position(projectId, positionId, false);
        return this.httpClient.patchAsync(url, positionProperties, {
            headers: {
                'api-version': '2.0',
                'Content-Type': 'application/json',
                'x-pro-edit-mode': edit ? 'true' : 'false',
            },
        });
    }
    async updateInstancePropertyAsync(projectId, positionId, instanceId, instanceProperties, edit) {
        const url = this.resourceCollections.org.instance(projectId, positionId, instanceId);
        return this.httpClient.patchAsync(url, instanceProperties, {
            headers: {
                'api-version': '2.0',
                'Content-Type': 'application/json',
                'x-pro-edit-mode': edit ? 'true' : 'false',
            },
        });
    }
    async publishAsync(projectId, draftId, apiVersion) {
        const url = this.resourceCollections.org.publish(projectId, draftId);
        const requestHeader = {
            headers: {
                'api-version': apiVersion ? apiVersion : '1.0',
            },
        };
        return this.httpClient.postAsync(url, null, requestHeader);
    }
    async deleteDraftAsync(projectId, draftId, apiVersion) {
        const url = this.resourceCollections.org.deleteDraft(projectId, draftId);
        const requestHeader = {
            headers: {
                'api-version': apiVersion ? apiVersion : '1.0',
            },
        };
        return this.httpClient.deleteAsync(url, requestHeader, () => Promise.resolve());
    }
    async getPublishStatusAsync(draftId, apiVersion) {
        const url = this.resourceCollections.org.publishStatus(draftId);
        const requestHeader = {
            headers: {
                'api-version': apiVersion ? apiVersion : '1.0',
            },
        };
        return this.httpClient.getAsync(url, requestHeader);
    }
    async getPositionReportPathAsync(projectId, positionId, date, snapshotId) {
        const orgResources = this.resourceCollections.org;
        const url = snapshotId
            ? orgResources.snapshotReportsTo(snapshotId, positionId, date)
            : orgResources.reportsTo(projectId, positionId, date);
        return this.httpClient.getAsync(url, {
            headers: {
                'api-version': '2.0',
            },
        });
    }
    async getRoleDescriptionAsync(projectId, positionId) {
        const url = this.resourceCollections.org.roleDescription(projectId, positionId);
        return this.httpClient.getAsync(url, null, async (response) => {
            return response.text();
        });
    }
    async getBasePositionRoleDescriptionAsync(basePositionId) {
        const url = this.resourceCollections.org.basePositionRoleDescription(basePositionId);
        return this.httpClient.getAsync(url, null, async (response) => {
            return response.text();
        });
    }
    async getRoleDescriptionV2Async(projectId, positionId, snapshotId) {
        const orgResources = this.resourceCollections.org;
        const url = snapshotId
            ? orgResources.snapshotRoleDescription(snapshotId, positionId)
            : orgResources.roleDescriptionV2(projectId, positionId);
        return this.httpClient.getAsync(url, {
            headers: {
                'api-version': '2.0',
            },
        });
    }
    async updatePersonalTaskDescriptionAsync(projectId, azureUniqueId, description) {
        const url = this.resourceCollections.org.personalTaskDescription(projectId, azureUniqueId);
        return this.httpClient.putAsync(url, () => description, {
            headers: {
                'api-version': '2.0',
                'Content-Type': 'text/plain',
            },
        }, async (response) => {
            return response.text();
        });
    }
    async canEditPersonalTaskDescriptionAsync(projectId, azureUniqueId) {
        const url = this.resourceCollections.org.personalTaskDescription(projectId, azureUniqueId);
        try {
            const response = await this.httpClient.optionsAsync(url, {
                headers: {
                    'api-version': '2.0',
                },
            }, () => Promise.resolve());
            const allowHeader = response.headers.get('Allow');
            if (allowHeader !== null && allowHeader.indexOf('PUT') !== -1) {
                return true;
            }
            return false;
        }
        catch (e) {
            return false;
        }
    }
    async getDisciplineNetworkAsync(projectId, discipline) {
        const url = this.resourceCollections.org.disciplineNetwork(projectId, discipline);
        return this.httpClient.getAsync(url);
    }
    async canEditPosition(projectId, positionId) {
        const url = this.resourceCollections.org.position(projectId, positionId, false);
        try {
            const response = await this.httpClient.optionsAsync(url, {
                headers: {
                    'api-version': '2.0',
                },
            }, () => Promise.resolve());
            const allowHeader = response.headers.get('Allow');
            if (allowHeader !== null && allowHeader.indexOf('PUT') !== -1) {
                return true;
            }
            return false;
        }
        catch (e) {
            return false;
        }
    }
    async getDisciplines() {
        const url = this.resourceCollections.org.basePositions();
        try {
            const res = await this.httpClient.getAsync(url);
            const disciplines = res.data.map((d) => d.discipline);
            const distinct = disciplines.reduce((acc, curr) => {
                if (curr && acc.indexOf(curr) === -1 && curr.trim().length > 0) {
                    acc.push(curr);
                }
                return acc;
            }, []);
            return distinct;
        }
        catch (error) {
            return false;
        }
    }
    async getContractsAsync(projectId) {
        const url = this.resourceCollections.org.getContractsUrl(projectId);
        return this.httpClient.getAsync(url, {
            headers: {
                'api-version': '2.0',
            },
        });
    }
    async getContractPositionsAsync(projectId, contractId) {
        const url = this.resourceCollections.org.getContractPositionsUrl(projectId, contractId);
        return this.httpClient.getAsync(url, {
            headers: {
                'api-version': '2.0',
            },
        });
    }
    async getContractPositionAllowHeaderAsync(projectId, contractId, positionId) {
        const url = this.resourceCollections.org.contractPosition(projectId, contractId, positionId);
        try {
            const response = await this.httpClient.optionsAsync(url, {
                headers: {
                    'api-version': '2.0',
                },
            }, () => Promise.resolve());
            const allowHeader = response.headers.get('Allow');
            return allowHeader || '';
        }
        catch (e) {
            return '';
        }
    }
    async deleteContractPositionAsync(projectId, contractId, positionId) {
        const url = this.resourceCollections.org.contractPosition(projectId, contractId, positionId);
        return await this.httpClient.deleteAsync(url, {
            headers: {
                'api-version': '2.0',
            },
        }, () => Promise.resolve());
    }
    async canReadSnapshotsAsync(projectId) {
        const url = this.resourceCollections.org.snapshots(projectId);
        try {
            const response = await this.httpClient.optionsAsync(url, {
                headers: {
                    'api-version': '2.0',
                },
            }, () => Promise.resolve());
            const allowHeader = response.headers.get('Allow');
            if (allowHeader !== null && allowHeader.toLowerCase().indexOf('get') !== -1) {
                return true;
            }
            return false;
        }
        catch (e) {
            return false;
        }
    }
    async getSnapshotsAsync(projectId) {
        const url = this.resourceCollections.org.snapshots(projectId);
        return await this.httpClient.getAsync(url);
    }
    async getSnapshotAsync(projectId, snapshotId) {
        const url = this.resourceCollections.org.snapshot(projectId, snapshotId);
        return await this.httpClient.getAsync(url);
    }
    async canDeleteSnapshotsAsync(projectId, snapshotId) {
        const url = this.resourceCollections.org.snapshot(projectId, snapshotId);
        try {
            const response = await this.httpClient.optionsAsync(url, {}, () => Promise.resolve());
            const allowHeader = response.headers.get('Allow');
            if (allowHeader !== null && allowHeader.toLowerCase().indexOf('delete') !== -1) {
                return true;
            }
            return false;
        }
        catch (e) {
            return false;
        }
    }
    async deleteSnapShotAsync(projectId, snapshotId) {
        const url = this.resourceCollections.org.snapshot(projectId, snapshotId);
        return await this.httpClient.deleteAsync(url, {}, () => Promise.resolve());
    }
    async createSnapshotAsync(projectId, snapshotRequest) {
        const url = this.resourceCollections.org.snapshots(projectId);
        return await this.httpClient.postAsync(url, snapshotRequest);
    }
    async createTransientSnapshotAsync(projectId, snapshotRequest) {
        const url = this.resourceCollections.org.transientSnapshots(projectId);
        return await this.httpClient.postAsync(url, snapshotRequest);
    }
    async canApproveSnapshotAsync(projectId, snapshotId) {
        const url = this.resourceCollections.org.approveSnapshot(projectId, snapshotId);
        try {
            const response = await this.httpClient.optionsAsync(url, {
                headers: {
                    'api-version': '2.0',
                },
            }, () => Promise.resolve());
            const allowHeader = response.headers.get('Allow');
            if (allowHeader !== null && allowHeader.indexOf('POST') !== -1) {
                return true;
            }
            return false;
        }
        catch (e) {
            return false;
        }
    }
    async approveSnapshotAsync(projectId, snapshotId, approvePayload) {
        const url = this.resourceCollections.org.approveSnapshot(projectId, snapshotId);
        return await this.httpClient.postAsync(url, approvePayload);
    }
    getBaseUrl() {
        return this.serviceResolver.getOrgBaseUrl();
    }
}
