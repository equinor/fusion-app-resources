import Report from './models/report/Report';
import EmbedInfo from './models/report/EmbedInfo';
import EmbedConfig from './models/report/EmbedConfig';
import AccessToken from './models/report/AccessToken';
import ConfigValidation from './models/report/ConfigValidation';
import BaseApiClient from './BaseApiClient';
import { ContextTypes } from './models/context';
export default class ReportClient extends BaseApiClient {
    protected getBaseUrl(): string;
    getReportsAsync(): Promise<import("../HttpClient").HttpResponse<Report[]>>;
    getReportAsync(id: string): Promise<import("../HttpClient").HttpResponse<Report>>;
    getEmbedInfo(reportId: string): Promise<import("../HttpClient").HttpResponse<EmbedInfo>>;
    getAccessToken(reportId: string): Promise<import("../HttpClient").HttpResponse<AccessToken>>;
    getDescription(reportId: string): Promise<import("../HttpClient").HttpResponse<string>>;
    updateDescription(reportId: string, description: string | null): Promise<import("../HttpClient").HttpResponse<string>>;
    getAccessDescription(reportId: string): Promise<import("../HttpClient").HttpResponse<string>>;
    updateAccessDescription(reportId: string, description: string | null): Promise<import("../HttpClient").HttpResponse<string>>;
    getTechnicalDocument(reportId: string): Promise<import("../HttpClient").HttpResponse<string>>;
    getRlsRequirements(reportId: string): Promise<import("../HttpClient").HttpResponse<string>>;
    addReport(report: Report): Promise<import("../HttpClient").HttpResponse<Report>>;
    updateReport(report: Report): Promise<import("../HttpClient").HttpResponse<Report>>;
    updateConfig(reportId: string, embedConfig: EmbedConfig): Promise<import("../HttpClient").HttpResponse<ConfigValidation>>;
    validateConfig(embedConfig: EmbedConfig): Promise<import("../HttpClient").HttpResponse<ConfigValidation>>;
    publishReport(reportId: string): Promise<import("../HttpClient").HttpResponse<string>>;
    unPublishReport(reportId: string): Promise<import("../HttpClient").HttpResponse<string>>;
    deleteReport(reportId: string): Promise<import("../HttpClient").HttpResponse<void>>;
    checkContextAccess(reportId: string, contextExternalId: string, contextType: ContextTypes): Promise<import("../HttpClient").HttpResponse<void>>;
}
