import BaseApiClient from './BaseApiClient';
import { HandoverItem, HandoverMcpkg, HandoverDetails, HandoverNCR, HandoverPunch, HandoverSWCR, HandoverUnsignedAction, HandoverUnsignedTask, HandoverWorkOrder, HandoverQuery, AccumulatedContainer, WorkOrder, WorkOrderMaterial, WorkOrderMccr, Milestone, McPackage, McPunchItem, McWorkOrder, McNcr, OperationItem } from './models/dataProxy';
import { HandoverActions, AccumulatedActions } from '../resourceCollections/DataProxyResourceCollection';
import { HttpResponse } from '../HttpClient';
export { HandoverItem, HandoverMcpkg, HandoverDetails, HandoverNCR, HandoverPunch, HandoverSWCR, HandoverUnsignedAction, HandoverUnsignedTask, HandoverWorkOrder, HandoverQuery, AccumulatedContainer, HandoverActions, AccumulatedActions, };
export default class DataProxyClient extends BaseApiClient {
    protected getBaseUrl(): string;
    apiSignInAsync(): Promise<void>;
    getOperationAsync(context: string, invalidateCache: boolean): Promise<HttpResponse<OperationItem[]>>;
    getHandoverAsync(context: string, invalidateCache: boolean): Promise<HttpResponse<HandoverItem[]>>;
    getHandoverChildrenAsync<TKey extends keyof HandoverActions, T = HandoverActions[TKey]>(context: string, commpkgId: string, action: TKey): Promise<HttpResponse<T[]>>;
    getAccumulatedItemAsync<TKey extends keyof AccumulatedActions, T = AccumulatedActions[TKey]>(siteCode: string, projectIdentifier: string, action: TKey): Promise<HttpResponse<T[]>>;
    getMilestonesAsync(contextId: string): Promise<HttpResponse<Milestone[]>>;
    getWorkOrdersAsync(contextId: string, invalidateCache: boolean): Promise<HttpResponse<WorkOrder[]>>;
    getWorkOrderMaterialsAsync(contextId: string, workOrderId: string): Promise<HttpResponse<WorkOrderMaterial[]>>;
    getWorkOrderMccrAsync(contextId: string, workOrderId: string): Promise<HttpResponse<WorkOrderMccr[]>>;
    getMcPackageAsync(context: string, invalidateCache: boolean): Promise<HttpResponse<McPackage[]>>;
    getMcPunchAsync(contextId: string, workOrderId: string): Promise<HttpResponse<McPunchItem[]>>;
    getMcWorkOrderAsync(contextId: string, workOrderId: string): Promise<HttpResponse<McWorkOrder[]>>;
    getMcNcrAsync(contextId: string, workOrderId: string): Promise<HttpResponse<McNcr[]>>;
}
