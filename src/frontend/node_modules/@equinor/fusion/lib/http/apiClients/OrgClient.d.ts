import BaseApiClient from './BaseApiClient';
import Contract from './models/org/Contract';
import OrgProject, { CreateOrgProject, PositionInstance, PublishDetails, PositionReportPath, RoleDescription, OrgSnapshot, ApproveSnapshotRequest, CreateSnapshotRequest, CreateTransientSnapshotRequest } from './models/org/OrgProject';
import Position from './models/org/Position';
import { HttpResponse } from '../HttpClient';
export default class OrgClient extends BaseApiClient {
    getProjectsAsync(): Promise<HttpResponse<OrgProject[]>>;
    getProjectAsync(projectId: string, snapshotId?: string): Promise<HttpResponse<OrgProject>>;
    searchProjectsAsync(query: string, apiVersion?: string): Promise<HttpResponse<OrgProject[]>>;
    newProjectAsync(newProject: CreateOrgProject): Promise<HttpResponse<OrgProject>>;
    getPositionsAsync(projectId: string, expandProperties?: string[], snapshotId?: string): Promise<HttpResponse<Position[]>>;
    getPositionAsync(projectId: string, positionId: string, snapshotId?: string): Promise<HttpResponse<Position>>;
    updatePositionAsync(projectId: string, position: Position, edit?: boolean): Promise<HttpResponse<Position>>;
    updatePositionPropertyAsync(projectId: string, positionId: string, positionProperties: Partial<Position>, edit?: boolean): Promise<HttpResponse<Position>>;
    updateInstancePropertyAsync(projectId: string, positionId: string, instanceId: string, instanceProperties: Partial<PositionInstance> & {
        id: string;
    }, edit?: boolean): Promise<HttpResponse<PositionInstance>>;
    publishAsync(projectId: string, draftId: string, apiVersion?: string): Promise<HttpResponse<PublishDetails>>;
    deleteDraftAsync(projectId: string, draftId: string, apiVersion?: string): Promise<HttpResponse<void>>;
    getPublishStatusAsync(draftId: string, apiVersion?: string): Promise<HttpResponse<PublishDetails>>;
    getPositionReportPathAsync(projectId: string, positionId: string, date: string, snapshotId?: string): Promise<HttpResponse<PositionReportPath>>;
    getRoleDescriptionAsync(projectId: string, positionId: string): Promise<HttpResponse<string>>;
    getBasePositionRoleDescriptionAsync(basePositionId: string): Promise<HttpResponse<string>>;
    getRoleDescriptionV2Async(projectId: string, positionId: string, snapshotId?: string): Promise<HttpResponse<RoleDescription>>;
    updatePersonalTaskDescriptionAsync(projectId: string, azureUniqueId: string, description: string): Promise<HttpResponse<string>>;
    canEditPersonalTaskDescriptionAsync(projectId: string, azureUniqueId: string): Promise<boolean>;
    getDisciplineNetworkAsync(projectId: string, discipline: string): Promise<HttpResponse<Position[]>>;
    canEditPosition(projectId: string, positionId: string): Promise<boolean>;
    getDisciplines(): Promise<false | string[]>;
    getContractsAsync(projectId: string): Promise<HttpResponse<Contract[]>>;
    getContractPositionsAsync(projectId: string, contractId: string): Promise<HttpResponse<Position[]>>;
    getContractPositionAllowHeaderAsync(projectId: string, contractId: string, positionId: string): Promise<string>;
    deleteContractPositionAsync(projectId: string, contractId: string, positionId: string): Promise<HttpResponse<void>>;
    canReadSnapshotsAsync(projectId: string): Promise<boolean>;
    getSnapshotsAsync(projectId: string): Promise<HttpResponse<OrgSnapshot[]>>;
    getSnapshotAsync(projectId: string, snapshotId: string): Promise<HttpResponse<OrgSnapshot>>;
    canDeleteSnapshotsAsync(projectId: string, snapshotId: string): Promise<boolean>;
    deleteSnapShotAsync(projectId: string, snapshotId: string): Promise<HttpResponse<void>>;
    createSnapshotAsync(projectId: string, snapshotRequest: CreateSnapshotRequest): Promise<HttpResponse<OrgSnapshot>>;
    createTransientSnapshotAsync(projectId: string, snapshotRequest: CreateTransientSnapshotRequest): Promise<HttpResponse<OrgSnapshot>>;
    canApproveSnapshotAsync(projectId: string, snapshotId: string): Promise<boolean>;
    approveSnapshotAsync(projectId: string, snapshotId: string, approvePayload: ApproveSnapshotRequest): Promise<HttpResponse<OrgSnapshot>>;
    protected getBaseUrl(): string;
}
