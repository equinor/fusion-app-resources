import { IHttpClient } from '../HttpClient';
import ResourceCollections from '../resourceCollections';
import { ResponseParser } from '../HttpClient/IHttpClient';
import ServiceResolver from '../resourceCollections/ServiceResolver';
export default abstract class BaseApiClient {
    readonly httpClient: IHttpClient;
    readonly resourceCollections: ResourceCollections;
    readonly serviceResolver: ServiceResolver;
    constructor(httpClient: IHttpClient, resourceCollections: ResourceCollections, serviceResolver: ServiceResolver);
    protected abstract getBaseUrl(): string;
    getAsync<TResponse>(path: string, init?: RequestInit, responseParser?: ResponseParser<TResponse>): Promise<import("../HttpClient").HttpResponse<TResponse>>;
    postAsync<TBody, TResponse>(path: string, body: TBody, init?: RequestInit, responseParser?: ResponseParser<TResponse>): Promise<import("../HttpClient").HttpResponse<TResponse>>;
    putAsync<TBody, TResponse>(path: string, body: TBody, init?: RequestInit, responseParser?: ResponseParser<TResponse>): Promise<import("../HttpClient").HttpResponse<TResponse>>;
    patchAsync<TBody, TResponse>(path: string, body: TBody, init?: RequestInit, responseParser?: ResponseParser<TResponse>): Promise<import("../HttpClient").HttpResponse<TResponse>>;
    deleteAsync<TResponse>(path: string, init?: RequestInit, responseParser?: ResponseParser<TResponse>): Promise<import("../HttpClient").HttpResponse<TResponse>>;
}
