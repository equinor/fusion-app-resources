/**
 * Represents a single page in Pagination
 */
export declare type Page = {
    index: number;
    value: string;
};
/** Represents a pagination range */
export declare type PaginationRange = {
    from: number;
    to: number;
};
/** Represents everything needed to apply and display pagination */
export declare type Pagination = {
    totalCount: number;
    perPage: number;
    pageCount: number;
    pages: Page[];
    head: Page[];
    center: Page[];
    tail: Page[];
    currentPage: Page;
    nextPage: Page | null;
    prevPage: Page | null;
    range: PaginationRange;
};
/**
 * Apply a Pagination object to a set of data
 * @param data The data to apply the pagination to
 * @param pagination The pagination
 */
export declare const applyPagination: <T>(data: T[], { perPage, currentPage }: Pagination) => T[];
/**
 * Create a Pagination object to apply and display pagination
 * @param totalCount Total number of items to be paginated
 * @param perPage How many items per page do you want?
 * @param currentPageIndex What's the current page index?
 * @param padding How much padding do you want in the pagination buttons?
 */
export declare const createPagination: (totalCount: number, perPage: number, currentPageIndex?: number, padding?: number) => Pagination;
/** The result of usePagination */
export declare type PaginationHook<T> = {
    pagination: Pagination;
    pagedData: T[];
    setCurrentPage: (index: number, perPage: number) => void;
};
/**
 * Pagination hook that creates and applies pagination to a given data set.
 * Returns the paged data, a function to set the current page
 * and the Pagination object that can be used to display pagination buttons
 * @param data The data to be paginated
 * @param initialPerPage Initial number of items per page
 * @param initialCurrentPageIndex Initial current page index
 * @param padding How much padding do you want in the pagination buttons?
 */
export declare const usePagination: <T>(data: T[], initialPerPage?: number, initialCurrentPageIndex?: number, padding?: number) => PaginationHook<T>;
/** Represents the result of a data set that's already paged. E.g. from the server */
export declare type PagedResult<T> = {
    items: T[];
    totalCount: number;
};
/** The result of usePaginationAsync */
export declare type AsyncPaginationHook<T> = PaginationHook<T> & {
    isFetching: boolean;
    error: Error | null;
};
/**
 * Pagination hook that creates pagination and passes that along
 * to an async function that applies the pagination (e.g. sends a fetch-request to an API somewhere.)
 * Returns the paged data, a function to set the current page, whether it's currently fetching or not,
 * whether any errors occured and the Pagination object that can be used to display pagination buttons
 * @param applyAsync The async function to apply the pagination to a data set
 * @param initialPerPage Initial number of items per page
 * @param initialCurrentPageIndex Initial current page index
 * @param padding How much padding do you want in the pagination buttons?
 * @param deps Other external dependencies that might trigger the pagination (e.g. sorting changed)
 */
export declare const useAsyncPagination: <T>(applyAsync: (pagination: Pagination) => Promise<PagedResult<T>>, initialPerPage: number, initialCurrentPageIndex?: number, padding?: number, deps?: readonly any[]) => AsyncPaginationHook<T>;
