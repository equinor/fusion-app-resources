import DistributedState from './DistributedState';
import { IEventHub } from './EventHub';
import ApiClients from '../http/apiClients';
declare type FeatureLogEntryTransformer = (entry: FeatureLogEntry) => FeatureLogEntry;
declare type FeatureContext = {
    id: string;
    name: string;
};
export declare type FeatureLogEntry = {
    appKey?: string | null;
    contextId?: string | null;
    contextName?: string | null;
    feature: string;
    featureVersion: string;
    payload?: any;
    metadata: {
        [key: string]: any;
    };
    dateTimeUtc: Date;
    url: string | null;
};
export default class FeatureLogger {
    protected apiClients: ApiClients;
    protected sessionId: string;
    protected logEntries: FeatureLogEntry[];
    protected currentAppKey: DistributedState<string | null>;
    protected currentContext: DistributedState<FeatureContext | null>;
    protected transformers: DistributedState<FeatureLogEntryTransformer[]>;
    constructor(apiClients: ApiClients, eventHub: IEventHub);
    log(feature: string, featureVersion: string, payload?: any): void;
    addTransformer(transformer: FeatureLogEntryTransformer): void;
    setCurrentApp(appKey: string | null): void;
    setCurrentContext(id: string | null, name: string | null): void;
    private timer;
    protected scheduleBatch(): void;
    protected isSendingBatch: boolean;
    protected sendBatchAsync(): Promise<void>;
    protected transformLogEntry(entry: FeatureLogEntry): FeatureLogEntry;
    protected addAppToLogEntry(entry: FeatureLogEntry): {
        appKey: string | null;
        contextId?: string | null | undefined;
        contextName?: string | null | undefined;
        feature: string;
        featureVersion: string;
        payload?: any;
        metadata: {
            [key: string]: any;
        };
        dateTimeUtc: Date;
        url: string | null;
    };
    protected addContextToLogEntry(entry: FeatureLogEntry): {
        contextId: string | undefined;
        contextName: string | undefined;
        appKey?: string | null | undefined;
        feature: string;
        featureVersion: string;
        payload?: any;
        metadata: {
            [key: string]: any;
        };
        dateTimeUtc: Date;
        url: string | null;
    };
    protected addScreenToLogEntry(entry: FeatureLogEntry): FeatureLogEntry;
}
export declare const useFeatureLogger: () => FeatureLogger;
export {};
