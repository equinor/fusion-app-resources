import { ApplicationInsights, } from '@microsoft/applicationinsights-web';
import { useFusionContext } from '../core/FusionContext';
import { useEffect } from 'react';
export default class TelemetryLogger {
    constructor(instrumentationKey, authContainer) {
        this.isInitialized = false;
        this.initializers = [];
        this.telemetryInitializer = (item) => {
            for (const initializer of this.initializers) {
                if (initializer(item) === false) {
                    return false;
                }
            }
            // Run default initializers last to prevent other initializers to override cloud role etc.
            this.runDefaultInitializers(item);
        };
        this.internalAppInsights = new ApplicationInsights({
            config: {
                instrumentationKey,
            },
        });
        this.initializeAppInsights(instrumentationKey, authContainer);
    }
    registerInitializer(initializer) {
        this.initializers = [...this.initializers, initializer];
        return () => {
            this.initializers = this.initializers.filter((i) => i !== initializer);
        };
    }
    trackEvent(event) {
        if (!this.isInitialized) {
            return;
        }
        this.internalAppInsights.trackEvent(event);
    }
    trackException(exception) {
        if (!this.isInitialized) {
            return;
        }
        this.internalAppInsights.trackException(exception);
    }
    trackPageView(pageView) {
        if (!this.isInitialized) {
            return;
        }
        this.internalAppInsights.trackPageView(pageView);
    }
    trackTrace(trace) {
        if (!this.isInitialized) {
            return;
        }
        this.internalAppInsights.trackTrace(trace);
    }
    trackMetric(metrics) {
        if (!this.isInitialized) {
            return;
        }
        this.internalAppInsights.trackMetric(metrics);
    }
    trackDependency(dependency) {
        if (!this.isInitialized) {
            return;
        }
        this.internalAppInsights.trackDependencyData(dependency);
    }
    initializeAppInsights(instrumentationKey, authContainer) {
        if (!instrumentationKey) {
            return;
        }
        this.internalAppInsights.loadAppInsights();
        this.internalAppInsights.addTelemetryInitializer(this.telemetryInitializer);
        this.setAuthUserContextAsync(authContainer);
        this.trackPageView();
        this.isInitialized = true;
    }
    async setAuthUserContextAsync(authContainer) {
        const currentUser = await authContainer.getCachedUserAsync();
        if (currentUser) {
            this.internalAppInsights.setAuthenticatedUserContext(currentUser.id);
        }
    }
    runDefaultInitializers(item) {
        this.addCloudRole(item);
    }
    addCloudRole(item) {
        item.tags = item.tags || [];
        item.tags['ai.cloud.role'] = 'Fusion Frontend';
        item.tags['ai.cloud.roleInstance'] = 'Portal';
    }
}
export const useTelemetryLogger = () => {
    const { logging: { telemetry }, } = useFusionContext();
    return telemetry;
};
export const useTelemetryInitializer = (initializer) => {
    const telemetryLogger = useTelemetryLogger();
    useEffect(() => {
        return telemetryLogger.registerInitializer(initializer);
    }, [initializer]);
};
