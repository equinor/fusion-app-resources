import JSON from '../JSON';
import DistributedState from '../DistributedState';
import EventEmitter from '../EventEmitter';
export default class LocalStorageProvider extends EventEmitter {
    constructor(baseKey, eventHub, defaultValue) {
        super();
        this.baseKey = baseKey;
        const cachedJson = localStorage.getItem(this.baseKey);
        const cachedValue = cachedJson ? JSON.parse(cachedJson) : null;
        this.localCache = new DistributedState(`LocalStorageProvider.${baseKey}`, cachedValue, eventHub);
        if (!cachedValue && defaultValue) {
            this.localCache.state = defaultValue;
        }
        this.localCache.on('change', (value) => {
            this.emit('change', value);
        });
    }
    async getItemAsync(key) {
        const localCache = await this.toObjectAsync();
        const value = localCache[key];
        if (!value) {
            return null;
        }
        return value;
    }
    async setItemAsync(key, value) {
        const localCache = await this.toObjectAsync();
        this.localCache.state = Object.assign(Object.assign({}, localCache), { [key]: value });
        await this.persistAsync();
    }
    async removeItemAsync(key) {
        const localCache = await this.toObjectAsync();
        delete localCache[key];
        this.localCache.state = Object.assign({}, localCache);
        await this.persistAsync();
    }
    async clearAsync() {
        localStorage.removeItem(this.baseKey);
        this.localCache.state = {};
    }
    async toObjectAsync() {
        if (this.localCache.state === null) {
            const cachedJson = localStorage.getItem(this.baseKey);
            const cachedValue = cachedJson ? JSON.parse(cachedJson) : {};
            this.localCache.state = cachedValue;
        }
        return this.localCache.state;
    }
    toObject() {
        return this.localCache.state;
    }
    async persistAsync() {
        const json = JSON.stringify(await this.toObjectAsync());
        localStorage.setItem(this.baseKey, json);
    }
}
