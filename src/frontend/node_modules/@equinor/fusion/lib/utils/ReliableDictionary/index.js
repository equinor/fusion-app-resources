import EventEmitter from '../EventEmitter';
export { default as LocalStorageProvider } from './LocalStorageProvider';
export { default as ReadOnlyReliableDictionary } from './ReadonlyReliableDictionary';
export default class ReliableDictionary extends EventEmitter {
    constructor(provider) {
        super();
        this.provider = provider;
        this.provider.on('change', (value) => {
            this.emit('change', value);
        });
    }
    async getAsync(key) {
        return (await this.provider.getItemAsync(key.toString()));
    }
    async setAsync(key, value) {
        await this.provider.setItemAsync(key.toString(), value);
        await this.emitChangesAsync();
    }
    async removeAsync(key) {
        await this.provider.removeItemAsync(key.toString());
        await this.emitChangesAsync();
    }
    async clearAsync() {
        await this.provider.clearAsync();
        await this.emitChangesAsync();
    }
    async toObjectAsync() {
        const value = await this.provider.toObjectAsync();
        return value;
    }
    toObject() {
        return this.provider.toObject();
    }
    async emitChangesAsync() {
        const dictionary = await this.toObjectAsync();
        this.emit('change', dictionary);
    }
}
