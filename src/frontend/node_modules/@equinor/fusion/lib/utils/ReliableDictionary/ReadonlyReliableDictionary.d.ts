import IReliableDictionaryStorageProvider, { ReadonlyDictionary } from './IReliableDictionaryStorageProvider';
export { default as LocalStorageProvider } from './LocalStorageProvider';
export interface IReadonlyReliableDictionary<TCacheType> {
    getAsync<TKey extends keyof TCacheType, T>(key: TKey): Promise<T | null>;
    toObjectAsync(): Promise<TCacheType>;
    toObject(): TCacheType | null;
}
export default abstract class ReadonlyReliableDictionary<TCacheType = ReadonlyDictionary> {
    protected provider: IReliableDictionaryStorageProvider;
    constructor(provider: IReliableDictionaryStorageProvider);
    getAsync<TKey extends keyof TCacheType, T>(key: TKey): Promise<T | null>;
    toObjectAsync(): Promise<TCacheType>;
    protected setAsync<TKey extends keyof TCacheType, T = TCacheType[TKey]>(key: TKey, value: T): Promise<void>;
    protected removeAsync<TKey extends keyof TCacheType>(key: TKey): Promise<void>;
    protected clearAsync(): Promise<void>;
}
