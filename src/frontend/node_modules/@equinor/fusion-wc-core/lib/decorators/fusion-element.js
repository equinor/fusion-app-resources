const legacyCustomElement = (tagName, clazz) => {
    window.customElements.define(tagName, clazz);
    return clazz;
};
const standardCustomElement = (tagName, descriptor) => {
    const { kind, elements } = descriptor;
    return {
        kind,
        elements,
        // This callback is called once the class is otherwise fully defined
        finisher(clazz) {
            window.customElements.define(tagName, clazz);
        },
    };
};
export const fusionElement = (tagName) => (classOrDescriptor) => {
    if (!window.customElements.get(tagName)) {
        return typeof classOrDescriptor === 'function'
            ? legacyCustomElement(tagName, classOrDescriptor)
            : standardCustomElement(tagName, classOrDescriptor);
    }
    else {
        console.warn(`${tagName} has been defined twice`);
    }
};
export default fusionElement;
//# sourceMappingURL=fusion-element.js.map