import { OrgNode, OrgChartItemProps, BreadCrumb } from './orgChartTypes';
import { FC, Context, Dispatch } from 'react';
declare type Action<T> = {
    type: 'UPDATE_SIZE';
    width?: number;
    height?: number;
} | {
    type: 'UPDATE_CENTER';
    x?: number;
    y?: number;
} | {
    type: 'UPDATE_CARD_SIZE';
    width?: number;
    height?: number;
    margin?: number;
    initialWidth?: number;
} | {
    type: 'UPDATE_ROW_MARGIN';
    margin: number;
} | {
    type: 'UPDATE_NODES';
    nodes: OrgNode<T>[];
} | {
    type: 'UPDATE_COMPONENTS';
    component?: FC<OrgChartItemProps<T>>;
    breadCrumbComponent?: FC<BreadCrumb>;
} | {
    type: 'UPDATE_ASIDE_ROWS';
    rows: number;
} | {
    type: 'UPDATE_CHILDREN_ROWS';
    rows: number;
} | {
    type: 'UPDATE_POSITION';
    node: OrgNode<T>;
    x: number;
    y: number;
} | {
    type: 'UPDATE_LABELS';
    childrenLabel?: string;
    asideLabel?: string;
} | {
    type: 'UPDATE_BREADCRUMBS';
    breadcrumbs: BreadCrumb[] | null;
} | {
    type: 'UPDATE_BREADCRUMBS_SIZE';
    height?: number;
    width?: number;
    margin?: number;
} | {
    type: 'UPDATE_NUMBER_OF_CARDS_PER_ROW';
    numberOfCardsPerRow: number;
} | {
    type: 'UPDATE_ADDITIONAL_ROW_HEIGHT';
    additionalChildRowHeight?: number;
    additionalAsideRowHeight?: number;
    additionalRootRowHeight?: number;
};
export declare type OrgChartContextType<T> = {
    width: number;
    height: number;
    centerX: number;
    centerY: number;
    cardWidth: number;
    cardHeight: number;
    cardMargin: number;
    initialCardWidth: number;
    rowMargin: number;
    allNodes: OrgNode<T>[];
    component: FC<OrgChartItemProps<T>> | null;
    asideRows: number;
    childrenRows: number;
    childrenLabel: string | null;
    asideLabel: string | null;
    breadCrumbs: BreadCrumb[] | null;
    breadCrumbComponent: FC<BreadCrumb> | null;
    numberOfCardsPerRow: number;
    breadCrumbWidth: number;
    breadCrumbHeight: number;
    breadCrumbMargin: number;
    additionalChildRowHeight: number;
    additionalAsideRowHeight: number;
    additionalRootRowHeight: number;
};
export declare type OrgChartContextReducer<T> = {
    state: OrgChartContextType<T>;
    dispatch: Dispatch<Action<T>>;
};
export declare const OrgChartContext: Context<OrgChartContextReducer<any>>;
export declare function OrgChartContextProvider<T>({ children }: any): JSX.Element;
export {};
