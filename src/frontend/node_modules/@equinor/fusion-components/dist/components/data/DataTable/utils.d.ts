import { DataItemPropertyAccessor, DataTableColumn, DataItemBooleanAccessor } from './dataTableTypes';
export declare const getString: <T>(item: T, accessor: DataItemPropertyAccessor<T>) => string;
export declare const getBoolean: <T>(item: T, accessor: DataItemBooleanAccessor<T>) => boolean;
export declare const getCellContent: <T>(item: T, column: DataTableColumn<T>, rowIndex: number) => React.ReactElement | string;
export declare const generateColumnTemplate: <T>(columns: DataTableColumn<T>[]) => string;
export declare const generateRowTemplate: <T>(rows: T[], expandedRows: T[], skeletonRows: number) => string;
/**
 * Calculates which columns can fit (and be visible) in a table.
 * It works by continuously checking if the current table is to wide for its parent.
 * @param columns All columns
 * @param ref A ref to the table wrapper
 */
export declare const useVisibleColumns: <T>(columns: DataTableColumn<T>[], ref: React.RefObject<HTMLDivElement>, deps: any[]) => {
    visibleColumns: DataTableColumn<T>[];
    collapsedColumns: DataTableColumn<T>[];
};
