import FilterTypes from './filterTypes';
import Filter from './components/Filter';
export declare type FilterTerm = {
    key: string;
    value: string | string[];
};
declare type Collapsible = {
    isCollapsible?: boolean;
    isCollapsed?: boolean;
};
export declare type Filter<T> = Collapsible & {
    key: string;
    title: string;
    isVisibleWhenPaneIsCollapsed?: boolean;
    type: FilterTypes;
    getValue: (item: T) => string | string[];
    options?: any;
};
export declare type FilterSection<T> = Collapsible & {
    key: string;
    title: string;
    filters: Filter<T>[];
};
export declare type FilterOptions<T> = {
    filters?: Filter<T>[];
    terms: FilterTerm[];
    sectionDefinitions: FilterSection<T>[];
};
export declare type OnFilterChangeHandler<T> = (data: T[], terms: FilterTerm[]) => void;
declare const applyFilters: <T>(data: T[], options: FilterOptions<T>) => Promise<T[]>;
export declare type FilterAndNotify<T> = {
    filteredData: T[];
    sectionDefinitions: FilterSection<T>[];
    filters?: Filter<T>[];
    terms: FilterTerm[];
};
export declare const filterAndNotify: <T>({ filteredData, sectionDefinitions, filters, terms }: FilterAndNotify<T>, onChange: OnFilterChangeHandler<T>) => Promise<void>;
export declare const mergeTerms: <T>(terms: FilterTerm[], filter: Filter<T>, newTerm: FilterTerm) => FilterTerm[];
export default applyFilters;
