import { FC, RefObject, DetailedHTMLFactory, DetailedHTMLProps, HTMLAttributes, PropsWithChildren } from 'react';
import { OverlayAnchorElement, OverlayAnchorElementTag, OverlayAnchorElementProps } from '../../../../customElements/components/overlay/anchor';
export interface AppGuideAnchorRef<R extends HTMLElement> {
    /**
     * unique key for the app (within its scope)
     */
    id: string;
    /**
     * scope of the anchor, sub-scopes are divided by `|`
     */
    scope: string;
    /**
     * amount of padding added to the calculation of element bounds
     */
    padding?: number;
    /**
     * reference to the element [HTMLElement] which displays the anchor
     */
    ref: RefObject<R>;
}
/**
 * @see useAnchorRef
 *
 * Creates and ref for [useAnchorRef]
 *
 * @param anchor anchor props
 * @returns [ useRef<R>]
 */
export declare const useAnchor: <R extends HTMLElement>(anchor: Omit<AppGuideAnchorRef<R>, "ref">) => import("react").MutableRefObject<R>;
/**
 *
 * Hook for binding an element to a anchor.
 * When the element attaches to the dom an event is fired for registering the element to the overlay.
 * The event contains a callback for disconnecting from the over, which is called on un-mount
 * The event also contain a callback for calculating the bounds of the element and applies provided padding.
 *
 * The element must be within a [ApplicationGuidanceWrapper]
 *
 * @param anchor [AppGuideAnchorRef]
 * @returns [ useRef<R>]
 */
export declare const useAnchorRef: <R extends HTMLElement>(anchor: AppGuideAnchorRef<R>) => void;
export declare type ApplicationGuidanceAnchorProps = PropsWithChildren<Omit<OverlayAnchorElementProps, 'bounds'> & DetailedHTMLProps<HTMLAttributes<OverlayAnchorElement>, OverlayAnchorElement>>;
export declare const ApplicationGuidanceAnchor: FC<ApplicationGuidanceAnchorProps>;
declare global {
    namespace JSX {
        interface ReactHTML {
            [OverlayAnchorElementTag]: DetailedHTMLFactory<ApplicationGuidanceAnchorProps, OverlayAnchorElement>;
        }
        interface IntrinsicElements {
            [OverlayAnchorElementTag]: DetailedHTMLProps<ApplicationGuidanceAnchorProps, OverlayAnchorElement>;
        }
    }
}
export default ApplicationGuidanceAnchor;
