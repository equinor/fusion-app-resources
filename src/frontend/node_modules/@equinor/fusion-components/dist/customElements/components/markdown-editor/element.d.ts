import { LitElement, PropertyValues } from '../base';
import { EditorState, Transaction } from 'prosemirror-state';
import { EditorView } from 'prosemirror-view';
import { MdMenuItemType } from './menuItems';
export interface MarkdownEditorElementProps {
    menuItems?: Array<MdMenuItemType>;
}
/**
 * Element for editing markdown.
 *
 * @example
 *
 * ```html
 * <fusion-markdown-editor>**some** markdown *text*</fusion-markdown-editor>
 * ```
 *
 * ```ts
 * const md = '#my heading';
 * html`<fusion-markdown-editor .value="md" @change=${console.log}></fusion-markdown-editor>`
 * ```
 *
 */
export declare class MarkdownEditorElement extends LitElement implements MarkdownEditorElementProps {
    static styles: import("lit-element/lib/css-tag").CSSResult[];
    menuItems: Array<MdMenuItemType>;
    value: string;
    protected view: EditorView;
    editor: Promise<HTMLDivElement>;
    menu: Promise<HTMLDivElement>;
    protected _value: string;
    /**
     * update editor state with new markdown
     * @todo move to function for setState and create a clearState
     */
    set markdown(value: string);
    /**
     * get markdown from the current state of the editor
     */
    get markdown(): string;
    get state(): EditorState<any>;
    firstUpdated(props: PropertyValues): void;
    protected updated(props: PropertyValues): void;
    /**
     * create editor when element connects to dom
     */
    connectedCallback(): void;
    /**
     * teardown editor when element disconnects from dom
     */
    disconnectedCallback(): void;
    private initializeEditor;
    protected createEditorState(): Promise<EditorState<any>>;
    protected createEditorView(state: EditorState): Promise<EditorView<any>>;
    /**
     *  handle editor transitions
     */
    protected handleTransaction(tr: Transaction): void;
    /**
     * this should actually only be handle on blur
     * throttle incase some one two-way binds this component
     * cache the current markdown, to compare with incoming values
     *
     * @todo this value might need to be increased
     */
    protected handleChange(tr: Transaction): void;
    protected render(): import("lit-html/lib/template-result").TemplateResult;
}
declare global {
    interface HTMLElementTagNameMap {
        'fusion-markdown-editor': MarkdownEditorElement;
    }
}
export default MarkdownEditorElement;
