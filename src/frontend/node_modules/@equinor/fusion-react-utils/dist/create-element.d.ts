/// <reference types="react" />
declare type ComponentAttributes<T = HTMLHtmlElement> = Omit<React.HTMLAttributes<T>, 'children'>;
declare type Ctor<T> = {
    new (): T;
};
/**
 * Wraps a custom element as a React Component
 *
 * @param elementClass HTMLElement - Custom element to wrap
 * @param tag string - tag name which the element uses in DOM
 */
export declare const createComponent: <E extends HTMLElement, P extends Record<string, unknown>>(elementClass: Ctor<E>, tag: string, options?: {
    events?: Record<string, string> | undefined;
    functions?: Set<keyof E> | undefined;
    displayName?: string | undefined;
}) => import("react").ForwardRefExoticComponent<import("react").PropsWithoutRef<ComponentAttributes<E> & P> & import("react").RefAttributes<E>>;
export default createComponent;
//# sourceMappingURL=create-element.d.ts.map