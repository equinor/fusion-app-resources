import { createElement, forwardRef } from 'react';
import { extractElementProps, useElementEvents, useElementProps, useForwardRef } from './hooks';
const translateReactAttribute = (k) => {
    switch (k) {
        /**
         * React does *not* handle `className` for custom elements
         * so coerce it to `class` so it's handled correctly.
         */
        case 'className':
            return 'class';
    }
    return k;
};
/**
 * Wraps a custom element as a React Component
 *
 * @param elementClass HTMLElement - Custom element to wrap
 * @param tag string - tag name which the element uses in DOM
 */
export const createComponent = (elementClass, tag, options = {}) => {
    const { events = {}, functions = new Set(), displayName = elementClass.name } = options;
    /** extract all properties and combine with exposed functions */
    const elementPropsNames = extractElementProps(elementClass);
    for (const fn of functions.values()) {
        elementPropsNames.add(fn);
    }
    /** element native props which should be handled programmatically */
    const nativePropsName = new Set([...elementPropsNames, ...Object.keys(events)]);
    const component = forwardRef((props, __ref) => {
        const ref = useForwardRef(__ref);
        /** bind native properties and function */
        useElementProps(ref, props, elementPropsNames);
        /** bind custom events */
        useElementEvents(ref, props, events);
        /** properties which React should handle */
        const reactProps = Object.entries(props || {})
            .filter(([k]) => !nativePropsName.has(k))
            .reduce((c, [k, v]) => Object.assign(c, { [translateReactAttribute(k)]: v }), {});
        return createElement(tag, { ...reactProps, ref });
    });
    component.displayName = displayName;
    return component;
};
export default createComponent;
//# sourceMappingURL=create-element.js.map