/// <reference types="react" />
declare type Constructor<T> = {
    new (): T;
};
/**
 * Extract property names of `custom element`
 * NOTE: does not extract events and functions
 */
export declare const extractElementProps: <E extends HTMLElement>(elementClass: Constructor<E>) => Set<keyof E>;
/**
 * React will try to `toString` all arguments that are provided.
 * This hook will set the property/function to the referenced element programmatically.
 */
export declare const useElementProps: <E extends HTMLElement>(ref: import("react").RefObject<E | null>, props?: Partial<Record<string, any>> | undefined, propMap?: Set<keyof E> | undefined) => void;
export {};
//# sourceMappingURL=useElementProps.d.ts.map