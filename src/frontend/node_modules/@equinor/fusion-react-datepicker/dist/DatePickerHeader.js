import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { forwardRef } from 'react';
import { makeStyles, createStyles, clsx } from '@equinor/fusion-react-styles';
import { format, lastDayOfMonth } from 'date-fns';
import DatePicker from 'react-datepicker';
import Icon from './Icon';
import { arrow_back, arrow_drop_down, arrow_forward } from '@equinor/eds-icons';
const defaultStyleProps = {
    spacing: 'small',
};
const useStyles = makeStyles((theme) => createStyles({
    clickable: {
        '&:hover': {
            cursor: 'pointer',
            color: theme.colors.interactive.primary__hover.value.hex,
        },
    },
    arrow: {
        color: theme.colors.interactive.primary__resting.value.hex,
    },
    container: Object.assign(Object.assign({}, theme.spacing.comfortable.medium.style), { display: 'flex', alignItems: 'center', borderBottom: `1px solid ${theme.colors.ui.background__medium.value.hex}` }),
    disabled: {
        color: theme.colors.interactive.disabled__text.value.hex,
    },
    monthHeader: {
        flex: 1,
    },
    monthHeaderInput: {
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center',
    },
    monthHeaderInputText: Object.assign(Object.assign({}, theme.typography.navigation.menu_title.style), { color: 'currentColor', userSelect: 'none', lineHeight: '1.25em' }),
    yearHeader: Object.assign(Object.assign({}, theme.typography.navigation.menu_title.style), { flex: 1, textAlign: 'center', userSelect: 'none', lineHeight: '1.25em' }),
}), { name: 'fusion-datepicker-header' });
const MonthHeaderInput = forwardRef(({ onClick, value }, ref) => {
    const classes = useStyles(defaultStyleProps);
    return (_jsxs("div", Object.assign({ className: classes.monthHeaderInput, onClick: onClick }, { children: [_jsx("span", Object.assign({ className: classes.monthHeaderInputText, ref: ref }, { children: value }), void 0),
            _jsx(Icon, { className: classes.arrow, icon: arrow_drop_down }, void 0)] }), void 0));
});
MonthHeaderInput.displayName = 'MonthHeaderInput';
export const FusionDatePickerHeader = (props) => {
    const { changeMonth, changeYear, date, decreaseMonth, decreaseYear, increaseMonth, increaseYear, nextMonthButtonDisabled, nextYearButtonDisabled, prevMonthButtonDisabled, prevYearButtonDisabled, type, maxDate, minDate, } = props;
    const classes = useStyles(defaultStyleProps);
    const showYearPicker = type == 'month' || type === 'year';
    return (_jsxs("div", Object.assign({ className: classes.container }, { children: [_jsx(Icon, { icon: arrow_back, onClick: showYearPicker
                    ? prevYearButtonDisabled
                        ? undefined
                        : decreaseYear
                    : prevMonthButtonDisabled
                        ? undefined
                        : decreaseMonth, className: (showYearPicker && prevYearButtonDisabled) || prevMonthButtonDisabled
                    ? classes.disabled
                    : clsx(classes.clickable, classes.arrow) }, void 0),
            showYearPicker ? (_jsx("span", Object.assign({ className: classes.yearHeader }, { children: format(date, 'yyyy') }), void 0)) : (_jsx(DatePicker, { customInput: _jsx(MonthHeaderInput, {}, void 0), dateFormat: "MMMM yyyy", maxDate: maxDate ? lastDayOfMonth(maxDate) : undefined, minDate: minDate ? new Date(minDate.getFullYear(), minDate.getMonth()) : undefined, onChange: (d) => {
                    const day = maxDate && (maxDate === null || maxDate === void 0 ? void 0 : maxDate.getDate()) < date.getDate() ? maxDate.getDate() : date.getDate();
                    const month = new Date(d.getFullYear(), d.getMonth(), day);
                    changeYear(month.getFullYear());
                    changeMonth(month.getMonth());
                }, renderCustomHeader: (props) => {
                    return _jsx(FusionDatePickerHeader, Object.assign({}, props, { type: "month", maxDate: maxDate, minDate: minDate }), void 0);
                }, selected: date, showMonthYearPicker: true, wrapperClassName: clsx(classes.monthHeader, classes.clickable) }, void 0)),
            _jsx(Icon, { icon: arrow_forward, onClick: showYearPicker
                    ? nextYearButtonDisabled
                        ? undefined
                        : increaseYear
                    : nextMonthButtonDisabled
                        ? undefined
                        : increaseMonth, className: (showYearPicker && nextYearButtonDisabled) || nextMonthButtonDisabled
                    ? classes.disabled
                    : clsx(classes.clickable, classes.arrow) }, void 0)] }), void 0));
};
export default FusionDatePickerHeader;
//# sourceMappingURL=DatePickerHeader.js.map