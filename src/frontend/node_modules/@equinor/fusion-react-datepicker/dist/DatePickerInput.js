var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { forwardRef } from 'react';
import { makeStyles, createStyles } from '@equinor/fusion-react-styles';
import Icon from './Icon';
import { calendar, clear } from '@equinor/eds-icons';
const defaultStyleProps = {
    spacing: 'small',
};
const useStyles = makeStyles((theme) => createStyles({
    container: ({ spacing, disabled }) => (Object.assign(Object.assign({}, theme.spacing.comfortable[spacing].style), { backgroundColor: theme.colors.ui.background__light.value.hex, borderBottom: disabled ? 'none' : `1px solid ${theme.colors.text.static_icons__tertiary.value.hex}`, '&:focus-within': {
            outline: `2px solid ${theme.colors.interactive.focus.value.hex}`,
            borderBottom: '1px solid transparent',
        }, display: 'flex', justifyContent: 'center', alignItems: 'center' })),
    error: {
        color: 'red',
    },
    input: ({ hasValue, isError }) => (Object.assign(Object.assign({}, theme.typography.input.text.style), { color: isError
            ? theme.colors.interactive.danger__text.value.hex
            : hasValue
                ? theme.colors.text.static_icons__default.value.hex
                : theme.colors.text.static_icons__tertiary.value.hex, border: 'none', background: 'none', width: '100%', '&:focus': {
            outline: `none`,
        }, '&:disabled': {
            color: theme.colors.interactive.disabled__text.value.hex,
        } })),
    icon: Object.assign(Object.assign({}, theme.typography.navigation.menu_title.style), { color: theme.colors.text.static_icons__tertiary.value.hex, '&:hover': {
            cursor: 'pointer',
            color: theme.colors.interactive.primary__hover.value.hex,
        } }),
}), { name: 'fusion-datepicker-input' });
export const FusionDatePickerInput = forwardRef((props, ref) => {
    const { isClearable, onClear } = props, rest = __rest(props, ["isClearable", "onClear"]);
    const classes = useStyles(Object.assign(Object.assign({}, defaultStyleProps), { disabled: props.disabled, hasValue: props.value ? true : false }));
    return (_jsxs("div", Object.assign({ className: classes.container }, { children: [_jsx("input", Object.assign({}, rest, { className: classes.input, ref: ref }), void 0),
            isClearable && props.value ? (_jsx(Icon, { icon: clear, className: classes.icon, onClick: () => {
                    onClear();
                } }, void 0)) : (_jsx(Icon, { icon: calendar, className: classes.icon, onClick: props.onClick }, void 0))] }), void 0));
});
export default FusionDatePickerInput;
//# sourceMappingURL=DatePickerInput.js.map