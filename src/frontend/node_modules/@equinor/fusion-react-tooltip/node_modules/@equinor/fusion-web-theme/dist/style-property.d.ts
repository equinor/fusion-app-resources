import type { Properties } from 'csstype';
export interface CSSProperties extends Properties {
    [k: string]: unknown | CSSProperties | StyleProperty;
}
export declare type StyleAttribute = {
    attribute: string;
    value?: string | number;
    base?: boolean;
};
export declare abstract class StyleProperty<T = any, A extends string = string> {
    readonly name: string;
    readonly value: T;
    static makeCssVar(element: string, module: string): string;
    static makeCss(obj: CSSProperties): string;
    static makeVariable({ attribute, value }: StyleAttribute): string;
    static extractVariables<T extends StyleProperty>(styles: Record<string, T>): string[];
    constructor(name: string, value: T);
    abstract get attributes(): Record<A, StyleAttribute>;
    get style(): CSSProperties;
    get css(): string;
    get variables(): string[];
    getAttributes(include_base?: boolean): StyleAttribute[];
    /**
     * get a attribute as a css variable
     *
     * @example
     * `my-class {
     *    background: ${styles.colors.green.getVariable('color')}
     * }`
     */
    getVariable(name: A): string;
    /**
     * return all configured css varibles;
     *
     * @example
     * `:root { ${styles.colors.green.getVariables().join(';')} }`
     */
    getVariables(include_base?: boolean): string[];
    toString(): string;
}
export default StyleProperty;
