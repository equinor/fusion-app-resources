const camel2kebab = (x) => x.replace(/([a-z0-9])([A-Z])/g, '$1-$2').toLowerCase();
// Type of style(). Previous type caused an error in dependant apps.
// type CSSProperties = Omit<StandardProperties, 'fontSizeAdjust'>;
export class StyleProperty {
    constructor(name, value) {
        this.name = name;
        this.value = value;
    }
    static makeCssVar(element, module) {
        return `--fusion-${element}__${module}`;
    }
    static makeCss(obj) {
        return Object.keys(obj)
            .map((x) => `${camel2kebab(x)}: ${obj[x]}`)
            .join(';');
    }
    static makeVariable({ attribute, value }) {
        return `var(${[attribute, value].filter((x) => !!x).join(',')})`;
    }
    static extractVariables(styles) {
        return Object.values(styles).reduce((cur, value) => cur.concat(value.variables), []);
    }
    get style() {
        const { value, attributes } = this;
        return {
            ...value,
            ...Object.keys(attributes).reduce((cur, key) => Object.assign(cur, { [key]: StyleProperty.makeVariable(attributes[key]) }), {}),
        };
    }
    get css() {
        const { attributes, style } = this;
        return StyleProperty.makeCss({
            ...style,
            ...Object.keys(attributes).reduce((cur, key) => Object.assign(cur, { [key]: StyleProperty.makeVariable(attributes[key]) }), {}),
        });
    }
    get variables() {
        return this.getVariables();
    }
    getAttributes(include_base) {
        return Object.values(this.attributes).filter((x) => include_base || !x.base);
    }
    /**
     * get a attribute as a css variable
     *
     * @example
     * `my-class {
     *    background: ${styles.colors.green.getVariable('color')}
     * }`
     */
    getVariable(name) {
        return StyleProperty.makeVariable(this.attributes[name]);
    }
    /**
     * return all configured css varibles;
     *
     * @example
     * `:root { ${styles.colors.green.getVariables().join(';')} }`
     */
    getVariables(include_base) {
        return this.getAttributes(include_base).map(({ attribute, value }) => [attribute, value].join(':'));
    }
    toString() {
        return this.css;
    }
}
export default StyleProperty;
//# sourceMappingURL=style-property.js.map