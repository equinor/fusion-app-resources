import { __decorate } from "tslib";
/* eslint-disable @typescript-eslint/ban-ts-comment */
import { html } from 'lit';
import { property } from 'lit/decorators.js';
import { ButtonBase } from '@material/mwc-button/mwc-button-base';
import Icon from '@equinor/fusion-wc-icon';
import styles from './element.css';
// persist element
Icon;
export class ButtonElement extends ButtonBase {
    constructor() {
        super(...arguments);
        /**
         * Leading icon to display in input
         * @See [`fwc-icon`](https://github.com/equinor/fusion-web-components/tree/main/packages/icon)
         * @override
         */
        // @ts-ignore
        this.icon = '';
        this.color = 'primary';
        this.variant = 'contained';
    }
    updated(changedProperties) {
        super.updated(changedProperties);
        if (changedProperties.has('variant')) {
            switch (this.variant) {
                case 'contained': {
                    this.unelevated = true;
                    this.raised = false;
                    this.outlined = false;
                    break;
                }
                case 'outlined': {
                    this.unelevated = false;
                    this.raised = false;
                    this.outlined = true;
                    break;
                }
                case 'ghost': {
                    this.unelevated = false;
                    this.raised = false;
                    this.outlined = false;
                    break;
                }
            }
            this.requestUpdate();
        }
    }
    renderIcon() {
        return html `<fwc-icon class="mdc-button__icon" .icon=${this.icon}></fwc-icon>`;
    }
}
__decorate([
    property({ type: String, reflect: true })
], ButtonElement.prototype, "color", void 0);
__decorate([
    property({ type: String, reflect: true })
], ButtonElement.prototype, "variant", void 0);
ButtonElement.styles = styles;
export default ButtonElement;
//# sourceMappingURL=element.js.map