import { __decorate } from "tslib";
import { eventOptions, html, LitElement, property, queryAsync } from 'lit-element';
import { classMap } from 'lit-html/directives/class-map';
import style from './element.css';
import { popperjs } from './directories/popperjs';
/**
 * Element wrapper for PopperJS
 */
export class PopoverElement extends LitElement {
    constructor() {
        super(...arguments);
        this.placement = 'auto';
        this.triggers = [];
        this._modifiers = [];
    }
    get options() {
        const { placement, disabled, modifiers } = this;
        const enabled = !disabled && (this.triggers.includes('hover') || this.show);
        return { placement, enabled, modifiers };
    }
    get modifiers() {
        var _a;
        return [
            {
                name: 'flip',
                enabled: !!this.flip || !!((_a = this.placement) === null || _a === void 0 ? void 0 : _a.match(/auto/)),
            },
            {
                name: 'offset',
                options: {
                    offset: this.offset,
                },
            },
            ...this._modifiers,
        ];
    }
    /** Set popper modifiers for element */
    set modifiers(modifiers) {
        this._modifiers = modifiers;
        this.requestUpdate();
    }
    render() {
        const popperClasses = this.disabled
            ? 'disabled'
            : classMap({
                show: !!this.show,
                hover: this.triggers.includes('hover'),
            });
        return html `
      <span id="content" popperjs=${popperjs(this.popper, this.options)} @click=${this.handleClick}>
        <slot></slot>
      </span>
      <span id="popper" class=${popperClasses}>
        <slot name="popover"></slot>
      </span>
    `;
    }
    handleClick() {
        if (this.triggers.includes('click')) {
            this.show = !this.show;
        }
    }
}
PopoverElement.styles = [style];
__decorate([
    property({ reflect: true })
], PopoverElement.prototype, "placement", void 0);
__decorate([
    property({ type: Boolean })
], PopoverElement.prototype, "disabled", void 0);
__decorate([
    property({ type: Boolean })
], PopoverElement.prototype, "show", void 0);
__decorate([
    property({ type: Boolean })
], PopoverElement.prototype, "flip", void 0);
__decorate([
    property({ type: Array })
], PopoverElement.prototype, "offset", void 0);
__decorate([
    property({ type: Array })
], PopoverElement.prototype, "triggers", void 0);
__decorate([
    queryAsync('#popper')
], PopoverElement.prototype, "popper", void 0);
__decorate([
    eventOptions({ passive: true })
], PopoverElement.prototype, "handleClick", null);
export default PopoverElement;
//# sourceMappingURL=element.js.map