import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useMemo } from 'react';
import { createStyles, makeStyles } from '@equinor/fusion-react-styles';
const useStyle = makeStyles((theme) => createStyles({
    root: Object.assign({ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }, theme.typography.table.cell_header.style),
}), { name: 'fusion-table-header' });
const createHeader = (type = 'table') => (column) => (Object.assign(Object.assign({}, column), { 
    // eslint-disable-next-line react/display-name
    Header: (args) => (_jsx(FusionColumnHeader, Object.assign({}, args, { type: type }, { children: _jsx("span", { children: column.Header }, void 0) }), void 0)) }));
const createHeaders = (type = 'table') => (columns) => {
    const ctor = createHeader(type);
    return columns.map((column) => {
        var _a;
        // only apply sortable headers on header, not groups
        if (column.columns) {
            return Object.assign(Object.assign({}, column), { columns: (_a = column.columns) === null || _a === void 0 ? void 0 : _a.map(ctor) });
        }
        return ctor(column);
    });
};
export const useTableHeaders = (columns, type = 'table') => useMemo(() => createHeaders(type)(columns), [columns, type]);
export const FusionColumnHeader = (args) => {
    const { column, children, type = 'table', classes = {} } = args;
    type;
    classes;
    const sort = !!column.getSortByToggleProps;
    const attr = sort ? column.getHeaderProps(column.getSortByToggleProps()) : column.getHeaderProps();
    const styles = useStyle();
    return (_jsxs("div", Object.assign({}, attr, { className: styles.root }, { children: [children, sort && _jsx("span", { children: column.isSorted ? (column.isSortedDesc ? '⬇' : '⬆') : '' }, void 0)] }), void 0));
};
export default FusionColumnHeader;
//# sourceMappingURL=ColumnHeader.js.map