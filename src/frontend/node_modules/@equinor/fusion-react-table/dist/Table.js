import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useTable, useSortBy } from 'react-table';
import { makeStyles, createStyles, clsx } from '@equinor/fusion-react-styles';
import { useTableHeaders } from './ColumnHeader';
const defaultStyleProps = {
    spacing: 'small',
};
const useStyles = makeStyles((theme) => createStyles({
    root: Object.assign(Object.assign({}, theme.typography.table.cell_text.style), { borderCollapse: 'collapse' }),
    thead: {
        background: theme.colors.interactive.table__header__fill_resting.value.hex,
        borderBottom: `2px solid ${theme.colors.ui.background__medium.value.hex}`,
        '& th:hover': {
            background: theme.colors.interactive.table__header__fill_hover.value.rgba,
        },
    },
    cell: ({ spacing }) => (Object.assign({}, theme.spacing.comfortable[spacing].style)),
    row: {
        borderBottom: `1px solid ${theme.colors.ui.background__medium.value.hex}`,
        '&:hover': {
            background: theme.colors.interactive.table__cell__fill_hover.value.rgba,
        },
    },
}), { name: 'fusion-table' });
export const FusionTable = (props) => {
    const { data, sort, plugins = [], spacing = 'x_small', style, className } = props;
    const styles = useStyles(Object.assign(Object.assign({}, defaultStyleProps), { spacing }));
    // TODO: check if sort is allready added?
    sort && plugins.push(useSortBy);
    const columns = useTableHeaders(props.columns, 'table');
    const { getTableProps, getTableBodyProps, headerGroups, rows, prepareRow } = useTable({ columns, data }, ...plugins);
    return (_jsxs("table", Object.assign({}, getTableProps(), { style: style, className: clsx(styles.root, className) }, { children: [_jsx("thead", Object.assign({ className: clsx(styles.thead) }, { children: headerGroups.map((headerGroup) => (
                // eslint-disable-next-line react/jsx-key
                _jsx("tr", Object.assign({}, headerGroup.getHeaderGroupProps(), { children: headerGroup.headers.map((column) => (
                    // eslint-disable-next-line react/jsx-key
                    _jsx("th", Object.assign({}, column.getHeaderProps(), { className: clsx(styles.cell) }, { children: column.render('Header') }), void 0))) }), void 0))) }), void 0),
            _jsx("tbody", Object.assign({}, getTableBodyProps(), { children: rows.map((row) => {
                    prepareRow(row);
                    return (
                    // eslint-disable-next-line react/jsx-key
                    _jsx("tr", Object.assign({}, row.getRowProps(), { className: styles.row }, { children: row.cells.map((cell) => (
                        // eslint-disable-next-line react/jsx-key
                        _jsx("td", Object.assign({}, cell.getCellProps(), { className: clsx(styles.cell) }, { children: cell.render('Cell') }), void 0))) }), void 0));
                }) }), void 0)] }), void 0));
};
export default FusionTable;
//# sourceMappingURL=Table.js.map