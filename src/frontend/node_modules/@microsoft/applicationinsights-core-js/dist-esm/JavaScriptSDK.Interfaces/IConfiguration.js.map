{"version":3,"file":"IConfiguration.js","sourceRoot":"","sources":["../../src/JavaScriptSDK.Interfaces/IConfiguration.ts"],"names":[],"mappings":"AAKA,YAAY,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport { ITelemetryPlugin } from \"./ITelemetryPlugin\";\r\nimport { IChannelControls } from \"./IChannelControls\";\r\n\r\n\"use strict\";\r\n\r\n/**\r\n * Configuration provided to SDK core\r\n */\r\nexport interface IConfiguration {\r\n    /**\r\n     * Instrumentation key of resource. Either this or connectionString must be specified.\r\n     */\r\n    instrumentationKey?: string;\r\n\r\n    /**\r\n     * Connection string of resource. Either this or instrumentationKey must be specified.\r\n     */\r\n    connectionString?: string;\r\n\r\n    /**\r\n     * Polling interval (in ms) for internal logging queue\r\n     */\r\n    diagnosticLogInterval?: number;\r\n\r\n    /**\r\n     * Maximum number of iKey transmitted logging telemetry per page view\r\n     */\r\n    maxMessageLimit?: number;\r\n\r\n    /**\r\n     * Console logging level. All logs with a severity level higher\r\n     * than the configured level will be printed to console. Otherwise\r\n     * they are suppressed. ie Level 2 will print both CRITICAL and\r\n     * WARNING logs to console, level 1 prints only CRITICAL.\r\n     *\r\n     * Note: Logs sent as telemetry to instrumentation key will also\r\n     * be logged to console if their severity meets the configured loggingConsoleLevel\r\n     *\r\n     * 0: ALL console logging off\r\n     * 1: logs to console: severity >= CRITICAL\r\n     * 2: logs to console: severity >= WARNING\r\n     */\r\n    loggingLevelConsole?: number;\r\n\r\n    /**\r\n     * Telemtry logging level to instrumentation key. All logs with a severity\r\n     * level higher than the configured level will sent as telemetry data to\r\n     * the configured instrumentation key.\r\n     *\r\n     * 0: ALL iKey logging off\r\n     * 1: logs to iKey: severity >= CRITICAL\r\n     * 2: logs to iKey: severity >= WARNING\r\n     */\r\n    loggingLevelTelemetry?: number\r\n\r\n    /**\r\n     * If enabled, uncaught exceptions will be thrown to help with debugging\r\n     */\r\n    enableDebugExceptions?: boolean;\r\n\r\n    /**\r\n     * Endpoint where telemetry data is sent\r\n     */\r\n    endpointUrl?: string;\r\n\r\n    /**\r\n     * Extension configs loaded in SDK\r\n     */\r\n    extensionConfig?: { [key: string]: any }; // extension configs;\r\n\r\n    /**\r\n     * Additional plugins that should be loaded by core at runtime\r\n     */\r\n    extensions?: ITelemetryPlugin[];\r\n\r\n    /**\r\n     * Channel queues that is setup by caller in desired order.\r\n     * If channels are provided here, core will ignore any channels that are already setup, example if there is a SKU with an initialized channel\r\n     */\r\n    channels?: IChannelControls[][];  \r\n    /**\r\n     * @type {boolean}\r\n     * @memberof IConfiguration\r\n     * Flag that disables the Instrumentation Key validation.\r\n     */\r\n    disableInstrumentationKeyValidation?: boolean;\r\n    \r\n    /**\r\n     * [Optional] When enabled this will create local perfEvents based on sections of the code that have been instrumented\r\n     * to emit perfEvents (via the doPerf()) when this is enabled. This can be used to identify performance issues within\r\n     * the SDK, the way you are using it or optionally your own instrumented code.\r\n     * The provided IPerfManager implementation does NOT send any additional telemetry events to the server it will only fire\r\n     * the new perfEvent() on the INotificationManager which you can listen to.\r\n     * This also does not use the window.performance API, so it will work in environments where this API is not supported.\r\n     */\r\n    enablePerfMgr?: boolean;\r\n\r\n    /**\r\n     * [Optional] Fire every single performance event not just the top level root performance event. Defaults to false.\r\n     */\r\n    perfEvtsSendAll?: boolean;\r\n\r\n    /**\r\n     * [Optional] Identifies the default length used to generate random session and user id's if non currently exists for the user / session.\r\n     * Defaults to 22, previous default value was 5, if you need to keep the previous maximum length you should set this value to 5.\r\n     */\r\n    idLength?: number;\r\n}"]}