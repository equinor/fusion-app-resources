// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
"use strict";
import { CoreUtils } from "./CoreUtils";
import { BaseTelemetryPlugin } from './BaseTelemetryPlugin';
import { ProcessTelemetryContext } from './ProcessTelemetryContext';
import { initializePlugins } from './TelemetryHelpers';
import dynamicProto from '@microsoft/dynamicproto-js';
var ChannelControllerPriority = 500;
var ChannelValidationMessage = "Channel has invalid priority";
var _objDefineAccessors = CoreUtils.objDefineAccessors;
var ChannelController = /** @class */ (function (_super) {
    __extends(ChannelController, _super);
    function ChannelController() {
        var _this = _super.call(this) || this;
        _this.identifier = "ChannelControllerPlugin";
        _this.priority = ChannelControllerPriority; // in reserved range 100 to 200
        var _arrForEach = CoreUtils.arrForEach;
        var _channelQueue;
        dynamicProto(ChannelController, _this, function (_self, _base) {
            _self.setNextPlugin = function (next) {
                // The Channel controller is last in pipeline
            };
            _self.processTelemetry = function (item, itemCtx) {
                if (_channelQueue) {
                    _arrForEach(_channelQueue, function (queues) {
                        // pass on to first item in queue
                        if (queues.length > 0) {
                            // Copying the item context as we could have mutiple chains that are executing asynchronously
                            // and calling _getDefTelCtx as it's possible that the caller doesn't pass any context
                            var chainCtx = _this._getTelCtx(itemCtx).createNew(queues);
                            chainCtx.processNext(item);
                        }
                    });
                }
            };
            _self.getChannelControls = function () {
                return _channelQueue;
            };
            _self.initialize = function (config, core, extensions) {
                if (_self.isInitialized()) {
                    // already initialized
                    return;
                }
                _base.initialize(config, core, extensions);
                if (config.isCookieUseDisabled) {
                    CoreUtils.disableCookies();
                }
                _createChannelQueues((config || {}).channels, extensions);
                // Initialize the Queues
                _arrForEach(_channelQueue, function (queue) { return initializePlugins(new ProcessTelemetryContext(queue, config, core), extensions); });
            };
        });
        function _checkQueuePriority(queue) {
            _arrForEach(queue, function (queueItem) {
                if (queueItem.priority < ChannelControllerPriority) {
                    throw Error(ChannelValidationMessage + queueItem.identifier);
                }
            });
        }
        function _addChannelQueue(queue) {
            if (queue && queue.length > 0) {
                queue = queue.sort(function (a, b) {
                    return a.priority - b.priority;
                });
                _checkQueuePriority(queue);
                _channelQueue.push(queue);
            }
        }
        function _createChannelQueues(channels, extensions) {
            _channelQueue = [];
            if (channels) {
                // Add and sort the configuration channel queues
                _arrForEach(channels, function (queue) { return _addChannelQueue(queue); });
            }
            if (extensions) {
                // Create a new channel queue for any extensions with a priority > the ChannelControllerPriority
                var extensionQueue_1 = [];
                _arrForEach(extensions, function (plugin) {
                    if (plugin.priority > ChannelControllerPriority) {
                        extensionQueue_1.push(plugin);
                    }
                });
                _addChannelQueue(extensionQueue_1);
            }
        }
        return _this;
    }
    ChannelController.prototype.processTelemetry = function (item, itemCtx) {
        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging
    };
    ;
    ChannelController.prototype.getChannelControls = function () {
        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging
        return null;
    };
    ChannelController.prototype.initialize = function (config, core, extensions) {
        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging
    };
    /**
     * Static constructor, attempt to create accessors
     */
    // tslint:disable-next-line
    ChannelController._staticInit = (function () {
        // Dynamically create get/set property accessors
        _objDefineAccessors(ChannelController.prototype, "ChannelControls", ChannelController.prototype.getChannelControls);
        _objDefineAccessors(ChannelController.prototype, "channelQueue", ChannelController.prototype.getChannelControls);
    })();
    return ChannelController;
}(BaseTelemetryPlugin));
export { ChannelController };
//# sourceMappingURL=ChannelController.js.map