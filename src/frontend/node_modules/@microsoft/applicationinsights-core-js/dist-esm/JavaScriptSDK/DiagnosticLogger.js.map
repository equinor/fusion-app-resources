{"version":3,"file":"DiagnosticLogger.js","sourceRoot":"","sources":["../../src/JavaScriptSDK/DiagnosticLogger.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\"use strict\"\r\nimport { IConfiguration } from \"../JavaScriptSDK.Interfaces/IConfiguration\"\r\nimport { _InternalMessageId, LoggingSeverity } from \"../JavaScriptSDK.Enums/LoggingEnums\";\r\nimport { IDiagnosticLogger } from \"../JavaScriptSDK.Interfaces/IDiagnosticLogger\";\r\nimport { CoreUtils } from \"./CoreUtils\";\r\nimport { hasJSON, getJSON, getConsole } from \"./EnvUtils\";\r\nimport dynamicProto from '@microsoft/dynamicproto-js';\r\n\r\n/**\r\n * For user non actionable traces use AI Internal prefix.\r\n */\r\nconst AiNonUserActionablePrefix = \"AI (Internal): \";\r\n\r\n/**\r\n * Prefix of the traces in portal.\r\n */\r\nconst AiUserActionablePrefix = \"AI: \";\r\n\r\n/**\r\n *  Session storage key for the prefix for the key indicating message type already logged\r\n */\r\nconst AIInternalMessagePrefix = \"AITR_\";\r\n\r\n\r\nfunction _sanitizeDiagnosticText(text: string) {\r\n    if (text) {\r\n        return \"\\\"\" + text.replace(/\\\"/g, \"\") + \"\\\"\";\r\n    }\r\n\r\n    return \"\";\r\n}\r\n\r\nexport class _InternalLogMessage{\r\n    public static dataType: string = \"MessageData\";\r\n\r\n    public message: string;\r\n    public messageId: _InternalMessageId;\r\n\r\n    constructor(msgId: _InternalMessageId, msg: string, isUserAct = false, properties?: Object) {\r\n        let _self = this;\r\n\r\n        _self.messageId = msgId;\r\n        _self.message =\r\n            (isUserAct ? AiUserActionablePrefix : AiNonUserActionablePrefix) +\r\n            msgId;\r\n\r\n        let strProps:string = \"\";\r\n        if (hasJSON()) {\r\n            strProps = getJSON().stringify(properties);\r\n        }\r\n\r\n        const diagnosticText =\r\n            (msg ? \" message:\" + _sanitizeDiagnosticText(msg) : \"\") +\r\n            (properties ? \" props:\" + _sanitizeDiagnosticText(strProps) : \"\");\r\n\r\n        _self.message += diagnosticText;\r\n    }\r\n}\r\n\r\nexport class DiagnosticLogger implements IDiagnosticLogger {\r\n    public identifier = 'DiagnosticLogger';\r\n    \r\n    /**\r\n     * The internal logging queue\r\n     */\r\n    public queue: _InternalLogMessage[] = [];\r\n\r\n    constructor(config?: IConfiguration) {\r\n        /**\r\n         * Count of internal messages sent\r\n         */\r\n        let _messageCount = 0;\r\n\r\n        /**\r\n         * Holds information about what message types were already logged to console or sent to server.\r\n         */\r\n        let _messageLogged: { [msg: number]: boolean } = {};\r\n\r\n        dynamicProto(DiagnosticLogger, this, (_self) => {\r\n            const isNullOrUndefined = CoreUtils.isNullOrUndefined;\r\n            const isUndefined = CoreUtils.isUndefined;\r\n            const isFunction = CoreUtils.isFunction;\r\n\r\n            if (isNullOrUndefined(config)) {\r\n                config = {};\r\n            }\r\n\r\n            _self.consoleLoggingLevel = () => _getConfigValue('loggingLevelConsole', 0);\r\n            \r\n            _self.telemetryLoggingLevel = () => _getConfigValue('loggingLevelTelemetry', 1);\r\n\r\n            _self.maxInternalMessageLimit = () => _getConfigValue('maxMessageLimit', 25);\r\n\r\n            _self.enableDebugExceptions = () => _getConfigValue('enableDebugExceptions', false);\r\n            \r\n            /**\r\n             * This method will throw exceptions in debug mode or attempt to log the error as a console warning.\r\n             * @param severity {LoggingSeverity} - The severity of the log message\r\n             * @param message {_InternalLogMessage} - The log message.\r\n             */\r\n            _self.throwInternal = (severity: LoggingSeverity, msgId: _InternalMessageId, msg: string, properties?: Object, isUserAct = false) => {\r\n                const message = new _InternalLogMessage(msgId, msg, isUserAct, properties);\r\n\r\n                if (_self.enableDebugExceptions()) {\r\n                    throw message;\r\n                } else {\r\n                    if (!isUndefined(message) && !!message) {\r\n                        if (!isUndefined(message.message)) {\r\n                            if (isUserAct) {\r\n                                // check if this message type was already logged to console for this page view and if so, don't log it again\r\n                                const messageKey: number = +message.messageId;\r\n\r\n                                if (!_messageLogged[messageKey] && _self.consoleLoggingLevel() >= LoggingSeverity.WARNING) {\r\n                                    _self.warnToConsole(message.message);\r\n                                    _messageLogged[messageKey] = true;\r\n                                }\r\n                            } else {\r\n                                // don't log internal AI traces in the console, unless the verbose logging is enabled\r\n                                if (_self.consoleLoggingLevel() >= LoggingSeverity.WARNING) {\r\n                                    _self.warnToConsole(message.message);\r\n                                }\r\n                            }\r\n\r\n                            _self.logInternalMessage(severity, message);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            /**\r\n             * This will write a warning to the console if possible\r\n             * @param message {string} - The warning message\r\n             */\r\n            _self.warnToConsole = (message: string) => {\r\n                let theConsole = getConsole();\r\n                if (!!theConsole) {\r\n                    let logFunc = 'log';\r\n                    if (theConsole.warn) {\r\n                        logFunc = 'warn';\r\n                    }\r\n\r\n                    if (isFunction(theConsole[logFunc])) {\r\n                        theConsole[logFunc](message);\r\n                    }\r\n                }\r\n            }\r\n\r\n            /**\r\n             * Resets the internal message count\r\n             */\r\n            _self.resetInternalMessageCount = (): void => {\r\n                _messageCount = 0;\r\n                _messageLogged = {};\r\n            };\r\n\r\n            /**\r\n             * Logs a message to the internal queue.\r\n             * @param severity {LoggingSeverity} - The severity of the log message\r\n             * @param message {_InternalLogMessage} - The message to log.\r\n             */\r\n            _self.logInternalMessage = (severity: LoggingSeverity, message: _InternalLogMessage): void => {\r\n                if (_areInternalMessagesThrottled()) {\r\n                    return;\r\n                }\r\n\r\n                // check if this message type was already logged for this session and if so, don't log it again\r\n                let logMessage = true;\r\n                const messageKey = AIInternalMessagePrefix + message.messageId;\r\n\r\n                // if the session storage is not available, limit to only one message type per page view\r\n                if (_messageLogged[messageKey]) {\r\n                    logMessage = false;\r\n                } else {\r\n                    _messageLogged[messageKey] = true;\r\n                }\r\n\r\n                if (logMessage) {\r\n                    // Push the event in the internal queue\r\n                    if (severity <= _self.telemetryLoggingLevel()) {\r\n                        _self.queue.push(message);\r\n                        _messageCount++;\r\n                    }\r\n\r\n                    // When throttle limit reached, send a special event\r\n                    if (_messageCount === _self.maxInternalMessageLimit()) {\r\n                        const throttleLimitMessage = \"Internal events throttle limit per PageView reached for this app.\";\r\n                        const throttleMessage = new _InternalLogMessage(_InternalMessageId.MessageLimitPerPVExceeded, throttleLimitMessage, false);\r\n\r\n                        _self.queue.push(throttleMessage);\r\n                        _self.warnToConsole(throttleLimitMessage);\r\n                    }\r\n                }\r\n            };\r\n\r\n            function _getConfigValue<T>(name: keyof IConfiguration, defValue: T): T {\r\n                let value = config[name] as T;\r\n                if (!isNullOrUndefined(value)) {\r\n                    return value;\r\n                }\r\n\r\n                return defValue;\r\n            }\r\n\r\n            function _areInternalMessagesThrottled(): boolean {\r\n                return _messageCount >= _self.maxInternalMessageLimit();\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * When this is true the SDK will throw exceptions to aid in debugging.\r\n     */\r\n    public enableDebugExceptions(): boolean {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * 0: OFF (default)\r\n     * 1: CRITICAL\r\n     * 2: >= WARNING\r\n     */\r\n    public consoleLoggingLevel(): number {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * 0: OFF\r\n     * 1: CRITICAL (default)\r\n     * 2: >= WARNING\r\n     */\r\n    public telemetryLoggingLevel(): number {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n        return 1;\r\n    }\r\n\r\n    /**\r\n     * The maximum number of internal messages allowed to be sent per page view\r\n     */\r\n    public maxInternalMessageLimit(): number {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n        return 25;\r\n    }\r\n\r\n    /**\r\n     * This method will throw exceptions in debug mode or attempt to log the error as a console warning.\r\n     * @param severity {LoggingSeverity} - The severity of the log message\r\n     * @param message {_InternalLogMessage} - The log message.\r\n     */\r\n    public throwInternal(severity: LoggingSeverity, msgId: _InternalMessageId, msg: string, properties?: Object, isUserAct = false) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    }\r\n\r\n    /**\r\n     * This will write a warning to the console if possible\r\n     * @param message {string} - The warning message\r\n     */\r\n    public warnToConsole(message: string) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    }\r\n\r\n    /**\r\n     * Resets the internal message count\r\n     */\r\n    public resetInternalMessageCount(): void {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    }\r\n\r\n    /**\r\n     * Logs a message to the internal queue.\r\n     * @param severity {LoggingSeverity} - The severity of the log message\r\n     * @param message {_InternalLogMessage} - The message to log.\r\n     */\r\n    public logInternalMessage(severity: LoggingSeverity, message: _InternalLogMessage): void {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    }\r\n}\r\n"]}