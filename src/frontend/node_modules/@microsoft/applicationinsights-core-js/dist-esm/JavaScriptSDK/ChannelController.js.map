{"version":3,"file":"ChannelController.js","sourceRoot":"","sources":["../../src/JavaScriptSDK/ChannelController.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\"use strict\";\r\n\r\nimport { IAppInsightsCore } from \"../JavaScriptSDK.Interfaces/IAppInsightsCore\"\r\nimport { IConfiguration } from \"../JavaScriptSDK.Interfaces/IConfiguration\";\r\nimport { IChannelControls } from \"../JavaScriptSDK.Interfaces/IChannelControls\";\r\nimport { IPlugin, ITelemetryPlugin,  } from \"../JavaScriptSDK.Interfaces/ITelemetryPlugin\";\r\nimport { ITelemetryPluginChain } from \"../JavaScriptSDK.Interfaces/ITelemetryPluginChain\";\r\nimport { ITelemetryItem } from \"../JavaScriptSDK.Interfaces/ITelemetryItem\";\r\nimport { IProcessTelemetryContext } from \"../JavaScriptSDK.Interfaces/IProcessTelemetryContext\";\r\nimport { CoreUtils } from \"./CoreUtils\";\r\nimport { _InternalLogMessage } from \"./DiagnosticLogger\";\r\nimport { BaseTelemetryPlugin } from './BaseTelemetryPlugin';\r\nimport { ProcessTelemetryContext } from './ProcessTelemetryContext';\r\nimport { initializePlugins } from './TelemetryHelpers';\r\nimport dynamicProto from '@microsoft/dynamicproto-js';\r\n\r\nconst ChannelControllerPriority = 500;\r\nconst ChannelValidationMessage = \"Channel has invalid priority\";\r\n\r\nlet _objDefineAccessors = CoreUtils.objDefineAccessors;\r\n\r\nexport class ChannelController extends BaseTelemetryPlugin {\r\n\r\n    identifier: string = \"ChannelControllerPlugin\";\r\n    priority: number = ChannelControllerPriority; // in reserved range 100 to 200\r\n\r\n    public setNextPlugin: (next: ITelemetryPlugin | ITelemetryPluginChain) => void;\r\n\r\n    constructor() {\r\n        super();\r\n        let _arrForEach = CoreUtils.arrForEach;\r\n        let _channelQueue: IChannelControls[][];\r\n\r\n        dynamicProto(ChannelController, this, (_self, _base) => {\r\n            _self.setNextPlugin = (next: ITelemetryPlugin | ITelemetryPluginChain) => {\r\n                // The Channel controller is last in pipeline\r\n            };\r\n\r\n            _self.processTelemetry = (item: ITelemetryItem, itemCtx: IProcessTelemetryContext) => {\r\n                if (_channelQueue) {\r\n                    _arrForEach(_channelQueue, queues => {\r\n                        // pass on to first item in queue\r\n                        if (queues.length > 0) {\r\n                            // Copying the item context as we could have mutiple chains that are executing asynchronously\r\n                            // and calling _getDefTelCtx as it's possible that the caller doesn't pass any context\r\n                            let chainCtx = this._getTelCtx(itemCtx).createNew(queues); \r\n                            chainCtx.processNext(item);\r\n                        }\r\n                    });\r\n                }\r\n            };\r\n        \r\n            _self.getChannelControls = (): IChannelControls[][] => {\r\n                return _channelQueue;\r\n            };\r\n                \r\n            _self.initialize = (config: IConfiguration, core: IAppInsightsCore, extensions: IPlugin[]) => {\r\n                if (_self.isInitialized()) {\r\n                    // already initialized\r\n                    return;\r\n                }\r\n        \r\n                _base.initialize(config, core, extensions);\r\n        \r\n                if ((config as any).isCookieUseDisabled) {\r\n                    CoreUtils.disableCookies();\r\n                }\r\n                \r\n                _createChannelQueues((config||{}).channels, extensions);\r\n        \r\n                // Initialize the Queues\r\n                _arrForEach(_channelQueue, queue => initializePlugins(new ProcessTelemetryContext(queue, config, core), extensions));\r\n            }\r\n        });\r\n\r\n        function _checkQueuePriority(queue:IChannelControls[]) {\r\n            _arrForEach(queue, queueItem => {\r\n                if (queueItem.priority < ChannelControllerPriority) {\r\n                    throw Error(ChannelValidationMessage + queueItem.identifier);\r\n                }\r\n            });\r\n        }\r\n        \r\n        function _addChannelQueue(queue:IChannelControls[]) {\r\n            if (queue && queue.length > 0) {\r\n                queue = queue.sort((a, b) => { // sort based on priority within each queue\r\n                    return a.priority - b.priority;\r\n                });\r\n        \r\n                _checkQueuePriority(queue);\r\n                _channelQueue.push(queue);\r\n            }\r\n        }\r\n        \r\n        function _createChannelQueues(channels:IChannelControls[][], extensions: IPlugin[]) {\r\n            _channelQueue = [];\r\n        \r\n            if (channels) {\r\n                // Add and sort the configuration channel queues\r\n                _arrForEach(channels, queue => _addChannelQueue(queue));\r\n            }\r\n        \r\n            if (extensions) {\r\n                // Create a new channel queue for any extensions with a priority > the ChannelControllerPriority\r\n                let extensionQueue:IChannelControls[] = [];\r\n                _arrForEach(extensions as IChannelControls[], plugin => {\r\n                    if (plugin.priority > ChannelControllerPriority) {\r\n                        extensionQueue.push(plugin);\r\n                    }\r\n                });\r\n            \r\n                _addChannelQueue(extensionQueue);\r\n            }\r\n        }\r\n    }\r\n\r\n    public processTelemetry(item: ITelemetryItem, itemCtx: IProcessTelemetryContext) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    };\r\n\r\n    public getChannelControls(): IChannelControls[][] {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n        return null;\r\n    }\r\n\r\n    public initialize(config: IConfiguration, core: IAppInsightsCore, extensions: IPlugin[]) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    }\r\n\r\n    /**\r\n     * Static constructor, attempt to create accessors\r\n     */\r\n    // tslint:disable-next-line\r\n    private static _staticInit = (() => {\r\n        // Dynamically create get/set property accessors\r\n        _objDefineAccessors(ChannelController.prototype, \"ChannelControls\", ChannelController.prototype.getChannelControls);\r\n        _objDefineAccessors(ChannelController.prototype, \"channelQueue\", ChannelController.prototype.getChannelControls);\r\n    })();\r\n}"]}