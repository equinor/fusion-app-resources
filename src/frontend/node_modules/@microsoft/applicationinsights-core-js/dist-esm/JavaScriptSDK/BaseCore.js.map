{"version":3,"file":"BaseCore.js","sourceRoot":"","sources":["../../src/JavaScriptSDK/BaseCore.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\"use strict\";\r\n\r\nimport { IAppInsightsCore } from \"../JavaScriptSDK.Interfaces/IAppInsightsCore\"\r\nimport { IConfiguration } from \"../JavaScriptSDK.Interfaces/IConfiguration\";\r\nimport { IPlugin, ITelemetryPlugin } from \"../JavaScriptSDK.Interfaces/ITelemetryPlugin\";\r\nimport { IChannelControls } from \"../JavaScriptSDK.Interfaces/IChannelControls\";\r\nimport { ITelemetryItem } from \"../JavaScriptSDK.Interfaces/ITelemetryItem\";\r\nimport { CoreUtils } from \"./CoreUtils\";\r\nimport { INotificationManager } from '../JavaScriptSDK.Interfaces/INotificationManager';\r\nimport { INotificationListener } from \"../JavaScriptSDK.Interfaces/INotificationListener\";\r\nimport { IDiagnosticLogger } from \"../JavaScriptSDK.Interfaces/IDiagnosticLogger\";\r\nimport { ChannelController } from './ChannelController';\r\nimport { IProcessTelemetryContext } from '../JavaScriptSDK.Interfaces/IProcessTelemetryContext';\r\nimport { ProcessTelemetryContext } from './ProcessTelemetryContext';\r\nimport { initializePlugins, sortPlugins } from './TelemetryHelpers';\r\nimport { _InternalMessageId, LoggingSeverity } from \"../JavaScriptSDK.Enums/LoggingEnums\";\r\nimport dynamicProto from '@microsoft/dynamicproto-js';\r\nimport { IPerfManager } from \"../JavaScriptSDK.Interfaces/IPerfManager\";\r\nimport { PerfManager } from \"./PerfManager\";\r\n\r\nconst validationError = \"Extensions must provide callback to initialize\";\r\n\r\nconst _arrForEach = CoreUtils.arrForEach;\r\nconst _isNullOrUndefined = CoreUtils.isNullOrUndefined;\r\nconst strNotificationManager = \"_notificationManager\";\r\n\r\nexport class BaseCore implements IAppInsightsCore {\r\n    public static defaultConfig: IConfiguration;\r\n    public config: IConfiguration;\r\n    public logger: IDiagnosticLogger;\r\n\r\n    public _extensions: IPlugin[];\r\n    public isInitialized: () => boolean;\r\n\r\n    constructor() {\r\n        let _isInitialized = false;\r\n        let _eventQueue: ITelemetryItem[];\r\n        let _channelController: ChannelController;\r\n        let _notificationManager: INotificationManager;\r\n        let _perfManager: IPerfManager;\r\n    \r\n        dynamicProto(BaseCore, this, (_self) => {\r\n            _self._extensions = new Array<IPlugin>();\r\n            _channelController = new ChannelController();\r\n            _self.logger = CoreUtils.objCreate({\r\n                throwInternal: (severity: LoggingSeverity, msgId: _InternalMessageId, msg: string, properties?: Object, isUserAct = false) => { },\r\n                warnToConsole: (message: string) => { },\r\n                resetInternalMessageCount: () => { }\r\n            });\r\n            \r\n            _eventQueue = [];\r\n            _self.isInitialized = () => _isInitialized;\r\n\r\n            _self.initialize = (config: IConfiguration, extensions: IPlugin[], logger?: IDiagnosticLogger, notificationManager?: INotificationManager): void => {\r\n                // Make sure core is only initialized once\r\n                if (_self.isInitialized()) {\r\n                    throw Error(\"Core should not be initialized more than once\");\r\n                }\r\n        \r\n                if (!config || _isNullOrUndefined(config.instrumentationKey)) {\r\n                    throw Error(\"Please provide instrumentation key\");\r\n                }\r\n        \r\n                _notificationManager = notificationManager;\r\n\r\n                // For backward compatibility only\r\n                _self[strNotificationManager] = notificationManager;\r\n               \r\n                _self.config = config || {};\r\n        \r\n                config.extensions = _isNullOrUndefined(config.extensions) ? [] : config.extensions;\r\n        \r\n                // add notification to the extensions in the config so other plugins can access it\r\n                let extConfig = config.extensionConfig = _isNullOrUndefined(config.extensionConfig) ? {} : config.extensionConfig;\r\n                extConfig.NotificationManager = notificationManager;\r\n\r\n                if (logger) {\r\n                    _self.logger = logger;\r\n                }\r\n        \r\n                // Concat all available extensions\r\n                let allExtensions = [];\r\n                allExtensions.push(...extensions, ...config.extensions);\r\n                allExtensions = sortPlugins(allExtensions);\r\n        \r\n                let coreExtensions: any[] = [];\r\n                let channelExtensions: any[] = [];\r\n        \r\n                // Check if any two extensions have the same priority, then warn to console\r\n                // And extract the local extensions from the \r\n                const extPriorities = {};\r\n        \r\n                // Extension validation\r\n                _arrForEach(allExtensions, (ext: ITelemetryPlugin) => {\r\n                    if (_isNullOrUndefined(ext) || _isNullOrUndefined(ext.initialize)) {\r\n                        throw Error(validationError);\r\n                    }\r\n        \r\n                    const extPriority = ext.priority;\r\n                    const identifier = ext.identifier;\r\n        \r\n                    if (ext && extPriority) {\r\n                        if (!_isNullOrUndefined(extPriorities[extPriority])) {\r\n                            logger.warnToConsole(\"Two extensions have same priority #\" + extPriority + \" - \" + extPriorities[extPriority] + \", \" + identifier);\r\n                        } else {\r\n                            // set a value\r\n                            extPriorities[extPriority] = identifier;\r\n                        }\r\n                    }\r\n        \r\n                    // Split extensions to core and channelController\r\n                    if (!extPriority || extPriority < _channelController.priority) {\r\n                        // Add to core extension that will be managed by BaseCore\r\n                        coreExtensions.push(ext);\r\n                    } else {\r\n                        // Add all other extensions to be managed by the channel controller\r\n                        channelExtensions.push(ext);\r\n                    }\r\n                });\r\n                // Validation complete\r\n        \r\n                // Add the channelController to the complete extension collection and\r\n                // to the end of the core extensions\r\n                allExtensions.push(_channelController);\r\n                coreExtensions.push(_channelController);\r\n        \r\n                // Sort the complete set of extensions by priority\r\n                allExtensions = sortPlugins(allExtensions);\r\n                _self._extensions = allExtensions;\r\n        \r\n                // initialize channel controller first, this will initialize all channel plugins\r\n                initializePlugins(new ProcessTelemetryContext([_channelController], config, _self), allExtensions);\r\n                initializePlugins(new ProcessTelemetryContext(coreExtensions, config, _self), allExtensions);\r\n        \r\n                // Now reset the extensions to just those being managed by Basecore\r\n                _self._extensions = coreExtensions;\r\n        \r\n                if (_self.getTransmissionControls().length === 0) {\r\n                    throw new Error(\"No channels available\");\r\n                }\r\n        \r\n                _isInitialized = true;\r\n                _self.releaseQueue();\r\n            };\r\n        \r\n            _self.getTransmissionControls = (): IChannelControls[][] => {\r\n                return _channelController.getChannelControls();\r\n            };\r\n        \r\n            _self.track = (telemetryItem: ITelemetryItem) => {\r\n                if (!telemetryItem.iKey) {\r\n                    // setup default iKey if not passed in\r\n                    telemetryItem.iKey = _self.config.instrumentationKey;\r\n                }\r\n                if (!telemetryItem.time) {\r\n                    // add default timestamp if not passed in\r\n                    telemetryItem.time = CoreUtils.toISOString(new Date());\r\n                }\r\n                if (_isNullOrUndefined(telemetryItem.ver)) {\r\n                    // CommonSchema 4.0\r\n                    telemetryItem.ver = \"4.0\";\r\n                }\r\n        \r\n                if (_self.isInitialized()) {\r\n                    // Process the telemetry plugin chain\r\n                    _self.getProcessTelContext().processNext(telemetryItem);\r\n                } else {\r\n                    // Queue events until all extensions are initialized\r\n                    _eventQueue.push(telemetryItem);\r\n                }\r\n            };\r\n        \r\n            _self.getProcessTelContext = (): IProcessTelemetryContext => {\r\n                let extensions = _self._extensions;\r\n                let thePlugins: IPlugin[] = extensions;\r\n        \r\n                // invoke any common telemetry processors before sending through pipeline\r\n                if (!extensions || extensions.length === 0) {\r\n                    // Pass to Channel controller so data is sent to correct channel queues\r\n                    thePlugins = [_channelController];\r\n                }\r\n        \r\n                return new ProcessTelemetryContext(thePlugins, _self.config, _self);\r\n            };\r\n\r\n            _self.getNotifyMgr = (): INotificationManager => {\r\n                if (!_notificationManager) {\r\n                    // Create Dummy notification manager\r\n                    _notificationManager = CoreUtils.objCreate({\r\n                        addNotificationListener: (listener: INotificationListener) => { },\r\n                        removeNotificationListener: (listener: INotificationListener) => { },\r\n                        eventsSent: (events: ITelemetryItem[]) => { },\r\n                        eventsDiscarded: (events: ITelemetryItem[], reason: number) => { },\r\n                        eventsSendRequest: (sendReason: number, isAsync: boolean) => { }\r\n                    });\r\n\r\n                    // For backward compatibility only\r\n                    _self[strNotificationManager] = _notificationManager;\r\n                }\r\n\r\n                return _notificationManager;\r\n            };\r\n        \r\n            _self.getPerfMgr = (): IPerfManager => {\r\n                if (!_perfManager) {\r\n                    if (_self.config &&  _self.config.enablePerfMgr) {\r\n                        _perfManager = new PerfManager(_self.getNotifyMgr());\r\n                    }\r\n                }\r\n\r\n                return _perfManager;\r\n            };\r\n\r\n            _self.setPerfMgr = (perfMgr: IPerfManager) => {\r\n                _perfManager = perfMgr;\r\n            };\r\n\r\n            _self.eventCnt = (): number => {\r\n                return _eventQueue.length;\r\n            };\r\n\r\n            _self.releaseQueue = () => {\r\n                if (_eventQueue.length > 0) {\r\n                    _arrForEach(_eventQueue, (event: ITelemetryItem) => {\r\n                        _self.getProcessTelContext().processNext(event);\r\n                    });\r\n\r\n                    _eventQueue = [];\r\n                }\r\n            };\r\n        });\r\n    }\r\n\r\n    public initialize(config: IConfiguration, extensions: IPlugin[], logger?: IDiagnosticLogger, notificationManager?: INotificationManager): void {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    }\r\n\r\n    public getTransmissionControls(): IChannelControls[][] {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n        return null;\r\n    }\r\n\r\n    public track(telemetryItem: ITelemetryItem) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    }\r\n\r\n    public getProcessTelContext(): IProcessTelemetryContext {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n        return null;\r\n    }\r\n\r\n    public getNotifyMgr(): INotificationManager {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n        return null;\r\n    }\r\n\r\n    public getPerfMgr(): IPerfManager {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n        return null;\r\n    }\r\n\r\n    public setPerfMgr(perfMgr: IPerfManager) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    }\r\n\r\n    public eventCnt(): number {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n        return 0;\r\n    }\r\n\r\n    protected releaseQueue() {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    }\r\n\r\n}\r\n"]}