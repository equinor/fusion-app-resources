{"version":3,"file":"NotificationManager.js","sourceRoot":"","sources":["../../src/JavaScriptSDK/NotificationManager.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport { IConfiguration } from '../JavaScriptSDK.Interfaces/IConfiguration';\r\nimport { ITelemetryItem } from \"../JavaScriptSDK.Interfaces/ITelemetryItem\";\r\nimport { INotificationListener } from \"../JavaScriptSDK.Interfaces/INotificationListener\";\r\nimport { INotificationManager } from '../JavaScriptSDK.Interfaces/INotificationManager';\r\nimport { IPerfEvent } from \"../JavaScriptSDK.Interfaces/IPerfEvent\";\r\nimport { CoreUtils, } from \"./CoreUtils\";\r\nimport dynamicProto from \"@microsoft/dynamicproto-js\";\r\n\r\n/**\r\n * Class to manage sending notifications to all the listeners.\r\n */\r\nexport class NotificationManager implements INotificationManager {\r\n    listeners: INotificationListener[] = [];\r\n\r\n    constructor(config?: IConfiguration) {\r\n        let arrForEach = CoreUtils.arrForEach;\r\n        let perfEvtsSendAll = !!(config ||{}).perfEvtsSendAll;\r\n\r\n        dynamicProto(NotificationManager, this, (_self) => {\r\n            _self.addNotificationListener = (listener: INotificationListener): void => {\r\n                _self.listeners.push(listener);\r\n            };\r\n\r\n            /**\r\n             * Removes all instances of the listener.\r\n             * @param {INotificationListener} listener - AWTNotificationListener to remove.\r\n             */\r\n            _self.removeNotificationListener = (listener: INotificationListener): void => {\r\n                let index: number = CoreUtils.arrIndexOf(_self.listeners, listener);\r\n                while (index > -1) {\r\n                    _self.listeners.splice(index, 1);\r\n                    index = CoreUtils.arrIndexOf(_self.listeners, listener);\r\n                }\r\n            };\r\n\r\n            /**\r\n             * Notification for events sent.\r\n             * @param {ITelemetryItem[]} events - The array of events that have been sent.\r\n             */\r\n            _self.eventsSent = (events: ITelemetryItem[]): void => {\r\n                arrForEach(_self.listeners, (listener) => {\r\n                    if (listener && listener.eventsSent) {\r\n                        setTimeout(() => listener.eventsSent(events), 0);\r\n                    }\r\n                });\r\n            };\r\n\r\n            /**\r\n             * Notification for events being discarded.\r\n             * @param {ITelemetryItem[]} events - The array of events that have been discarded by the SDK.\r\n             * @param {number} reason           - The reason for which the SDK discarded the events. The EventsDiscardedReason\r\n             * constant should be used to check the different values.\r\n             */\r\n            _self.eventsDiscarded = (events: ITelemetryItem[], reason: number): void => {\r\n                arrForEach(_self.listeners, (listener) => {\r\n                    if (listener && listener.eventsDiscarded) {\r\n                        setTimeout(() => listener.eventsDiscarded(events, reason), 0);\r\n                    }\r\n                });\r\n            };\r\n\r\n            /**\r\n             * [Optional] A function called when the events have been requested to be sent to the sever.\r\n             * @param {number} sendReason - The reason why the event batch is being sent.\r\n             * @param {boolean} isAsync   - A flag which identifies whether the requests are being sent in an async or sync manner.\r\n             */\r\n            _self.eventsSendRequest = (sendReason: number, isAsync: boolean): void => {\r\n                arrForEach(_self.listeners, (listener) => {\r\n                    if (listener && listener.eventsSendRequest) {\r\n                        if (isAsync) {\r\n                            setTimeout(() => listener.eventsSendRequest(sendReason, isAsync), 0);\r\n                        } else {\r\n                            try {\r\n                                listener.eventsSendRequest(sendReason, isAsync);\r\n                            } catch (e) {\r\n                                // Catch errors to ensure we don't block sending the requests\r\n                            }\r\n                        }\r\n                    }\r\n                });\r\n            };\r\n\r\n            _self.perfEvent = (perfEvent?: IPerfEvent): void => {\r\n                if (perfEvent) {\r\n\r\n                    // Send all events or only parent events\r\n                    if (perfEvtsSendAll || !perfEvent.isChildEvt()) {\r\n                        arrForEach(_self.listeners, (listener) => {\r\n                            if (listener && listener.perfEvent) {\r\n                                if (perfEvent.isAsync) {\r\n                                    setTimeout(() => listener.perfEvent(perfEvent), 0);\r\n                                } else {\r\n                                    try {\r\n                                        listener.perfEvent(perfEvent);\r\n                                    } catch (e) {\r\n                                        // Catch errors to ensure we don't block sending the requests\r\n                                    }\r\n                                }\r\n                            }\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * Adds a notification listener.\r\n     * @param {INotificationListener} listener - The notification listener to be added.\r\n     */\r\n    addNotificationListener(listener: INotificationListener): void {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    }\r\n\r\n    /**\r\n     * Removes all instances of the listener.\r\n     * @param {INotificationListener} listener - AWTNotificationListener to remove.\r\n     */\r\n    removeNotificationListener(listener: INotificationListener): void {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    }\r\n\r\n    /**\r\n     * Notification for events sent.\r\n     * @param {ITelemetryItem[]} events - The array of events that have been sent.\r\n     */\r\n    eventsSent(events: ITelemetryItem[]): void {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    }\r\n\r\n    /**\r\n     * Notification for events being discarded.\r\n     * @param {ITelemetryItem[]} events - The array of events that have been discarded by the SDK.\r\n     * @param {number} reason           - The reason for which the SDK discarded the events. The EventsDiscardedReason\r\n     * constant should be used to check the different values.\r\n     */\r\n    eventsDiscarded(events: ITelemetryItem[], reason: number): void {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    }\r\n\r\n    /**\r\n     * [Optional] A function called when the events have been requested to be sent to the sever.\r\n     * @param {number} sendReason - The reason why the event batch is being sent.\r\n     * @param {boolean} isAsync   - A flag which identifies whether the requests are being sent in an async or sync manner.\r\n     */\r\n    eventsSendRequest?(sendReason: number, isAsync: boolean): void {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    }\r\n\r\n    /**\r\n     * [Optional] This event is sent if you have enabled perf events, they are primarily used to track internal performance testing and debugging\r\n     * the event can be displayed via the debug plugin extension.\r\n     * @param perfEvent \r\n     */\r\n    perfEvent?(perfEvent: IPerfEvent): void;\r\n}\r\n"]}