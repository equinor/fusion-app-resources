{"version":3,"file":"AppInsightsCore.js","sourceRoot":"","sources":["../../src/JavaScriptSDK/AppInsightsCore.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport { IAppInsightsCore } from \"../JavaScriptSDK.Interfaces/IAppInsightsCore\"\r\nimport { BaseCore } from './BaseCore';\r\nimport { IConfiguration } from \"../JavaScriptSDK.Interfaces/IConfiguration\";\r\nimport { IPlugin } from \"../JavaScriptSDK.Interfaces/ITelemetryPlugin\";\r\nimport { ITelemetryItem } from \"../JavaScriptSDK.Interfaces/ITelemetryItem\";\r\nimport { INotificationListener } from \"../JavaScriptSDK.Interfaces/INotificationListener\";\r\nimport { EventsDiscardedReason } from \"../JavaScriptSDK.Enums/EventsDiscardedReason\";\r\nimport { NotificationManager } from \"./NotificationManager\";\r\nimport { CoreUtils } from \"./CoreUtils\";\r\nimport { doPerf } from \"./PerfManager\";\r\nimport { INotificationManager } from '../JavaScriptSDK.Interfaces/INotificationManager';\r\nimport { IDiagnosticLogger } from \"../JavaScriptSDK.Interfaces/IDiagnosticLogger\";\r\nimport { _InternalLogMessage, DiagnosticLogger } from \"./DiagnosticLogger\";\r\nimport dynamicProto from '@microsoft/dynamicproto-js';\r\n\r\n\"use strict\";\r\n\r\nexport class AppInsightsCore extends BaseCore implements IAppInsightsCore {\r\n    constructor() {\r\n        super();\r\n\r\n        dynamicProto(AppInsightsCore, this, (_self, _base) => {\r\n\r\n            _self.initialize = (config: IConfiguration, extensions: IPlugin[], logger?: IDiagnosticLogger, notificationManager?: INotificationManager): void => {\r\n                _base.initialize(config, extensions, logger || new DiagnosticLogger(config), notificationManager || new NotificationManager(config));\r\n            };\r\n        \r\n            _self.track = (telemetryItem: ITelemetryItem) => {\r\n                doPerf(_self.getPerfMgr(), () => \"AppInsightsCore:track\", () => {\r\n                    if (telemetryItem === null) {\r\n                        _notifyInvalidEvent(telemetryItem);\r\n                        // throw error\r\n                        throw Error(\"Invalid telemetry item\");\r\n                    }\r\n                    \r\n                    // do basic validation before sending it through the pipeline\r\n                    _validateTelemetryItem(telemetryItem);\r\n            \r\n                    _base.track(telemetryItem);\r\n                }, () => ({ item: telemetryItem }), !((telemetryItem as any).sync));\r\n            };\r\n        \r\n            /**\r\n             * Adds a notification listener. The SDK calls methods on the listener when an appropriate notification is raised.\r\n             * The added plugins must raise notifications. If the plugins do not implement the notifications, then no methods will be\r\n             * called.\r\n             * @param {INotificationListener} listener - An INotificationListener object.\r\n             */\r\n            _self.addNotificationListener = (listener: INotificationListener): void => {\r\n                let manager = _self.getNotifyMgr();\r\n                if (manager) {\r\n                    manager.addNotificationListener(listener);\r\n                }\r\n            };\r\n        \r\n            /**\r\n             * Removes all instances of the listener.\r\n             * @param {INotificationListener} listener - INotificationListener to remove.\r\n             */\r\n            _self.removeNotificationListener = (listener: INotificationListener): void => {\r\n                let manager = _self.getNotifyMgr();\r\n                if (manager) {\r\n                    manager.removeNotificationListener(listener);\r\n                }\r\n            }\r\n        \r\n            /**\r\n             * Periodically check logger.queue for\r\n             */\r\n            _self.pollInternalLogs = (eventName?: string): number => {\r\n                let interval = _self.config.diagnosticLogInterval;\r\n                if (!interval || !(interval > 0)) {\r\n                    interval = 10000;\r\n                }\r\n        \r\n                return setInterval(() => {\r\n                    const queue: _InternalLogMessage[] = _self.logger ? _self.logger.queue : [];\r\n        \r\n                    CoreUtils.arrForEach(queue, (logMessage: _InternalLogMessage) => {\r\n                        const item: ITelemetryItem = {\r\n                            name: eventName ? eventName : \"InternalMessageId: \" + logMessage.messageId,\r\n                            iKey: _self.config.instrumentationKey,\r\n                            time: CoreUtils.toISOString(new Date()),\r\n                            baseType: _InternalLogMessage.dataType,\r\n                            baseData: { message: logMessage.message }\r\n                        };\r\n        \r\n                        _self.track(item);\r\n                    });\r\n                    queue.length = 0;\r\n                }, interval) as any;\r\n            }\r\n        \r\n            function _validateTelemetryItem(telemetryItem: ITelemetryItem) {\r\n                if (CoreUtils.isNullOrUndefined(telemetryItem.name)) {\r\n                    _notifyInvalidEvent(telemetryItem);\r\n                    throw Error(\"telemetry name required\");\r\n                }\r\n            }\r\n        \r\n            function _notifyInvalidEvent(telemetryItem: ITelemetryItem): void {\r\n                let manager = _self.getNotifyMgr();\r\n                if (manager) {\r\n                    manager.eventsDiscarded([telemetryItem], EventsDiscardedReason.InvalidEvent);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    public initialize(config: IConfiguration, extensions: IPlugin[], logger?: IDiagnosticLogger, notificationManager?: INotificationManager): void {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    }\r\n\r\n    public track(telemetryItem: ITelemetryItem) {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    }\r\n\r\n    /**\r\n     * Adds a notification listener. The SDK calls methods on the listener when an appropriate notification is raised.\r\n     * The added plugins must raise notifications. If the plugins do not implement the notifications, then no methods will be\r\n     * called.\r\n     * @param {INotificationListener} listener - An INotificationListener object.\r\n     */\r\n    public addNotificationListener(listener: INotificationListener): void {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    }\r\n\r\n    /**\r\n     * Removes all instances of the listener.\r\n     * @param {INotificationListener} listener - INotificationListener to remove.\r\n     */\r\n    public removeNotificationListener(listener: INotificationListener): void {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n    }\r\n\r\n    /**\r\n     * Periodically check logger.queue for\r\n     */\r\n    public pollInternalLogs(eventName?: string): number {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n        return 0;\r\n    }\r\n}\r\n"]}