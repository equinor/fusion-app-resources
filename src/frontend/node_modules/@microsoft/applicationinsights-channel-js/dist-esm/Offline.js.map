{"version":3,"file":"Offline.js.map","sources":["Offline.js"],"sourcesContent":["import { CoreUtils, EventHelper, getWindow, getDocument, getNavigator } from '@microsoft/applicationinsights-core-js';\r\nimport dynamicProto from '@microsoft/dynamicproto-js';\r\n/**\r\n * @description Monitors browser for offline events\r\n * @export default - Offline: Static instance of OfflineListener\r\n * @class OfflineListener\r\n */\r\nvar OfflineListener = /** @class */ (function () {\r\n    function OfflineListener() {\r\n        var _window = getWindow();\r\n        var _document = getDocument();\r\n        var isListening = false;\r\n        var _onlineStatus = true;\r\n        dynamicProto(OfflineListener, this, function (_self) {\r\n            try {\r\n                if (_window) {\r\n                    if (EventHelper.Attach(_window, 'online', _setOnline)) {\r\n                        EventHelper.Attach(_window, 'offline', _setOffline);\r\n                        isListening = true;\r\n                    }\r\n                }\r\n                if (_document) {\r\n                    // Also attach to the document.body or document\r\n                    var target = _document.body || _document;\r\n                    if (!CoreUtils.isUndefined(target.ononline)) {\r\n                        target.ononline = _setOnline;\r\n                        target.onoffline = _setOffline;\r\n                        isListening = true;\r\n                    }\r\n                }\r\n            }\r\n            catch (e) {\r\n                // this makes react-native less angry\r\n                isListening = false;\r\n            }\r\n            _self.isListening = isListening;\r\n            _self.isOnline = function () {\r\n                var result = true;\r\n                var _navigator = getNavigator();\r\n                if (isListening) {\r\n                    result = _onlineStatus;\r\n                }\r\n                else if (_navigator && !CoreUtils.isNullOrUndefined(_navigator.onLine)) {\r\n                    result = _navigator.onLine;\r\n                }\r\n                return result;\r\n            };\r\n            _self.isOffline = function () {\r\n                return !_self.isOnline();\r\n            };\r\n            function _setOnline() {\r\n                _onlineStatus = true;\r\n            }\r\n            function _setOffline() {\r\n                _onlineStatus = false;\r\n            }\r\n        });\r\n    }\r\n    OfflineListener.prototype.isOnline = function () {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n        return false;\r\n    };\r\n    OfflineListener.prototype.isOffline = function () {\r\n        // @DynamicProtoStub -- DO NOT add any code as this will be removed during packaging\r\n        return false;\r\n    };\r\n    OfflineListener.Offline = new OfflineListener;\r\n    return OfflineListener;\r\n}());\r\nexport { OfflineListener };\r\nexport var Offline = OfflineListener.Offline;\r\n//# sourceMappingURL=Offline.js.map"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;wDAOM;AACN;AACA;AACA;AACA;AACA;AACA"}