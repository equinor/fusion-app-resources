{"version":3,"file":"EnvelopeCreator.js.map","sources":["EnvelopeCreator.js"],"sourcesContent":["import { Data, Envelope, RemoteDependencyData, Event, Exception, Metric, PageView, Trace, PageViewPerformance, CtxTagKeys, HttpMethod, SampleRate, } from '@microsoft/applicationinsights-common';\r\nimport { CoreUtils, LoggingSeverity, _InternalMessageId, hasJSON, getJSON, objForEachKey } from '@microsoft/applicationinsights-core-js';\r\n// these two constants are used to filter out properties not needed when trying to extract custom properties and measurements from the incoming payload\r\nvar strBaseType = 'baseType';\r\nvar strBaseData = 'baseData';\r\nvar strProperties = 'properties';\r\nvar strTrue = 'true';\r\nvar arrForEach = CoreUtils.arrForEach;\r\nvar isNullOrUndefined = CoreUtils.isNullOrUndefined;\r\nfunction _setValueIf(target, field, value) {\r\n    if (target && value) {\r\n        target[field] = value;\r\n        return target[field];\r\n    }\r\n    return null;\r\n}\r\nvar EnvelopeCreator = /** @class */ (function () {\r\n    function EnvelopeCreator() {\r\n    }\r\n    EnvelopeCreator.extractPropsAndMeasurements = function (data, properties, measurements) {\r\n        if (!isNullOrUndefined(data)) {\r\n            objForEachKey(data, function (key, value) {\r\n                if (CoreUtils.isNumber(value)) {\r\n                    measurements[key] = value;\r\n                }\r\n                else if (CoreUtils.isString(value)) {\r\n                    properties[key] = value;\r\n                }\r\n                else if (hasJSON()) {\r\n                    properties[key] = getJSON().stringify(value);\r\n                }\r\n            });\r\n        }\r\n    };\r\n    // TODO: Do we want this to take logger as arg or use this._logger as nonstatic?\r\n    EnvelopeCreator.createEnvelope = function (logger, envelopeType, telemetryItem, data) {\r\n        var envelope = new Envelope(logger, data, envelopeType);\r\n        _setValueIf(envelope, 'sampleRate', telemetryItem[SampleRate]);\r\n        if ((telemetryItem[strBaseData] || {}).startTime) {\r\n            envelope.time = CoreUtils.toISOString(telemetryItem[strBaseData].startTime);\r\n        }\r\n        envelope.iKey = telemetryItem.iKey;\r\n        var iKeyNoDashes = telemetryItem.iKey.replace(/-/g, \"\");\r\n        envelope.name = envelope.name.replace(\"{0}\", iKeyNoDashes);\r\n        // extract all extensions from ctx\r\n        EnvelopeCreator.extractPartAExtensions(telemetryItem, envelope);\r\n        // loop through the envelope tags (extension of Part A) and pick out the ones that should go in outgoing envelope tags\r\n        telemetryItem.tags = telemetryItem.tags || [];\r\n        return envelope;\r\n    };\r\n    /*\r\n     * Maps Part A data from CS 4.0\r\n     */\r\n    EnvelopeCreator.extractPartAExtensions = function (item, env) {\r\n        // todo: switch to keys from common in this method\r\n        var envTags = env.tags = env.tags || {};\r\n        var itmExt = item.ext = item.ext || {};\r\n        var itmTags = item.tags = item.tags || [];\r\n        var extUser = itmExt.user;\r\n        if (extUser) {\r\n            _setValueIf(envTags, CtxTagKeys.userAuthUserId, extUser.authId);\r\n            _setValueIf(envTags, CtxTagKeys.userId, extUser.id || extUser.localId);\r\n        }\r\n        var extApp = itmExt.app;\r\n        if (extApp) {\r\n            _setValueIf(envTags, CtxTagKeys.sessionId, extApp.sesId);\r\n        }\r\n        var extDevice = itmExt.device;\r\n        if (extDevice) {\r\n            _setValueIf(envTags, CtxTagKeys.deviceId, extDevice.id || extDevice.localId);\r\n            _setValueIf(envTags, CtxTagKeys.deviceType, extDevice.deviceClass);\r\n            _setValueIf(envTags, CtxTagKeys.deviceIp, extDevice.ip);\r\n            _setValueIf(envTags, CtxTagKeys.deviceModel, extDevice.model);\r\n            _setValueIf(envTags, CtxTagKeys.deviceType, extDevice.deviceType);\r\n        }\r\n        var web = item.ext.web;\r\n        if (web) {\r\n            _setValueIf(envTags, CtxTagKeys.deviceLanguage, web.browserLang);\r\n            _setValueIf(envTags, CtxTagKeys.deviceBrowserVersion, web.browserVer);\r\n            _setValueIf(envTags, CtxTagKeys.deviceBrowser, web.browser);\r\n            var envData = env.data = env.data || {};\r\n            var envBaseData = envData[strBaseData] = envData[strBaseData] || {};\r\n            var envProps = envBaseData[strProperties] = envBaseData[strProperties] || {};\r\n            _setValueIf(envProps, 'domain', web.domain);\r\n            _setValueIf(envProps, 'isManual', web.isManual ? strTrue : null);\r\n            _setValueIf(envProps, 'screenRes', web.screenRes);\r\n            _setValueIf(envProps, 'userConsent', web.userConsent ? strTrue : null);\r\n        }\r\n        var extOs = itmExt.os;\r\n        if (extOs) {\r\n            _setValueIf(envTags, CtxTagKeys.deviceOS, extOs.name);\r\n        }\r\n        // No support for mapping Trace.traceState to 2.0 as it is currently empty\r\n        var extTrace = itmExt.trace;\r\n        if (extTrace) {\r\n            _setValueIf(envTags, CtxTagKeys.operationParentId, extTrace.parentID);\r\n            _setValueIf(envTags, CtxTagKeys.operationName, extTrace.name);\r\n            _setValueIf(envTags, CtxTagKeys.operationId, extTrace.traceID);\r\n        }\r\n        // Sample 4.0 schema\r\n        //  {\r\n        //     \"time\" : \"2018-09-05T22:51:22.4936Z\",\r\n        //     \"name\" : \"MetricWithNamespace\",\r\n        //     \"iKey\" : \"ABC-5a4cbd20-e601-4ef5-a3c6-5d6577e4398e\",\r\n        //     \"ext\": {  \"cloud\": {\r\n        //          \"role\": \"WATSON3\",\r\n        //          \"roleInstance\": \"CO4AEAP00000260\"\r\n        //      },\r\n        //      \"device\": {}, \"correlation\": {} },\r\n        //      \"tags\": [\r\n        //        { \"amazon.region\" : \"east2\" },\r\n        //        { \"os.expid\" : \"wp:02df239\" }\r\n        //     ]\r\n        //   }\r\n        var tgs = {};\r\n        // deals with tags.push({object})\r\n        for (var i = itmTags.length - 1; i >= 0; i--) {\r\n            var tg = itmTags[i];\r\n            objForEachKey(tg, function (key, value) {\r\n                tgs[key] = value;\r\n            });\r\n            itmTags.splice(i, 1);\r\n        }\r\n        // deals with tags[key]=value (and handles hasOwnProperty)\r\n        objForEachKey(itmTags, function (tg, value) {\r\n            tgs[tg] = value;\r\n        });\r\n        env.tags = __assign({}, envTags, tgs);\r\n        if (!env.tags[CtxTagKeys.internalSdkVersion]) {\r\n            // Append a version in case it is not already set\r\n            env.tags[CtxTagKeys.internalSdkVersion] = \"javascript:\" + EnvelopeCreator.Version;\r\n        }\r\n    };\r\n    EnvelopeCreator.prototype.Init = function (logger, telemetryItem) {\r\n        this._logger = logger;\r\n        if (isNullOrUndefined(telemetryItem[strBaseData])) {\r\n            this._logger.throwInternal(LoggingSeverity.CRITICAL, _InternalMessageId.TelemetryEnvelopeInvalid, \"telemetryItem.baseData cannot be null.\");\r\n        }\r\n    };\r\n    EnvelopeCreator.Version = \"2.5.11\";\r\n    return EnvelopeCreator;\r\n}());\r\nexport { EnvelopeCreator };\r\nvar DependencyEnvelopeCreator = /** @class */ (function (_super) {\r\n    __extends(DependencyEnvelopeCreator, _super);\r\n    function DependencyEnvelopeCreator() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    DependencyEnvelopeCreator.prototype.Create = function (logger, telemetryItem) {\r\n        _super.prototype.Init.call(this, logger, telemetryItem);\r\n        var customMeasurements = telemetryItem[strBaseData].measurements || {};\r\n        var customProperties = telemetryItem[strBaseData][strProperties] || {};\r\n        EnvelopeCreator.extractPropsAndMeasurements(telemetryItem.data, customProperties, customMeasurements);\r\n        var bd = telemetryItem[strBaseData];\r\n        if (isNullOrUndefined(bd)) {\r\n            logger.warnToConsole(\"Invalid input for dependency data\");\r\n            return null;\r\n        }\r\n        var method = bd[strProperties] && bd[strProperties][HttpMethod] ? bd[strProperties][HttpMethod] : \"GET\";\r\n        var remoteDepData = new RemoteDependencyData(logger, bd.id, bd.target, bd.name, bd.duration, bd.success, bd.responseCode, method, bd.type, bd.correlationContext, customProperties, customMeasurements);\r\n        var data = new Data(RemoteDependencyData.dataType, remoteDepData);\r\n        return EnvelopeCreator.createEnvelope(logger, RemoteDependencyData.envelopeType, telemetryItem, data);\r\n    };\r\n    DependencyEnvelopeCreator.DependencyEnvelopeCreator = new DependencyEnvelopeCreator();\r\n    return DependencyEnvelopeCreator;\r\n}(EnvelopeCreator));\r\nexport { DependencyEnvelopeCreator };\r\nvar EventEnvelopeCreator = /** @class */ (function (_super) {\r\n    __extends(EventEnvelopeCreator, _super);\r\n    function EventEnvelopeCreator() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    EventEnvelopeCreator.prototype.Create = function (logger, telemetryItem) {\r\n        _super.prototype.Init.call(this, logger, telemetryItem);\r\n        var customProperties = {};\r\n        var customMeasurements = {};\r\n        if (telemetryItem[strBaseType] !== Event.dataType) {\r\n            customProperties['baseTypeSource'] = telemetryItem[strBaseType]; // save the passed in base type as a property\r\n        }\r\n        if (telemetryItem[strBaseType] === Event.dataType) {\r\n            customProperties = telemetryItem[strBaseData][strProperties] || {};\r\n            customMeasurements = telemetryItem[strBaseData].measurements || {};\r\n        }\r\n        else {\r\n            if (telemetryItem[strBaseData]) {\r\n                EnvelopeCreator.extractPropsAndMeasurements(telemetryItem[strBaseData], customProperties, customMeasurements);\r\n            }\r\n        }\r\n        // Extract root level properties from part C telemetryItem.data\r\n        EnvelopeCreator.extractPropsAndMeasurements(telemetryItem.data, customProperties, customMeasurements);\r\n        var eventName = telemetryItem[strBaseData].name;\r\n        var eventData = new Event(logger, eventName, customProperties, customMeasurements);\r\n        var data = new Data(Event.dataType, eventData);\r\n        return EnvelopeCreator.createEnvelope(logger, Event.envelopeType, telemetryItem, data);\r\n    };\r\n    EventEnvelopeCreator.EventEnvelopeCreator = new EventEnvelopeCreator();\r\n    return EventEnvelopeCreator;\r\n}(EnvelopeCreator));\r\nexport { EventEnvelopeCreator };\r\nvar ExceptionEnvelopeCreator = /** @class */ (function (_super) {\r\n    __extends(ExceptionEnvelopeCreator, _super);\r\n    function ExceptionEnvelopeCreator() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    ExceptionEnvelopeCreator.prototype.Create = function (logger, telemetryItem) {\r\n        _super.prototype.Init.call(this, logger, telemetryItem);\r\n        // Extract root level properties from part C telemetryItem.data\r\n        var customMeasurements = telemetryItem[strBaseData].measurements || {};\r\n        var customProperties = telemetryItem[strBaseData][strProperties] || {};\r\n        EnvelopeCreator.extractPropsAndMeasurements(telemetryItem.data, customProperties, customMeasurements);\r\n        var bd = telemetryItem[strBaseData];\r\n        var exData = Exception.CreateFromInterface(logger, bd, customProperties, customMeasurements);\r\n        var data = new Data(Exception.dataType, exData);\r\n        return EnvelopeCreator.createEnvelope(logger, Exception.envelopeType, telemetryItem, data);\r\n    };\r\n    ExceptionEnvelopeCreator.ExceptionEnvelopeCreator = new ExceptionEnvelopeCreator();\r\n    return ExceptionEnvelopeCreator;\r\n}(EnvelopeCreator));\r\nexport { ExceptionEnvelopeCreator };\r\nvar MetricEnvelopeCreator = /** @class */ (function (_super) {\r\n    __extends(MetricEnvelopeCreator, _super);\r\n    function MetricEnvelopeCreator() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    MetricEnvelopeCreator.prototype.Create = function (logger, telemetryItem) {\r\n        _super.prototype.Init.call(this, logger, telemetryItem);\r\n        var baseData = telemetryItem[strBaseData];\r\n        var props = baseData[strProperties] || {};\r\n        var measurements = baseData.measurements || {};\r\n        EnvelopeCreator.extractPropsAndMeasurements(telemetryItem.data, props, measurements);\r\n        var baseMetricData = new Metric(logger, baseData.name, baseData.average, baseData.sampleCount, baseData.min, baseData.max, props, measurements);\r\n        var data = new Data(Metric.dataType, baseMetricData);\r\n        return EnvelopeCreator.createEnvelope(logger, Metric.envelopeType, telemetryItem, data);\r\n    };\r\n    MetricEnvelopeCreator.MetricEnvelopeCreator = new MetricEnvelopeCreator();\r\n    return MetricEnvelopeCreator;\r\n}(EnvelopeCreator));\r\nexport { MetricEnvelopeCreator };\r\nvar PageViewEnvelopeCreator = /** @class */ (function (_super) {\r\n    __extends(PageViewEnvelopeCreator, _super);\r\n    function PageViewEnvelopeCreator() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    PageViewEnvelopeCreator.prototype.Create = function (logger, telemetryItem) {\r\n        _super.prototype.Init.call(this, logger, telemetryItem);\r\n        // Since duration is not part of the domain properties in Common Schema, extract it from part C\r\n        var strDuration = \"duration\";\r\n        var duration;\r\n        var baseData = telemetryItem[strBaseData];\r\n        if (!isNullOrUndefined(baseData) &&\r\n            !isNullOrUndefined(baseData[strProperties]) &&\r\n            !isNullOrUndefined(baseData[strProperties][strDuration])) {\r\n            duration = baseData[strProperties][strDuration];\r\n            delete baseData[strProperties][strDuration];\r\n        }\r\n        else if (!isNullOrUndefined(telemetryItem.data) &&\r\n            !isNullOrUndefined(telemetryItem.data[strDuration])) {\r\n            duration = telemetryItem.data[strDuration];\r\n            delete telemetryItem.data[strDuration];\r\n        }\r\n        var bd = telemetryItem[strBaseData];\r\n        // special case: pageview.id is grabbed from current operation id. Analytics plugin is decoupled from properties plugin, so this is done here instead. This can be made a default telemetry intializer instead if needed to be decoupled from channel\r\n        var currentContextId;\r\n        if (((telemetryItem.ext || {}).trace || {}).traceID) {\r\n            currentContextId = telemetryItem.ext.trace.traceID;\r\n        }\r\n        var id = bd.id || currentContextId;\r\n        var name = bd.name;\r\n        var url = bd.uri;\r\n        var properties = bd[strProperties] || {};\r\n        var measurements = bd.measurements || {};\r\n        // refUri is a field that Breeze still does not recognize as part of Part B. For now, put it in Part C until it supports it as a domain property\r\n        if (!isNullOrUndefined(bd.refUri)) {\r\n            properties[\"refUri\"] = bd.refUri;\r\n        }\r\n        // pageType is a field that Breeze still does not recognize as part of Part B. For now, put it in Part C until it supports it as a domain property\r\n        if (!isNullOrUndefined(bd.pageType)) {\r\n            properties[\"pageType\"] = bd.pageType;\r\n        }\r\n        // isLoggedIn is a field that Breeze still does not recognize as part of Part B. For now, put it in Part C until it supports it as a domain property\r\n        if (!isNullOrUndefined(bd.isLoggedIn)) {\r\n            properties[\"isLoggedIn\"] = bd.isLoggedIn.toString();\r\n        }\r\n        // pageTags is a field that Breeze still does not recognize as part of Part B. For now, put it in Part C until it supports it as a domain property\r\n        if (!isNullOrUndefined(bd[strProperties])) {\r\n            var pageTags = bd[strProperties];\r\n            objForEachKey(pageTags, function (key, value) {\r\n                properties[key] = value;\r\n            });\r\n        }\r\n        EnvelopeCreator.extractPropsAndMeasurements(telemetryItem.data, properties, measurements);\r\n        var pageViewData = new PageView(logger, name, url, duration, properties, measurements, id);\r\n        var data = new Data(PageView.dataType, pageViewData);\r\n        return EnvelopeCreator.createEnvelope(logger, PageView.envelopeType, telemetryItem, data);\r\n    };\r\n    PageViewEnvelopeCreator.PageViewEnvelopeCreator = new PageViewEnvelopeCreator();\r\n    return PageViewEnvelopeCreator;\r\n}(EnvelopeCreator));\r\nexport { PageViewEnvelopeCreator };\r\nvar PageViewPerformanceEnvelopeCreator = /** @class */ (function (_super) {\r\n    __extends(PageViewPerformanceEnvelopeCreator, _super);\r\n    function PageViewPerformanceEnvelopeCreator() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    PageViewPerformanceEnvelopeCreator.prototype.Create = function (logger, telemetryItem) {\r\n        _super.prototype.Init.call(this, logger, telemetryItem);\r\n        var bd = telemetryItem[strBaseData];\r\n        var name = bd.name;\r\n        var url = bd.uri || bd.url;\r\n        var properties = bd[strProperties] || {};\r\n        var measurements = bd.measurements || {};\r\n        EnvelopeCreator.extractPropsAndMeasurements(telemetryItem.data, properties, measurements);\r\n        var baseData = new PageViewPerformance(logger, name, url, undefined, properties, measurements, bd);\r\n        var data = new Data(PageViewPerformance.dataType, baseData);\r\n        return EnvelopeCreator.createEnvelope(logger, PageViewPerformance.envelopeType, telemetryItem, data);\r\n    };\r\n    PageViewPerformanceEnvelopeCreator.PageViewPerformanceEnvelopeCreator = new PageViewPerformanceEnvelopeCreator();\r\n    return PageViewPerformanceEnvelopeCreator;\r\n}(EnvelopeCreator));\r\nexport { PageViewPerformanceEnvelopeCreator };\r\nvar TraceEnvelopeCreator = /** @class */ (function (_super) {\r\n    __extends(TraceEnvelopeCreator, _super);\r\n    function TraceEnvelopeCreator() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    TraceEnvelopeCreator.prototype.Create = function (logger, telemetryItem) {\r\n        _super.prototype.Init.call(this, logger, telemetryItem);\r\n        var message = telemetryItem[strBaseData].message;\r\n        var severityLevel = telemetryItem[strBaseData].severityLevel;\r\n        var props = telemetryItem[strBaseData][strProperties] || {};\r\n        var measurements = telemetryItem[strBaseData].measurements || {};\r\n        EnvelopeCreator.extractPropsAndMeasurements(telemetryItem.data, props, measurements);\r\n        var baseData = new Trace(logger, message, severityLevel, props, measurements);\r\n        var data = new Data(Trace.dataType, baseData);\r\n        return EnvelopeCreator.createEnvelope(logger, Trace.envelopeType, telemetryItem, data);\r\n    };\r\n    TraceEnvelopeCreator.TraceEnvelopeCreator = new TraceEnvelopeCreator();\r\n    return TraceEnvelopeCreator;\r\n}(EnvelopeCreator));\r\nexport { TraceEnvelopeCreator };\r\n//# sourceMappingURL=EnvelopeCreator.js.map"],"names":[],"mappings}