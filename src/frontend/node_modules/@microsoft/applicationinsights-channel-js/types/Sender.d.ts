import { ISenderConfig, XDomainRequest as IXDomainRequest, IBackendResponse } from './Interfaces';
import { ISendBuffer } from './SendBuffer';
import { IEnvelope, IChannelControlsAI, IConfig } from '@microsoft/applicationinsights-common';
import { ITelemetryItem, IProcessTelemetryContext, IConfiguration, IDiagnosticLogger, IAppInsightsCore, IPlugin, BaseTelemetryPlugin, ITelemetryPluginChain, SendRequestReason } from '@microsoft/applicationinsights-core-js';
import { Sample } from './TelemetryProcessors/Sample';
export declare type SenderFunction = (payload: string[], isAsync: boolean) => void;
export declare class Sender extends BaseTelemetryPlugin implements IChannelControlsAI {
    static constructEnvelope(orig: ITelemetryItem, iKey: string, logger: IDiagnosticLogger): IEnvelope;
    private static _getDefaultAppInsightsChannelConfig();
    private static _getEmptyAppInsightsChannelConfig();
    priority: number;
    identifier: string;
    /**
     * The configuration for this sender instance
     */
    _senderConfig: ISenderConfig;
    /**
     * A method which will cause data to be send to the url
     */
    _sender: SenderFunction;
    /**
     * A send buffer object
     */
    _buffer: ISendBuffer;
    /**
     * AppId of this component parsed from some backend response.
     */
    _appId: string;
    /**
     * Whether XMLHttpRequest object is supported. Older version of IE (8,9) do not support it.
     */
    _XMLHttpRequestSupported: boolean;
    protected _sample: Sample;
    constructor();
    pause(): void;
    resume(): void;
    flush(): void;
    onunloadFlush(): void;
    teardown(): void;
    initialize(config: IConfiguration & IConfig, core: IAppInsightsCore, extensions: IPlugin[], pluginChain?: ITelemetryPluginChain): void;
    processTelemetry(telemetryItem: ITelemetryItem, itemCtx?: IProcessTelemetryContext): void;
    /**
     * xhr state changes
     */
    _xhrReadyStateChange(xhr: XMLHttpRequest, payload: string[], countOfItemsInPayload: number): void;
    /**
     * Immediately send buffered data
     * @param async {boolean} - Indicates if the events should be sent asynchronously
     * @param forcedSender {SenderFunction} - Indicates the forcedSender, undefined if not passed
     */
    triggerSend(async?: boolean, forcedSender?: SenderFunction, sendReason?: SendRequestReason): void;
    /**
     * error handler
     */
    _onError(payload: string[], message: string, event?: ErrorEvent): void;
    /**
     * partial success handler
     */
    _onPartialSuccess(payload: string[], results: IBackendResponse): void;
    /**
     * success handler
     */
    _onSuccess(payload: string[], countOfItemsInPayload: number): void;
    /**
     * xdr state changes
     */
    _xdrOnLoad(xdr: IXDomainRequest, payload: string[]): void;
}
