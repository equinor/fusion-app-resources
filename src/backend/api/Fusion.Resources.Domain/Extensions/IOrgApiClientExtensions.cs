using Fusion.ApiClients.Org;
using Newtonsoft.Json;
using System;
using System.Net;
using System.Net.Http;
using System.Text;
using System.Threading.Tasks;
using Fusion.Resources.Domain.Commands;

namespace Fusion.Resources.Domain
{
    public static class IOrgApiClientExtensions
    {
        public static async Task<RequestResponse<TResponse>> GetAsync<TResponse>(this IOrgApiClient client, string url)
        {
            var request = new HttpRequestMessage(HttpMethod.Get, url);
            var response = await client.SendAsync(request);
            return await RequestResponse<TResponse>.FromResponseAsync(response);
        }

        public static async Task<RequestResponse<TResponse>> PutAsync<TResponse>(this IOrgApiClient client, string url)
        {
            var request = new HttpRequestMessage(HttpMethod.Put, url);
            var response = await client.SendAsync(request);
            return await RequestResponse<TResponse>.FromResponseAsync(response);
        }

        public static async Task<RequestResponse<ApiPositionV2>> PatchPositionInstanceAsync(this IOrgApiClient client, ApiPositionV2 position, Guid positionInstanceId, PatchPositionInstanceV2 instance)
        {
            if (position.Id == Guid.Empty)
                throw new ArgumentException("Position id cannot be empty when updating.");

            if (position.ProjectId == Guid.Empty && (position.Project?.ProjectId == null || position.Project.ProjectId == Guid.Empty))
                throw new ArgumentException("Could not locate the project id on the position. Cannot generate url from position");


            var url = $"projects/{position.ProjectId}/positions/{position.Id}/instances/{positionInstanceId}";

            var request = new HttpRequestMessage(HttpMethod.Patch, url);
            request.Content = new StringContent(JsonConvert.SerializeObject(instance, new JsonSerializerSettings { NullValueHandling = NullValueHandling.Ignore }), Encoding.UTF8, "application/json");

            var response = await client.SendAsync(request);

            return await RequestResponse<ApiPositionV2>.FromResponseAsync(response);
        }

        /// <summary>
        /// Resolve the task owner for the position.
        /// 
        /// The task owner could be empty, this could be scenarios where the report path cannot be calculated. Will maybe default to project director here.
        /// </summary>
        /// <param name="projectId">The project the position exists in</param>
        /// <param name="positionId">The position id</param>
        /// <param name="date">Optionally provide a date to use for calculating the report path. If left out today is used.</param>
        /// <returns>Task owner or null if none could be located</returns>
        public static async Task<RequestResponse<ApiPositionV2?>> GetTaskOwnerAsync(this IOrgApiClient client, Guid projectId, Guid positionId, DateTime? date = null)
        {
            if (positionId == Guid.Empty)
                throw new ArgumentException("Position id cannot be empty when updating.");

            var url = $"projects/{projectId}/positions/{positionId}/task-owner?api-version=2.0";

            if (date != null)
                url += $"&date={date:yyyy-MM-dd}";

            return await GetAsync<ApiPositionV2?>(client, url);
        }

        /// <summary>
        /// Updates a position. The position must have it's id, project and optionally the contract entity populated. 
        /// The url is generated by using the project and contract reference, along with the position id. 
        /// 
        /// Preferably the position should be first fetched before updated.
        /// </summary>
        /// <param name="client"></param>
        /// <param name="position"></param>
        /// <returns></returns>
        public static async Task<RequestResponse<ApiPositionV2>> PutPositionAsync(this IOrgApiClient client, ApiPositionV2 position)
        {
            if (position.Id == Guid.Empty)
                throw new ArgumentException("Position id cannot be empty when updating.");

            if (position.ProjectId == Guid.Empty && (position.Project?.ProjectId == null || position.Project.ProjectId == Guid.Empty))
                throw new ArgumentException("Could not locate the project id on the position. Cannot generate url from position");


            var url = position.Contract switch
            {
                null => $"/projects/{position.Project.ProjectId}/positions/{position.Id}",
                _ => $"/projects/{position.Project.ProjectId}/contracts/{position.Contract.Id}/positions/{position.Id}"
            };


            var request = new HttpRequestMessage(HttpMethod.Put, url);
            request.Content = new StringContent(JsonConvert.SerializeObject(position), Encoding.UTF8, "application/json");

            var response = await client.SendAsync(request);

            return await RequestResponse<ApiPositionV2>.FromResponseAsync(response);
        }

        public static async Task<RequestResponse<ApiPositionV2>> CreatePositionAsync(this IOrgApiClient client, Guid projectId, Guid contractId, ApiPositionV2 position)
        {
            var url = $"/projects/{projectId}/contracts/{contractId}/positions";

            var request = new HttpRequestMessage(HttpMethod.Post, url);
            request.Content = new StringContent(JsonConvert.SerializeObject(position), Encoding.UTF8, "application/json");

            var response = await client.SendAsync(request);

            return await RequestResponse<ApiPositionV2>.FromResponseAsync(response);
        }

        public static Task<RequestResponse<ApiPositionV2>> GetPositionV2Async(this IOrgApiClient client, Guid projectId, Guid contractId, Guid positionId) =>
            client.GetAsync<ApiPositionV2>($"/projects/{projectId}/contracts/{contractId}/positions/{positionId}?api-version=2.0");

        public static Task<RequestResponse<ApiPositionV2>> GetPositionV2Async(this IOrgApiClient client, Guid projectId, Guid positionId) =>
            client.GetAsync<ApiPositionV2>($"/projects/{projectId}/positions/{positionId}?api-version=2.0");

    }

    public class RequestResponse<TResponse>
    {
        private RequestResponse(HttpResponseMessage response, string content, TResponse value)
        {
            Value = value;
            Content = content;
            Response = response;
        }
        private RequestResponse(HttpResponseMessage response, string content)
        {
            Content = content;
            Response = response;
            Value = default(TResponse)!;
        }

        public HttpStatusCode StatusCode => Response.StatusCode;
        public bool IsSuccessStatusCode => Response.IsSuccessStatusCode;

        public string Content { get; }
        public TResponse Value { get; }
        public HttpResponseMessage Response { get; }

        public static async Task<RequestResponse<TResponse>> FromResponseAsync(HttpResponseMessage response)
        {
            var content = await response.Content.ReadAsStringAsync();

            if (response.IsSuccessStatusCode)
            {
                var value = JsonConvert.DeserializeObject<TResponse>(content);

                return new RequestResponse<TResponse>(response, content, value);
            }

            return new RequestResponse<TResponse>(response, content);
        }
    }
}
