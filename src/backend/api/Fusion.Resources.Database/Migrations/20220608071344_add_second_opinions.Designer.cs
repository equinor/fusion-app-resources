// <auto-generated />
using System;
using Fusion.Resources.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Fusion.Resources.Database.Migrations
{
    [DbContext(typeof(ResourcesDbContext))]
    [Migration("20220608071344_add_second_opinions")]
    partial class add_second_opinions
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Fusion.Resources.Database.Entities.DbContract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("Allocated")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("AllocatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContractNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OrgContractId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AllocatedById");

                    b.HasIndex("ProjectId");

                    b.ToTable("Contracts");
                });

            modelBuilder.Entity("Fusion.Resources.Database.Entities.DbContractPersonnel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ContractId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("Updated")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("PersonId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("ContractPersonnel");
                });

            modelBuilder.Entity("Fusion.Resources.Database.Entities.DbContractPersonnelReplacement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ChangeType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("ContractId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("FromPerson")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ToPerson")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("UPN")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId", "ContractId")
                        .IsClustered(false)
                        .HasAnnotation("SqlServer:Include", new[] { "UPN", "FromPerson", "ToPerson", "ChangeType", "Created", "CreatedBy" });

                    b.ToTable("ContractPersonnelReplacementChanges");
                });

            modelBuilder.Entity("Fusion.Resources.Database.Entities.DbContractorRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ContractId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastActivity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)));

                    b.Property<Guid?>("OriginalPositionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("Updated")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastActivity")
                        .IsClustered(false);

                    b.HasIndex("PersonId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("ContractorRequests");
                });

            modelBuilder.Entity("Fusion.Resources.Database.Entities.DbConversationMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("PropertiesJson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Recpient")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<Guid>("RequestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("Sent")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("RequestId");

                    b.HasIndex("SenderId");

                    b.ToTable("RequestConversations");
                });

            modelBuilder.Entity("Fusion.Resources.Database.Entities.DbDelegatedRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Classification")
                        .HasColumnType("int");

                    b.Property<Guid>("ContractId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("RecertifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("RecertifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("ValidTo")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("PersonId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("RecertifiedById");

                    b.ToTable("DelegatedRoles");
                });

            modelBuilder.Entity("Fusion.Resources.Database.Entities.DbDepartmentResponsible", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<DateTimeOffset>("DateFrom")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("DateTo")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateUpdated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("DepartmentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ResponsibleAzureObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("DepartmentResponsibles");
                });

            modelBuilder.Entity("Fusion.Resources.Database.Entities.DbExternalPersonnelPerson", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccountStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("AzureUniqueId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DawinciCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTimeOffset?>("Deleted")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("JobTitle")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LinkedInProfile")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Mail")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PersonIdReplacements")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("PreferredContractMail")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UPN")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("Mail")
                        .IsClustered(false);

                    b.ToTable("ExternalPersonnel");
                });

            modelBuilder.Entity("Fusion.Resources.Database.Entities.DbPerson", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccountType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("AzureUniqueId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("JobTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mail")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AzureUniqueId")
                        .IsUnique();

                    b.HasIndex("Mail")
                        .IsClustered(false);

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("Fusion.Resources.Database.Entities.DbPersonAbsence", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("AbsencePercentage")
                        .HasColumnType("float");

                    b.Property<DateTimeOffset>("AppliesFrom")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("AppliesTo")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("bit");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("PersonId");

                    b.ToTable("PersonAbsences");
                });

            modelBuilder.Entity("Fusion.Resources.Database.Entities.DbPersonNote", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AzureUniqueId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasMaxLength(2500)
                        .HasColumnType("nvarchar(2500)");

                    b.Property<bool>("IsShared")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTimeOffset>("Updated")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("UpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AzureUniqueId")
                        .IsClustered(false)
                        .HasAnnotation("SqlServer:Include", new[] { "Id", "Title", "Content", "IsShared", "Updated", "UpdatedById" });

                    b.HasIndex("UpdatedById");

                    b.ToTable("PersonNotes");
                });

            modelBuilder.Entity("Fusion.Resources.Database.Entities.DbPersonnelDiscipline", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DbExternalPersonnelPersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PersonnelId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DbExternalPersonnelPersonId");

                    b.ToTable("DbPersonnelDiscipline");
                });

            modelBuilder.Entity("Fusion.Resources.Database.Entities.DbProject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DomainId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OrgProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("Fusion.Resources.Database.Entities.DbRequestAction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AssignedToId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Body")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRequired")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(0)");

                    b.Property<bool>("IsResolved")
                        .HasColumnType("bit");

                    b.Property<string>("PropertiesJson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RequestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ResolvedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ResolvedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Responsible")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SentById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubType")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("Id");

                    b.HasIndex("AssignedToId");

                    b.HasIndex("RequestId");

                    b.HasIndex("ResolvedById");

                    b.HasIndex("SentById");

                    b.ToTable("RequestActions");
                });

            modelBuilder.Entity("Fusion.Resources.Database.Entities.DbRequestComment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Origin")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RequestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("Updated")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("RequestId")
                        .IsClustered(false);

                    b.HasIndex("UpdatedById");

                    b.ToTable("RequestComments");
                });

            modelBuilder.Entity("Fusion.Resources.Database.Entities.DbResourceAllocationRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AdditionalNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AssignedDepartment")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("CorrelationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Discipline")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsDraft")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("LastActivity")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("OrgPositionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProposedChanges")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("RequestNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("RequestOwner")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("Updated")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("ResourceAllocationRequests");
                });

            modelBuilder.Entity("Fusion.Resources.Database.Entities.DbResponsibilityMatrix", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BasePositionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Discipline")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("LocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ResponsibleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Sector")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Unit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("Updated")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ProjectId");

                    b.HasIndex("ResponsibleId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("ResponsibilityMatrices");
                });

            modelBuilder.Entity("Fusion.Resources.Database.Entities.DbSecondOpinionPrompt", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<Guid>("RequestId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("RequestId");

                    b.ToTable("SecondOpinions");
                });

            modelBuilder.Entity("Fusion.Resources.Database.Entities.DbSecondOpinionResponse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("AnsweredAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("AssignedToId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<Guid>("PromptId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.HasIndex("AssignedToId");

                    b.HasIndex("PromptId");

                    b.ToTable("SecondOpinionResponses");
                });

            modelBuilder.Entity("Fusion.Resources.Database.Entities.DbSharedRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("GrantedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsRevoked")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid>("RequestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("RevokedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Scope")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("SharedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SharedWithId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("RequestId");

                    b.HasIndex("SharedById");

                    b.HasIndex("SharedWithId", "RequestId", "IsRevoked");

                    b.ToTable("SharedRequests");
                });

            modelBuilder.Entity("Fusion.Resources.Database.Entities.DbWorkflow", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("Completed")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LogicAppName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LogicAppVersion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RequestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("RequestType")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SystemMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("TerminatedbyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("WorkflowClassType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("TerminatedbyId");

                    b.HasIndex("RequestId", "RequestType");

                    b.ToTable("Workflows");
                });

            modelBuilder.Entity("Fusion.Resources.Database.Entities.DbWorkflowStep", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("WorkflowId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("Completed")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("CompletedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DueDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NextStep")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PreviousStep")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("Started")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id", "WorkflowId");

                    b.HasIndex("CompletedById");

                    b.HasIndex("WorkflowId");

                    b.ToTable("DbWorkflowStep");
                });

            modelBuilder.Entity("Fusion.Resources.Database.Entities.DbContract", b =>
                {
                    b.HasOne("Fusion.Resources.Database.Entities.DbPerson", "AllocatedBy")
                        .WithMany()
                        .HasForeignKey("AllocatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Fusion.Resources.Database.Entities.DbProject", "Project")
                        .WithMany("Contracts")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AllocatedBy");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Fusion.Resources.Database.Entities.DbContractPersonnel", b =>
                {
                    b.HasOne("Fusion.Resources.Database.Entities.DbContract", "Contract")
                        .WithMany()
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Fusion.Resources.Database.Entities.DbPerson", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Fusion.Resources.Database.Entities.DbExternalPersonnelPerson", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Fusion.Resources.Database.Entities.DbProject", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Fusion.Resources.Database.Entities.DbPerson", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Contract");

                    b.Navigation("CreatedBy");

                    b.Navigation("Person");

                    b.Navigation("Project");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("Fusion.Resources.Database.Entities.DbContractorRequest", b =>
                {
                    b.HasOne("Fusion.Resources.Database.Entities.DbContract", "Contract")
                        .WithMany()
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Fusion.Resources.Database.Entities.DbPerson", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Fusion.Resources.Database.Entities.DbContractPersonnel", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Fusion.Resources.Database.Entities.DbProject", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Fusion.Resources.Database.Entities.DbPerson", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.OwnsOne("Fusion.Resources.Database.Entities.DbContractorRequest+ProvisionStatus", "ProvisioningStatus", b1 =>
                        {
                            b1.Property<Guid>("DbContractorRequestId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("ErrorMessage")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ErrorPayload")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<Guid?>("PositionId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTimeOffset?>("Provisioned")
                                .HasColumnType("datetimeoffset");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("DbContractorRequestId");

                            b1.ToTable("ContractorRequests");

                            b1.WithOwner()
                                .HasForeignKey("DbContractorRequestId");
                        });

                    b.OwnsOne("Fusion.Resources.Database.Entities.DbContractorRequest+RequestPosition", "Position", b1 =>
                        {
                            b1.Property<Guid>("DbContractorRequestId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTime>("AppliesFrom")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime>("AppliesTo")
                                .HasColumnType("datetime2");

                            b1.Property<Guid>("BasePositionId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Obs")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<double>("Workload")
                                .HasColumnType("float");

                            b1.HasKey("DbContractorRequestId");

                            b1.ToTable("ContractorRequests");

                            b1.WithOwner()
                                .HasForeignKey("DbContractorRequestId");

                            b1.OwnsOne("Fusion.Resources.Database.Entities.DbContractorRequest+PositionTaskOwner", "TaskOwner", b2 =>
                                {
                                    b2.Property<Guid>("RequestPositionDbContractorRequestId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<Guid?>("PositionId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<Guid?>("RequestId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.HasKey("RequestPositionDbContractorRequestId");

                                    b2.ToTable("ContractorRequests");

                                    b2.WithOwner()
                                        .HasForeignKey("RequestPositionDbContractorRequestId");
                                });

                            b1.Navigation("TaskOwner");
                        });

                    b.Navigation("Contract");

                    b.Navigation("CreatedBy");

                    b.Navigation("Person");

                    b.Navigation("Position")
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("ProvisioningStatus")
                        .IsRequired();

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("Fusion.Resources.Database.Entities.DbConversationMessage", b =>
                {
                    b.HasOne("Fusion.Resources.Database.Entities.DbResourceAllocationRequest", null)
                        .WithMany("Conversation")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Fusion.Resources.Database.Entities.DbPerson", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Fusion.Resources.Database.Entities.DbDelegatedRole", b =>
                {
                    b.HasOne("Fusion.Resources.Database.Entities.DbContract", "Contract")
                        .WithMany()
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Fusion.Resources.Database.Entities.DbPerson", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Fusion.Resources.Database.Entities.DbPerson", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Fusion.Resources.Database.Entities.DbProject", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Fusion.Resources.Database.Entities.DbPerson", "RecertifiedBy")
                        .WithMany()
                        .HasForeignKey("RecertifiedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Contract");

                    b.Navigation("CreatedBy");

                    b.Navigation("Person");

                    b.Navigation("Project");

                    b.Navigation("RecertifiedBy");
                });

            modelBuilder.Entity("Fusion.Resources.Database.Entities.DbPersonAbsence", b =>
                {
                    b.HasOne("Fusion.Resources.Database.Entities.DbPerson", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Fusion.Resources.Database.Entities.DbPerson", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsOne("Fusion.Resources.Database.Entities.DbOpTaskDetails", "TaskDetails", b1 =>
                        {
                            b1.Property<Guid>("DbPersonAbsenceId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid?>("BasePositionId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Location")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("RoleName")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("TaskName")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("DbPersonAbsenceId");

                            b1.ToTable("PersonAbsences");

                            b1.WithOwner()
                                .HasForeignKey("DbPersonAbsenceId");
                        });

                    b.Navigation("CreatedBy");

                    b.Navigation("Person");

                    b.Navigation("TaskDetails");
                });

            modelBuilder.Entity("Fusion.Resources.Database.Entities.DbPersonNote", b =>
                {
                    b.HasOne("Fusion.Resources.Database.Entities.DbPerson", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("Fusion.Resources.Database.Entities.DbPersonnelDiscipline", b =>
                {
                    b.HasOne("Fusion.Resources.Database.Entities.DbExternalPersonnelPerson", null)
                        .WithMany("Disciplines")
                        .HasForeignKey("DbExternalPersonnelPersonId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Fusion.Resources.Database.Entities.DbRequestAction", b =>
                {
                    b.HasOne("Fusion.Resources.Database.Entities.DbPerson", "AssignedTo")
                        .WithMany()
                        .HasForeignKey("AssignedToId");

                    b.HasOne("Fusion.Resources.Database.Entities.DbResourceAllocationRequest", "Request")
                        .WithMany("Actions")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Fusion.Resources.Database.Entities.DbPerson", "ResolvedBy")
                        .WithMany()
                        .HasForeignKey("ResolvedById");

                    b.HasOne("Fusion.Resources.Database.Entities.DbPerson", "SentBy")
                        .WithMany()
                        .HasForeignKey("SentById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssignedTo");

                    b.Navigation("Request");

                    b.Navigation("ResolvedBy");

                    b.Navigation("SentBy");
                });

            modelBuilder.Entity("Fusion.Resources.Database.Entities.DbRequestComment", b =>
                {
                    b.HasOne("Fusion.Resources.Database.Entities.DbPerson", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Fusion.Resources.Database.Entities.DbPerson", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("Fusion.Resources.Database.Entities.DbResourceAllocationRequest", b =>
                {
                    b.HasOne("Fusion.Resources.Database.Entities.DbPerson", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Fusion.Resources.Database.Entities.DbProject", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Fusion.Resources.Database.Entities.DbPerson", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.OwnsOne("Fusion.Resources.Database.Entities.DbResourceAllocationRequest+DbOpPositionInstance", "OrgPositionInstance", b1 =>
                        {
                            b1.Property<Guid>("DbResourceAllocationRequestId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTime>("AppliesFrom")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime>("AppliesTo")
                                .HasColumnType("datetime2");

                            b1.Property<string>("AssignedToMail")
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)");

                            b1.Property<Guid?>("AssignedToUniqueId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("Id")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid?>("LocationId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Obs")
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)");

                            b1.Property<double?>("Workload")
                                .HasColumnType("float");

                            b1.HasKey("DbResourceAllocationRequestId");

                            b1.ToTable("ResourceAllocationRequests");

                            b1.WithOwner()
                                .HasForeignKey("DbResourceAllocationRequestId");
                        });

                    b.OwnsOne("Fusion.Resources.Database.Entities.DbResourceAllocationRequest+DbOpProposalParameters", "ProposalParameters", b1 =>
                        {
                            b1.Property<Guid>("DbResourceAllocationRequestId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTime?>("ChangeFrom")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime?>("ChangeTo")
                                .HasColumnType("datetime2");

                            b1.Property<string>("ChangeType")
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)");

                            b1.Property<string>("Scope")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("DbResourceAllocationRequestId");

                            b1.ToTable("ResourceAllocationRequests");

                            b1.WithOwner()
                                .HasForeignKey("DbResourceAllocationRequestId");
                        });

                    b.OwnsOne("Fusion.Resources.Database.Entities.DbResourceAllocationRequest+DbOpProposedPerson", "ProposedPerson", b1 =>
                        {
                            b1.Property<Guid>("DbResourceAllocationRequestId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid?>("AzureUniqueId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<bool>("HasBeenProposed")
                                .HasColumnType("bit");

                            b1.Property<string>("Mail")
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)");

                            b1.Property<DateTimeOffset?>("ProposedAt")
                                .HasColumnType("datetimeoffset");

                            b1.Property<bool>("WasNotified")
                                .HasColumnType("bit");

                            b1.HasKey("DbResourceAllocationRequestId");

                            b1.ToTable("ResourceAllocationRequests");

                            b1.WithOwner()
                                .HasForeignKey("DbResourceAllocationRequestId");
                        });

                    b.OwnsOne("Fusion.Resources.Database.Entities.DbResourceAllocationRequest+DbOpProvisionStatus", "ProvisioningStatus", b1 =>
                        {
                            b1.Property<Guid>("DbResourceAllocationRequestId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("ErrorMessage")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ErrorPayload")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<Guid?>("OrgInstanceId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid?>("OrgPositionId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid?>("OrgProjectId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTimeOffset?>("Provisioned")
                                .HasColumnType("datetimeoffset");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("DbResourceAllocationRequestId");

                            b1.ToTable("ResourceAllocationRequests");

                            b1.WithOwner()
                                .HasForeignKey("DbResourceAllocationRequestId");
                        });

                    b.OwnsOne("Fusion.Resources.Database.Entities.DbResourceAllocationRequest+DbOpState", "State", b1 =>
                        {
                            b1.Property<Guid>("DbResourceAllocationRequestId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<bool>("IsCompleted")
                                .HasColumnType("bit");

                            b1.Property<string>("State")
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)");

                            b1.HasKey("DbResourceAllocationRequestId");

                            b1.ToTable("ResourceAllocationRequests");

                            b1.WithOwner()
                                .HasForeignKey("DbResourceAllocationRequestId");
                        });

                    b.Navigation("CreatedBy");

                    b.Navigation("OrgPositionInstance")
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("ProposalParameters")
                        .IsRequired();

                    b.Navigation("ProposedPerson")
                        .IsRequired();

                    b.Navigation("ProvisioningStatus")
                        .IsRequired();

                    b.Navigation("State")
                        .IsRequired();

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("Fusion.Resources.Database.Entities.DbResponsibilityMatrix", b =>
                {
                    b.HasOne("Fusion.Resources.Database.Entities.DbPerson", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Fusion.Resources.Database.Entities.DbProject", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fusion.Resources.Database.Entities.DbPerson", "Responsible")
                        .WithMany()
                        .HasForeignKey("ResponsibleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fusion.Resources.Database.Entities.DbPerson", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedBy");

                    b.Navigation("Project");

                    b.Navigation("Responsible");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("Fusion.Resources.Database.Entities.DbSecondOpinionPrompt", b =>
                {
                    b.HasOne("Fusion.Resources.Database.Entities.DbPerson", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Fusion.Resources.Database.Entities.DbResourceAllocationRequest", "Request")
                        .WithMany()
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("Fusion.Resources.Database.Entities.DbSecondOpinionResponse", b =>
                {
                    b.HasOne("Fusion.Resources.Database.Entities.DbPerson", "AssignedTo")
                        .WithMany()
                        .HasForeignKey("AssignedToId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Fusion.Resources.Database.Entities.DbSecondOpinionPrompt", "SecondOpinion")
                        .WithMany("Responses")
                        .HasForeignKey("PromptId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AssignedTo");

                    b.Navigation("SecondOpinion");
                });

            modelBuilder.Entity("Fusion.Resources.Database.Entities.DbSharedRequest", b =>
                {
                    b.HasOne("Fusion.Resources.Database.Entities.DbResourceAllocationRequest", "Request")
                        .WithMany()
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Fusion.Resources.Database.Entities.DbPerson", "SharedBy")
                        .WithMany()
                        .HasForeignKey("SharedById")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Fusion.Resources.Database.Entities.DbPerson", "SharedWith")
                        .WithMany()
                        .HasForeignKey("SharedWithId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Request");

                    b.Navigation("SharedBy");

                    b.Navigation("SharedWith");
                });

            modelBuilder.Entity("Fusion.Resources.Database.Entities.DbWorkflow", b =>
                {
                    b.HasOne("Fusion.Resources.Database.Entities.DbPerson", "TerminatedBy")
                        .WithMany()
                        .HasForeignKey("TerminatedbyId");

                    b.Navigation("TerminatedBy");
                });

            modelBuilder.Entity("Fusion.Resources.Database.Entities.DbWorkflowStep", b =>
                {
                    b.HasOne("Fusion.Resources.Database.Entities.DbPerson", "CompletedBy")
                        .WithMany()
                        .HasForeignKey("CompletedById");

                    b.HasOne("Fusion.Resources.Database.Entities.DbWorkflow", "Workflow")
                        .WithMany("WorkflowSteps")
                        .HasForeignKey("WorkflowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompletedBy");

                    b.Navigation("Workflow");
                });

            modelBuilder.Entity("Fusion.Resources.Database.Entities.DbExternalPersonnelPerson", b =>
                {
                    b.Navigation("Disciplines");
                });

            modelBuilder.Entity("Fusion.Resources.Database.Entities.DbProject", b =>
                {
                    b.Navigation("Contracts");
                });

            modelBuilder.Entity("Fusion.Resources.Database.Entities.DbResourceAllocationRequest", b =>
                {
                    b.Navigation("Actions");

                    b.Navigation("Conversation");
                });

            modelBuilder.Entity("Fusion.Resources.Database.Entities.DbSecondOpinionPrompt", b =>
                {
                    b.Navigation("Responses");
                });

            modelBuilder.Entity("Fusion.Resources.Database.Entities.DbWorkflow", b =>
                {
                    b.Navigation("WorkflowSteps");
                });
#pragma warning restore 612, 618
        }
    }
}
